### YamlMime:XRefMap
sorted: true
references:
- uid: Recore
  name: Recore
  href: api/Recore.html
  commentId: N:Recore
  fullName: Recore
  nameWithType: Recore
- uid: Recore.AbsoluteUri
  name: AbsoluteUri
  href: api/Recore.AbsoluteUri.html
  commentId: T:Recore.AbsoluteUri
  fullName: Recore.AbsoluteUri
  nameWithType: AbsoluteUri
- uid: Recore.AbsoluteUri.#ctor(System.String)
  name: AbsoluteUri(String)
  href: api/Recore.AbsoluteUri.html#Recore_AbsoluteUri__ctor_System_String_
  commentId: M:Recore.AbsoluteUri.#ctor(System.String)
  fullName: Recore.AbsoluteUri.AbsoluteUri(System.String)
  nameWithType: AbsoluteUri.AbsoluteUri(String)
- uid: Recore.AbsoluteUri.#ctor(Uri,Recore.RelativeUri)
  name: AbsoluteUri(Uri, RelativeUri)
  href: api/Recore.AbsoluteUri.html#Recore_AbsoluteUri__ctor_Uri_Recore_RelativeUri_
  commentId: M:Recore.AbsoluteUri.#ctor(Uri,Recore.RelativeUri)
  fullName: Recore.AbsoluteUri.AbsoluteUri(Uri, Recore.RelativeUri)
  nameWithType: AbsoluteUri.AbsoluteUri(Uri, RelativeUri)
- uid: Recore.AbsoluteUri.#ctor(Uri,System.String)
  name: AbsoluteUri(Uri, String)
  href: api/Recore.AbsoluteUri.html#Recore_AbsoluteUri__ctor_Uri_System_String_
  commentId: M:Recore.AbsoluteUri.#ctor(Uri,System.String)
  fullName: Recore.AbsoluteUri.AbsoluteUri(Uri, System.String)
  nameWithType: AbsoluteUri.AbsoluteUri(Uri, String)
- uid: Recore.AbsoluteUri.#ctor(Uri,Uri)
  name: AbsoluteUri(Uri, Uri)
  href: api/Recore.AbsoluteUri.html#Recore_AbsoluteUri__ctor_Uri_Uri_
  commentId: M:Recore.AbsoluteUri.#ctor(Uri,Uri)
  fullName: Recore.AbsoluteUri.AbsoluteUri(Uri, Uri)
  nameWithType: AbsoluteUri.AbsoluteUri(Uri, Uri)
- uid: Recore.AbsoluteUri.#ctor*
  name: AbsoluteUri
  href: api/Recore.AbsoluteUri.html#Recore_AbsoluteUri__ctor_
  commentId: Overload:Recore.AbsoluteUri.#ctor
  isSpec: "True"
  fullName: Recore.AbsoluteUri.AbsoluteUri
  nameWithType: AbsoluteUri.AbsoluteUri
- uid: Recore.AbsoluteUri.Combine(Recore.RelativeUri)
  name: Combine(RelativeUri)
  href: api/Recore.AbsoluteUri.html#Recore_AbsoluteUri_Combine_Recore_RelativeUri_
  commentId: M:Recore.AbsoluteUri.Combine(Recore.RelativeUri)
  fullName: Recore.AbsoluteUri.Combine(Recore.RelativeUri)
  nameWithType: AbsoluteUri.Combine(RelativeUri)
- uid: Recore.AbsoluteUri.Combine(System.String)
  name: Combine(String)
  href: api/Recore.AbsoluteUri.html#Recore_AbsoluteUri_Combine_System_String_
  commentId: M:Recore.AbsoluteUri.Combine(System.String)
  fullName: Recore.AbsoluteUri.Combine(System.String)
  nameWithType: AbsoluteUri.Combine(String)
- uid: Recore.AbsoluteUri.Combine*
  name: Combine
  href: api/Recore.AbsoluteUri.html#Recore_AbsoluteUri_Combine_
  commentId: Overload:Recore.AbsoluteUri.Combine
  isSpec: "True"
  fullName: Recore.AbsoluteUri.Combine
  nameWithType: AbsoluteUri.Combine
- uid: Recore.AsyncAction
  name: AsyncAction
  href: api/Recore.AsyncAction.html
  commentId: T:Recore.AsyncAction
  fullName: Recore.AsyncAction
  nameWithType: AsyncAction
- uid: Recore.AsyncAction`1
  name: AsyncAction<T>
  href: api/Recore.AsyncAction-1.html
  commentId: T:Recore.AsyncAction`1
  name.vb: AsyncAction(Of T)
  fullName: Recore.AsyncAction<T>
  fullName.vb: Recore.AsyncAction(Of T)
  nameWithType: AsyncAction<T>
  nameWithType.vb: AsyncAction(Of T)
- uid: Recore.AsyncAction`10
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
  href: api/Recore.AsyncAction-10.html
  commentId: T:Recore.AsyncAction`10
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
- uid: Recore.AsyncAction`11
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
  href: api/Recore.AsyncAction-11.html
  commentId: T:Recore.AsyncAction`11
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
- uid: Recore.AsyncAction`12
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
  href: api/Recore.AsyncAction-12.html
  commentId: T:Recore.AsyncAction`12
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
- uid: Recore.AsyncAction`13
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
  href: api/Recore.AsyncAction-13.html
  commentId: T:Recore.AsyncAction`13
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
- uid: Recore.AsyncAction`14
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
  href: api/Recore.AsyncAction-14.html
  commentId: T:Recore.AsyncAction`14
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
- uid: Recore.AsyncAction`15
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
  href: api/Recore.AsyncAction-15.html
  commentId: T:Recore.AsyncAction`15
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
- uid: Recore.AsyncAction`16
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
  href: api/Recore.AsyncAction-16.html
  commentId: T:Recore.AsyncAction`16
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)
- uid: Recore.AsyncAction`2
  name: AsyncAction<T1, T2>
  href: api/Recore.AsyncAction-2.html
  commentId: T:Recore.AsyncAction`2
  name.vb: AsyncAction(Of T1, T2)
  fullName: Recore.AsyncAction<T1, T2>
  fullName.vb: Recore.AsyncAction(Of T1, T2)
  nameWithType: AsyncAction<T1, T2>
  nameWithType.vb: AsyncAction(Of T1, T2)
- uid: Recore.AsyncAction`3
  name: AsyncAction<T1, T2, T3>
  href: api/Recore.AsyncAction-3.html
  commentId: T:Recore.AsyncAction`3
  name.vb: AsyncAction(Of T1, T2, T3)
  fullName: Recore.AsyncAction<T1, T2, T3>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3)
  nameWithType: AsyncAction<T1, T2, T3>
  nameWithType.vb: AsyncAction(Of T1, T2, T3)
- uid: Recore.AsyncAction`4
  name: AsyncAction<T1, T2, T3, T4>
  href: api/Recore.AsyncAction-4.html
  commentId: T:Recore.AsyncAction`4
  name.vb: AsyncAction(Of T1, T2, T3, T4)
  fullName: Recore.AsyncAction<T1, T2, T3, T4>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4)
  nameWithType: AsyncAction<T1, T2, T3, T4>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4)
- uid: Recore.AsyncAction`5
  name: AsyncAction<T1, T2, T3, T4, T5>
  href: api/Recore.AsyncAction-5.html
  commentId: T:Recore.AsyncAction`5
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5)
- uid: Recore.AsyncAction`6
  name: AsyncAction<T1, T2, T3, T4, T5, T6>
  href: api/Recore.AsyncAction-6.html
  commentId: T:Recore.AsyncAction`6
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6)
- uid: Recore.AsyncAction`7
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7>
  href: api/Recore.AsyncAction-7.html
  commentId: T:Recore.AsyncAction`7
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7)
- uid: Recore.AsyncAction`8
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8>
  href: api/Recore.AsyncAction-8.html
  commentId: T:Recore.AsyncAction`8
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8)
- uid: Recore.AsyncAction`9
  name: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9>
  href: api/Recore.AsyncAction-9.html
  commentId: T:Recore.AsyncAction`9
  name.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9)
  fullName: Recore.AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9>
  fullName.vb: Recore.AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9)
  nameWithType: AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9>
  nameWithType.vb: AsyncAction(Of T1, T2, T3, T4, T5, T6, T7, T8, T9)
- uid: Recore.AsyncFunc`1
  name: AsyncFunc<TResult>
  href: api/Recore.AsyncFunc-1.html
  commentId: T:Recore.AsyncFunc`1
  name.vb: AsyncFunc(Of TResult)
  fullName: Recore.AsyncFunc<TResult>
  fullName.vb: Recore.AsyncFunc(Of TResult)
  nameWithType: AsyncFunc<TResult>
  nameWithType.vb: AsyncFunc(Of TResult)
- uid: Recore.AsyncFunc`10
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  href: api/Recore.AsyncFunc-10.html
  commentId: T:Recore.AsyncFunc`10
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
- uid: Recore.AsyncFunc`11
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  href: api/Recore.AsyncFunc-11.html
  commentId: T:Recore.AsyncFunc`11
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
- uid: Recore.AsyncFunc`12
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  href: api/Recore.AsyncFunc-12.html
  commentId: T:Recore.AsyncFunc`12
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
- uid: Recore.AsyncFunc`13
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  href: api/Recore.AsyncFunc-13.html
  commentId: T:Recore.AsyncFunc`13
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
- uid: Recore.AsyncFunc`14
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  href: api/Recore.AsyncFunc-14.html
  commentId: T:Recore.AsyncFunc`14
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
- uid: Recore.AsyncFunc`15
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  href: api/Recore.AsyncFunc-15.html
  commentId: T:Recore.AsyncFunc`15
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
- uid: Recore.AsyncFunc`16
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  href: api/Recore.AsyncFunc-16.html
  commentId: T:Recore.AsyncFunc`16
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
- uid: Recore.AsyncFunc`17
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>
  href: api/Recore.AsyncFunc-17.html
  commentId: T:Recore.AsyncFunc`17
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult)
- uid: Recore.AsyncFunc`2
  name: AsyncFunc<T, TResult>
  href: api/Recore.AsyncFunc-2.html
  commentId: T:Recore.AsyncFunc`2
  name.vb: AsyncFunc(Of T, TResult)
  fullName: Recore.AsyncFunc<T, TResult>
  fullName.vb: Recore.AsyncFunc(Of T, TResult)
  nameWithType: AsyncFunc<T, TResult>
  nameWithType.vb: AsyncFunc(Of T, TResult)
- uid: Recore.AsyncFunc`3
  name: AsyncFunc<T1, T2, TResult>
  href: api/Recore.AsyncFunc-3.html
  commentId: T:Recore.AsyncFunc`3
  name.vb: AsyncFunc(Of T1, T2, TResult)
  fullName: Recore.AsyncFunc<T1, T2, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, TResult)
  nameWithType: AsyncFunc<T1, T2, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, TResult)
- uid: Recore.AsyncFunc`4
  name: AsyncFunc<T1, T2, T3, TResult>
  href: api/Recore.AsyncFunc-4.html
  commentId: T:Recore.AsyncFunc`4
  name.vb: AsyncFunc(Of T1, T2, T3, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, TResult)
- uid: Recore.AsyncFunc`5
  name: AsyncFunc<T1, T2, T3, T4, TResult>
  href: api/Recore.AsyncFunc-5.html
  commentId: T:Recore.AsyncFunc`5
  name.vb: AsyncFunc(Of T1, T2, T3, T4, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, TResult)
- uid: Recore.AsyncFunc`6
  name: AsyncFunc<T1, T2, T3, T4, T5, TResult>
  href: api/Recore.AsyncFunc-6.html
  commentId: T:Recore.AsyncFunc`6
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, TResult)
- uid: Recore.AsyncFunc`7
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, TResult>
  href: api/Recore.AsyncFunc-7.html
  commentId: T:Recore.AsyncFunc`7
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, TResult)
- uid: Recore.AsyncFunc`8
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  href: api/Recore.AsyncFunc-8.html
  commentId: T:Recore.AsyncFunc`8
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
- uid: Recore.AsyncFunc`9
  name: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  href: api/Recore.AsyncFunc-9.html
  commentId: T:Recore.AsyncFunc`9
  name.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName: Recore.AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName.vb: Recore.AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  nameWithType: AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: AsyncFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
- uid: Recore.Collections.Generic
  name: Recore.Collections.Generic
  href: api/Recore.Collections.Generic.html
  commentId: N:Recore.Collections.Generic
  fullName: Recore.Collections.Generic
  nameWithType: Recore.Collections.Generic
- uid: Recore.Collections.Generic.AnonymousComparer`1
  name: AnonymousComparer<T>
  href: api/Recore.Collections.Generic.AnonymousComparer-1.html
  commentId: T:Recore.Collections.Generic.AnonymousComparer`1
  name.vb: AnonymousComparer(Of T)
  fullName: Recore.Collections.Generic.AnonymousComparer<T>
  fullName.vb: Recore.Collections.Generic.AnonymousComparer(Of T)
  nameWithType: AnonymousComparer<T>
  nameWithType.vb: AnonymousComparer(Of T)
- uid: Recore.Collections.Generic.AnonymousComparer`1.#ctor(Recore.Func{`0,`0,System.Int32})
  name: AnonymousComparer(Func<T, T, Int32>)
  href: api/Recore.Collections.Generic.AnonymousComparer-1.html#Recore_Collections_Generic_AnonymousComparer_1__ctor_Recore_Func__0__0_System_Int32__
  commentId: M:Recore.Collections.Generic.AnonymousComparer`1.#ctor(Recore.Func{`0,`0,System.Int32})
  name.vb: AnonymousComparer(Func(Of T, T, Int32))
  fullName: Recore.Collections.Generic.AnonymousComparer<T>.AnonymousComparer(Recore.Func<T, T, System.Int32>)
  fullName.vb: Recore.Collections.Generic.AnonymousComparer(Of T).AnonymousComparer(Recore.Func(Of T, T, System.Int32))
  nameWithType: AnonymousComparer<T>.AnonymousComparer(Func<T, T, Int32>)
  nameWithType.vb: AnonymousComparer(Of T).AnonymousComparer(Func(Of T, T, Int32))
- uid: Recore.Collections.Generic.AnonymousComparer`1.#ctor*
  name: AnonymousComparer
  href: api/Recore.Collections.Generic.AnonymousComparer-1.html#Recore_Collections_Generic_AnonymousComparer_1__ctor_
  commentId: Overload:Recore.Collections.Generic.AnonymousComparer`1.#ctor
  isSpec: "True"
  fullName: Recore.Collections.Generic.AnonymousComparer<T>.AnonymousComparer
  fullName.vb: Recore.Collections.Generic.AnonymousComparer(Of T).AnonymousComparer
  nameWithType: AnonymousComparer<T>.AnonymousComparer
  nameWithType.vb: AnonymousComparer(Of T).AnonymousComparer
- uid: Recore.Collections.Generic.AnonymousComparer`1.Compare(`0,`0)
  name: Compare(T, T)
  href: api/Recore.Collections.Generic.AnonymousComparer-1.html#Recore_Collections_Generic_AnonymousComparer_1_Compare__0__0_
  commentId: M:Recore.Collections.Generic.AnonymousComparer`1.Compare(`0,`0)
  fullName: Recore.Collections.Generic.AnonymousComparer<T>.Compare(T, T)
  fullName.vb: Recore.Collections.Generic.AnonymousComparer(Of T).Compare(T, T)
  nameWithType: AnonymousComparer<T>.Compare(T, T)
  nameWithType.vb: AnonymousComparer(Of T).Compare(T, T)
- uid: Recore.Collections.Generic.AnonymousComparer`1.Compare*
  name: Compare
  href: api/Recore.Collections.Generic.AnonymousComparer-1.html#Recore_Collections_Generic_AnonymousComparer_1_Compare_
  commentId: Overload:Recore.Collections.Generic.AnonymousComparer`1.Compare
  isSpec: "True"
  fullName: Recore.Collections.Generic.AnonymousComparer<T>.Compare
  fullName.vb: Recore.Collections.Generic.AnonymousComparer(Of T).Compare
  nameWithType: AnonymousComparer<T>.Compare
  nameWithType.vb: AnonymousComparer(Of T).Compare
- uid: Recore.Collections.Generic.AnonymousEqualityComparer`1
  name: AnonymousEqualityComparer<T>
  href: api/Recore.Collections.Generic.AnonymousEqualityComparer-1.html
  commentId: T:Recore.Collections.Generic.AnonymousEqualityComparer`1
  name.vb: AnonymousEqualityComparer(Of T)
  fullName: Recore.Collections.Generic.AnonymousEqualityComparer<T>
  fullName.vb: Recore.Collections.Generic.AnonymousEqualityComparer(Of T)
  nameWithType: AnonymousEqualityComparer<T>
  nameWithType.vb: AnonymousEqualityComparer(Of T)
- uid: Recore.Collections.Generic.AnonymousEqualityComparer`1.#ctor(Recore.Func{`0,`0,System.Boolean},Recore.Func{`0,System.Int32})
  name: AnonymousEqualityComparer(Func<T, T, Boolean>, Func<T, Int32>)
  href: api/Recore.Collections.Generic.AnonymousEqualityComparer-1.html#Recore_Collections_Generic_AnonymousEqualityComparer_1__ctor_Recore_Func__0__0_System_Boolean__Recore_Func__0_System_Int32__
  commentId: M:Recore.Collections.Generic.AnonymousEqualityComparer`1.#ctor(Recore.Func{`0,`0,System.Boolean},Recore.Func{`0,System.Int32})
  name.vb: AnonymousEqualityComparer(Func(Of T, T, Boolean), Func(Of T, Int32))
  fullName: Recore.Collections.Generic.AnonymousEqualityComparer<T>.AnonymousEqualityComparer(Recore.Func<T, T, System.Boolean>, Recore.Func<T, System.Int32>)
  fullName.vb: Recore.Collections.Generic.AnonymousEqualityComparer(Of T).AnonymousEqualityComparer(Recore.Func(Of T, T, System.Boolean), Recore.Func(Of T, System.Int32))
  nameWithType: AnonymousEqualityComparer<T>.AnonymousEqualityComparer(Func<T, T, Boolean>, Func<T, Int32>)
  nameWithType.vb: AnonymousEqualityComparer(Of T).AnonymousEqualityComparer(Func(Of T, T, Boolean), Func(Of T, Int32))
- uid: Recore.Collections.Generic.AnonymousEqualityComparer`1.#ctor*
  name: AnonymousEqualityComparer
  href: api/Recore.Collections.Generic.AnonymousEqualityComparer-1.html#Recore_Collections_Generic_AnonymousEqualityComparer_1__ctor_
  commentId: Overload:Recore.Collections.Generic.AnonymousEqualityComparer`1.#ctor
  isSpec: "True"
  fullName: Recore.Collections.Generic.AnonymousEqualityComparer<T>.AnonymousEqualityComparer
  fullName.vb: Recore.Collections.Generic.AnonymousEqualityComparer(Of T).AnonymousEqualityComparer
  nameWithType: AnonymousEqualityComparer<T>.AnonymousEqualityComparer
  nameWithType.vb: AnonymousEqualityComparer(Of T).AnonymousEqualityComparer
- uid: Recore.Collections.Generic.AnonymousEqualityComparer`1.Equals(`0,`0)
  name: Equals(T, T)
  href: api/Recore.Collections.Generic.AnonymousEqualityComparer-1.html#Recore_Collections_Generic_AnonymousEqualityComparer_1_Equals__0__0_
  commentId: M:Recore.Collections.Generic.AnonymousEqualityComparer`1.Equals(`0,`0)
  fullName: Recore.Collections.Generic.AnonymousEqualityComparer<T>.Equals(T, T)
  fullName.vb: Recore.Collections.Generic.AnonymousEqualityComparer(Of T).Equals(T, T)
  nameWithType: AnonymousEqualityComparer<T>.Equals(T, T)
  nameWithType.vb: AnonymousEqualityComparer(Of T).Equals(T, T)
- uid: Recore.Collections.Generic.AnonymousEqualityComparer`1.Equals*
  name: Equals
  href: api/Recore.Collections.Generic.AnonymousEqualityComparer-1.html#Recore_Collections_Generic_AnonymousEqualityComparer_1_Equals_
  commentId: Overload:Recore.Collections.Generic.AnonymousEqualityComparer`1.Equals
  isSpec: "True"
  fullName: Recore.Collections.Generic.AnonymousEqualityComparer<T>.Equals
  fullName.vb: Recore.Collections.Generic.AnonymousEqualityComparer(Of T).Equals
  nameWithType: AnonymousEqualityComparer<T>.Equals
  nameWithType.vb: AnonymousEqualityComparer(Of T).Equals
- uid: Recore.Collections.Generic.AnonymousEqualityComparer`1.GetHashCode(`0)
  name: GetHashCode(T)
  href: api/Recore.Collections.Generic.AnonymousEqualityComparer-1.html#Recore_Collections_Generic_AnonymousEqualityComparer_1_GetHashCode__0_
  commentId: M:Recore.Collections.Generic.AnonymousEqualityComparer`1.GetHashCode(`0)
  fullName: Recore.Collections.Generic.AnonymousEqualityComparer<T>.GetHashCode(T)
  fullName.vb: Recore.Collections.Generic.AnonymousEqualityComparer(Of T).GetHashCode(T)
  nameWithType: AnonymousEqualityComparer<T>.GetHashCode(T)
  nameWithType.vb: AnonymousEqualityComparer(Of T).GetHashCode(T)
- uid: Recore.Collections.Generic.AnonymousEqualityComparer`1.GetHashCode*
  name: GetHashCode
  href: api/Recore.Collections.Generic.AnonymousEqualityComparer-1.html#Recore_Collections_Generic_AnonymousEqualityComparer_1_GetHashCode_
  commentId: Overload:Recore.Collections.Generic.AnonymousEqualityComparer`1.GetHashCode
  isSpec: "True"
  fullName: Recore.Collections.Generic.AnonymousEqualityComparer<T>.GetHashCode
  fullName.vb: Recore.Collections.Generic.AnonymousEqualityComparer(Of T).GetHashCode
  nameWithType: AnonymousEqualityComparer<T>.GetHashCode
  nameWithType.vb: AnonymousEqualityComparer(Of T).GetHashCode
- uid: Recore.Collections.Generic.ICollectionExtensions
  name: ICollectionExtensions
  href: api/Recore.Collections.Generic.ICollectionExtensions.html
  commentId: T:Recore.Collections.Generic.ICollectionExtensions
  fullName: Recore.Collections.Generic.ICollectionExtensions
  nameWithType: ICollectionExtensions
- uid: Recore.Collections.Generic.ICollectionExtensions.Append*
  name: Append
  href: api/Recore.Collections.Generic.ICollectionExtensions.html#Recore_Collections_Generic_ICollectionExtensions_Append_
  commentId: Overload:Recore.Collections.Generic.ICollectionExtensions.Append
  isSpec: "True"
  fullName: Recore.Collections.Generic.ICollectionExtensions.Append
  nameWithType: ICollectionExtensions.Append
- uid: Recore.Collections.Generic.ICollectionExtensions.Append``1(ICollection{``0},``0)
  name: Append<T>(ICollection<T>, T)
  href: api/Recore.Collections.Generic.ICollectionExtensions.html#Recore_Collections_Generic_ICollectionExtensions_Append__1_ICollection___0____0_
  commentId: M:Recore.Collections.Generic.ICollectionExtensions.Append``1(ICollection{``0},``0)
  name.vb: Append(Of T)(ICollection(Of T), T)
  fullName: Recore.Collections.Generic.ICollectionExtensions.Append<T>(ICollection<T>, T)
  fullName.vb: Recore.Collections.Generic.ICollectionExtensions.Append(Of T)(ICollection(Of T), T)
  nameWithType: ICollectionExtensions.Append<T>(ICollection<T>, T)
  nameWithType.vb: ICollectionExtensions.Append(Of T)(ICollection(Of T), T)
- uid: Recore.Collections.Generic.IDictionaryExtensions
  name: IDictionaryExtensions
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html
  commentId: T:Recore.Collections.Generic.IDictionaryExtensions
  fullName: Recore.Collections.Generic.IDictionaryExtensions
  nameWithType: IDictionaryExtensions
- uid: Recore.Collections.Generic.IDictionaryExtensions.AddRange*
  name: AddRange
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_AddRange_
  commentId: Overload:Recore.Collections.Generic.IDictionaryExtensions.AddRange
  isSpec: "True"
  fullName: Recore.Collections.Generic.IDictionaryExtensions.AddRange
  nameWithType: IDictionaryExtensions.AddRange
- uid: Recore.Collections.Generic.IDictionaryExtensions.AddRange``2(IDictionary{``0,``1},IEnumerable{KeyValuePair{``0,``1}})
  name: AddRange<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>)
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_AddRange__2_IDictionary___0___1__IEnumerable_KeyValuePair___0___1___
  commentId: M:Recore.Collections.Generic.IDictionaryExtensions.AddRange``2(IDictionary{``0,``1},IEnumerable{KeyValuePair{``0,``1}})
  name.vb: AddRange(Of TKey, TValue)(IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName: Recore.Collections.Generic.IDictionaryExtensions.AddRange<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>)
  fullName.vb: Recore.Collections.Generic.IDictionaryExtensions.AddRange(Of TKey, TValue)(IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  nameWithType: IDictionaryExtensions.AddRange<TKey, TValue>(IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>)
  nameWithType.vb: IDictionaryExtensions.AddRange(Of TKey, TValue)(IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)))
- uid: Recore.Collections.Generic.IDictionaryExtensions.Append*
  name: Append
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_Append_
  commentId: Overload:Recore.Collections.Generic.IDictionaryExtensions.Append
  isSpec: "True"
  fullName: Recore.Collections.Generic.IDictionaryExtensions.Append
  nameWithType: IDictionaryExtensions.Append
- uid: Recore.Collections.Generic.IDictionaryExtensions.Append``2(IDictionary{``0,``1},``0,``1)
  name: Append<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_Append__2_IDictionary___0___1____0___1_
  commentId: M:Recore.Collections.Generic.IDictionaryExtensions.Append``2(IDictionary{``0,``1},``0,``1)
  name.vb: Append(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName: Recore.Collections.Generic.IDictionaryExtensions.Append<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  fullName.vb: Recore.Collections.Generic.IDictionaryExtensions.Append(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  nameWithType: IDictionaryExtensions.Append<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: IDictionaryExtensions.Append(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: Recore.Collections.Generic.IDictionaryExtensions.GetOrAdd*
  name: GetOrAdd
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_GetOrAdd_
  commentId: Overload:Recore.Collections.Generic.IDictionaryExtensions.GetOrAdd
  isSpec: "True"
  fullName: Recore.Collections.Generic.IDictionaryExtensions.GetOrAdd
  nameWithType: IDictionaryExtensions.GetOrAdd
- uid: Recore.Collections.Generic.IDictionaryExtensions.GetOrAdd``2(IDictionary{``0,``1},``0,``1)
  name: GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_GetOrAdd__2_IDictionary___0___1____0___1_
  commentId: M:Recore.Collections.Generic.IDictionaryExtensions.GetOrAdd``2(IDictionary{``0,``1},``0,``1)
  name.vb: GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName: Recore.Collections.Generic.IDictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  fullName.vb: Recore.Collections.Generic.IDictionaryExtensions.GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  nameWithType: IDictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: IDictionaryExtensions.GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault*
  name: ValueOrDefault
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_ValueOrDefault_
  commentId: Overload:Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault
  isSpec: "True"
  fullName: Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault
  nameWithType: IDictionaryExtensions.ValueOrDefault
- uid: Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault``2(Dictionary{``0,``1},``0)
  name: ValueOrDefault<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_ValueOrDefault__2_Dictionary___0___1____0_
  commentId: M:Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault``2(Dictionary{``0,``1},``0)
  name.vb: ValueOrDefault(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  fullName: Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  fullName.vb: Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  nameWithType: IDictionaryExtensions.ValueOrDefault<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  nameWithType.vb: IDictionaryExtensions.ValueOrDefault(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
- uid: Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault``2(IDictionary{``0,``1},``0)
  name: ValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  href: api/Recore.Collections.Generic.IDictionaryExtensions.html#Recore_Collections_Generic_IDictionaryExtensions_ValueOrDefault__2_IDictionary___0___1____0_
  commentId: M:Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault``2(IDictionary{``0,``1},``0)
  name.vb: ValueOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  fullName: Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  fullName.vb: Recore.Collections.Generic.IDictionaryExtensions.ValueOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  nameWithType: IDictionaryExtensions.ValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  nameWithType.vb: IDictionaryExtensions.ValueOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
- uid: Recore.Collections.Generic.IIterator`1
  name: IIterator<T>
  href: api/Recore.Collections.Generic.IIterator-1.html
  commentId: T:Recore.Collections.Generic.IIterator`1
  name.vb: IIterator(Of T)
  fullName: Recore.Collections.Generic.IIterator<T>
  fullName.vb: Recore.Collections.Generic.IIterator(Of T)
  nameWithType: IIterator<T>
  nameWithType.vb: IIterator(Of T)
- uid: Recore.Collections.Generic.IIterator`1.HasNext
  name: HasNext
  href: api/Recore.Collections.Generic.IIterator-1.html#Recore_Collections_Generic_IIterator_1_HasNext
  commentId: P:Recore.Collections.Generic.IIterator`1.HasNext
  fullName: Recore.Collections.Generic.IIterator<T>.HasNext
  fullName.vb: Recore.Collections.Generic.IIterator(Of T).HasNext
  nameWithType: IIterator<T>.HasNext
  nameWithType.vb: IIterator(Of T).HasNext
- uid: Recore.Collections.Generic.IIterator`1.HasNext*
  name: HasNext
  href: api/Recore.Collections.Generic.IIterator-1.html#Recore_Collections_Generic_IIterator_1_HasNext_
  commentId: Overload:Recore.Collections.Generic.IIterator`1.HasNext
  isSpec: "True"
  fullName: Recore.Collections.Generic.IIterator<T>.HasNext
  fullName.vb: Recore.Collections.Generic.IIterator(Of T).HasNext
  nameWithType: IIterator<T>.HasNext
  nameWithType.vb: IIterator(Of T).HasNext
- uid: Recore.Collections.Generic.IIterator`1.Next
  name: Next()
  href: api/Recore.Collections.Generic.IIterator-1.html#Recore_Collections_Generic_IIterator_1_Next
  commentId: M:Recore.Collections.Generic.IIterator`1.Next
  fullName: Recore.Collections.Generic.IIterator<T>.Next()
  fullName.vb: Recore.Collections.Generic.IIterator(Of T).Next()
  nameWithType: IIterator<T>.Next()
  nameWithType.vb: IIterator(Of T).Next()
- uid: Recore.Collections.Generic.IIterator`1.Next*
  name: Next
  href: api/Recore.Collections.Generic.IIterator-1.html#Recore_Collections_Generic_IIterator_1_Next_
  commentId: Overload:Recore.Collections.Generic.IIterator`1.Next
  isSpec: "True"
  fullName: Recore.Collections.Generic.IIterator<T>.Next
  fullName.vb: Recore.Collections.Generic.IIterator(Of T).Next
  nameWithType: IIterator<T>.Next
  nameWithType.vb: IIterator(Of T).Next
- uid: Recore.Collections.Generic.IReadOnlyDictionaryExtensions
  name: IReadOnlyDictionaryExtensions
  href: api/Recore.Collections.Generic.IReadOnlyDictionaryExtensions.html
  commentId: T:Recore.Collections.Generic.IReadOnlyDictionaryExtensions
  fullName: Recore.Collections.Generic.IReadOnlyDictionaryExtensions
  nameWithType: IReadOnlyDictionaryExtensions
- uid: Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault*
  name: ValueOrDefault
  href: api/Recore.Collections.Generic.IReadOnlyDictionaryExtensions.html#Recore_Collections_Generic_IReadOnlyDictionaryExtensions_ValueOrDefault_
  commentId: Overload:Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault
  isSpec: "True"
  fullName: Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault
  nameWithType: IReadOnlyDictionaryExtensions.ValueOrDefault
- uid: Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault``2(IReadOnlyDictionary{``0,``1},``0)
  name: ValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey)
  href: api/Recore.Collections.Generic.IReadOnlyDictionaryExtensions.html#Recore_Collections_Generic_IReadOnlyDictionaryExtensions_ValueOrDefault__2_IReadOnlyDictionary___0___1____0_
  commentId: M:Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault``2(IReadOnlyDictionary{``0,``1},``0)
  name.vb: ValueOrDefault(Of TKey, TValue)(IReadOnlyDictionary(Of TKey, TValue), TKey)
  fullName: Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey)
  fullName.vb: Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault(Of TKey, TValue)(IReadOnlyDictionary(Of TKey, TValue), TKey)
  nameWithType: IReadOnlyDictionaryExtensions.ValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey)
  nameWithType.vb: IReadOnlyDictionaryExtensions.ValueOrDefault(Of TKey, TValue)(IReadOnlyDictionary(Of TKey, TValue), TKey)
- uid: Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault``2(ReadOnlyDictionary{``0,``1},``0)
  name: ValueOrDefault<TKey, TValue>(ReadOnlyDictionary<TKey, TValue>, TKey)
  href: api/Recore.Collections.Generic.IReadOnlyDictionaryExtensions.html#Recore_Collections_Generic_IReadOnlyDictionaryExtensions_ValueOrDefault__2_ReadOnlyDictionary___0___1____0_
  commentId: M:Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault``2(ReadOnlyDictionary{``0,``1},``0)
  name.vb: ValueOrDefault(Of TKey, TValue)(ReadOnlyDictionary(Of TKey, TValue), TKey)
  fullName: Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault<TKey, TValue>(ReadOnlyDictionary<TKey, TValue>, TKey)
  fullName.vb: Recore.Collections.Generic.IReadOnlyDictionaryExtensions.ValueOrDefault(Of TKey, TValue)(ReadOnlyDictionary(Of TKey, TValue), TKey)
  nameWithType: IReadOnlyDictionaryExtensions.ValueOrDefault<TKey, TValue>(ReadOnlyDictionary<TKey, TValue>, TKey)
  nameWithType.vb: IReadOnlyDictionaryExtensions.ValueOrDefault(Of TKey, TValue)(ReadOnlyDictionary(Of TKey, TValue), TKey)
- uid: Recore.Collections.Generic.Iterator
  name: Iterator
  href: api/Recore.Collections.Generic.Iterator.html
  commentId: T:Recore.Collections.Generic.Iterator
  fullName: Recore.Collections.Generic.Iterator
  nameWithType: Iterator
- uid: Recore.Collections.Generic.Iterator.FromEnumerable*
  name: FromEnumerable
  href: api/Recore.Collections.Generic.Iterator.html#Recore_Collections_Generic_Iterator_FromEnumerable_
  commentId: Overload:Recore.Collections.Generic.Iterator.FromEnumerable
  isSpec: "True"
  fullName: Recore.Collections.Generic.Iterator.FromEnumerable
  nameWithType: Iterator.FromEnumerable
- uid: Recore.Collections.Generic.Iterator.FromEnumerable``1(IEnumerable{``0})
  name: FromEnumerable<T>(IEnumerable<T>)
  href: api/Recore.Collections.Generic.Iterator.html#Recore_Collections_Generic_Iterator_FromEnumerable__1_IEnumerable___0__
  commentId: M:Recore.Collections.Generic.Iterator.FromEnumerable``1(IEnumerable{``0})
  name.vb: FromEnumerable(Of T)(IEnumerable(Of T))
  fullName: Recore.Collections.Generic.Iterator.FromEnumerable<T>(IEnumerable<T>)
  fullName.vb: Recore.Collections.Generic.Iterator.FromEnumerable(Of T)(IEnumerable(Of T))
  nameWithType: Iterator.FromEnumerable<T>(IEnumerable<T>)
  nameWithType.vb: Iterator.FromEnumerable(Of T)(IEnumerable(Of T))
- uid: Recore.Collections.Generic.Iterator.FromEnumerator*
  name: FromEnumerator
  href: api/Recore.Collections.Generic.Iterator.html#Recore_Collections_Generic_Iterator_FromEnumerator_
  commentId: Overload:Recore.Collections.Generic.Iterator.FromEnumerator
  isSpec: "True"
  fullName: Recore.Collections.Generic.Iterator.FromEnumerator
  nameWithType: Iterator.FromEnumerator
- uid: Recore.Collections.Generic.Iterator.FromEnumerator``1(IEnumerator{``0})
  name: FromEnumerator<T>(IEnumerator<T>)
  href: api/Recore.Collections.Generic.Iterator.html#Recore_Collections_Generic_Iterator_FromEnumerator__1_IEnumerator___0__
  commentId: M:Recore.Collections.Generic.Iterator.FromEnumerator``1(IEnumerator{``0})
  name.vb: FromEnumerator(Of T)(IEnumerator(Of T))
  fullName: Recore.Collections.Generic.Iterator.FromEnumerator<T>(IEnumerator<T>)
  fullName.vb: Recore.Collections.Generic.Iterator.FromEnumerator(Of T)(IEnumerator(Of T))
  nameWithType: Iterator.FromEnumerator<T>(IEnumerator<T>)
  nameWithType.vb: Iterator.FromEnumerator(Of T)(IEnumerator(Of T))
- uid: Recore.Collections.Generic.LinkedListExtensions
  name: LinkedListExtensions
  href: api/Recore.Collections.Generic.LinkedListExtensions.html
  commentId: T:Recore.Collections.Generic.LinkedListExtensions
  fullName: Recore.Collections.Generic.LinkedListExtensions
  nameWithType: LinkedListExtensions
- uid: Recore.Collections.Generic.LinkedListExtensions.Add*
  name: Add
  href: api/Recore.Collections.Generic.LinkedListExtensions.html#Recore_Collections_Generic_LinkedListExtensions_Add_
  commentId: Overload:Recore.Collections.Generic.LinkedListExtensions.Add
  isSpec: "True"
  fullName: Recore.Collections.Generic.LinkedListExtensions.Add
  nameWithType: LinkedListExtensions.Add
- uid: Recore.Collections.Generic.LinkedListExtensions.Add``1(LinkedList{``0},``0)
  name: Add<T>(LinkedList<T>, T)
  href: api/Recore.Collections.Generic.LinkedListExtensions.html#Recore_Collections_Generic_LinkedListExtensions_Add__1_LinkedList___0____0_
  commentId: M:Recore.Collections.Generic.LinkedListExtensions.Add``1(LinkedList{``0},``0)
  name.vb: Add(Of T)(LinkedList(Of T), T)
  fullName: Recore.Collections.Generic.LinkedListExtensions.Add<T>(LinkedList<T>, T)
  fullName.vb: Recore.Collections.Generic.LinkedListExtensions.Add(Of T)(LinkedList(Of T), T)
  nameWithType: LinkedListExtensions.Add<T>(LinkedList<T>, T)
  nameWithType.vb: LinkedListExtensions.Add(Of T)(LinkedList(Of T), T)
- uid: Recore.Collections.Generic.LinkedListExtensions.Append*
  name: Append
  href: api/Recore.Collections.Generic.LinkedListExtensions.html#Recore_Collections_Generic_LinkedListExtensions_Append_
  commentId: Overload:Recore.Collections.Generic.LinkedListExtensions.Append
  isSpec: "True"
  fullName: Recore.Collections.Generic.LinkedListExtensions.Append
  nameWithType: LinkedListExtensions.Append
- uid: Recore.Collections.Generic.LinkedListExtensions.Append``1(LinkedList{``0},``0)
  name: Append<T>(LinkedList<T>, T)
  href: api/Recore.Collections.Generic.LinkedListExtensions.html#Recore_Collections_Generic_LinkedListExtensions_Append__1_LinkedList___0____0_
  commentId: M:Recore.Collections.Generic.LinkedListExtensions.Append``1(LinkedList{``0},``0)
  name.vb: Append(Of T)(LinkedList(Of T), T)
  fullName: Recore.Collections.Generic.LinkedListExtensions.Append<T>(LinkedList<T>, T)
  fullName.vb: Recore.Collections.Generic.LinkedListExtensions.Append(Of T)(LinkedList(Of T), T)
  nameWithType: LinkedListExtensions.Append<T>(LinkedList<T>, T)
  nameWithType.vb: LinkedListExtensions.Append(Of T)(LinkedList(Of T), T)
- uid: Recore.Collections.Generic.ListExtensions
  name: ListExtensions
  href: api/Recore.Collections.Generic.ListExtensions.html
  commentId: T:Recore.Collections.Generic.ListExtensions
  fullName: Recore.Collections.Generic.ListExtensions
  nameWithType: ListExtensions
- uid: Recore.Collections.Generic.ListExtensions.AppendRange*
  name: AppendRange
  href: api/Recore.Collections.Generic.ListExtensions.html#Recore_Collections_Generic_ListExtensions_AppendRange_
  commentId: Overload:Recore.Collections.Generic.ListExtensions.AppendRange
  isSpec: "True"
  fullName: Recore.Collections.Generic.ListExtensions.AppendRange
  nameWithType: ListExtensions.AppendRange
- uid: Recore.Collections.Generic.ListExtensions.AppendRange``1(List{``0},IEnumerable{``0})
  name: AppendRange<T>(List<T>, IEnumerable<T>)
  href: api/Recore.Collections.Generic.ListExtensions.html#Recore_Collections_Generic_ListExtensions_AppendRange__1_List___0__IEnumerable___0__
  commentId: M:Recore.Collections.Generic.ListExtensions.AppendRange``1(List{``0},IEnumerable{``0})
  name.vb: AppendRange(Of T)(List(Of T), IEnumerable(Of T))
  fullName: Recore.Collections.Generic.ListExtensions.AppendRange<T>(List<T>, IEnumerable<T>)
  fullName.vb: Recore.Collections.Generic.ListExtensions.AppendRange(Of T)(List(Of T), IEnumerable(Of T))
  nameWithType: ListExtensions.AppendRange<T>(List<T>, IEnumerable<T>)
  nameWithType.vb: ListExtensions.AppendRange(Of T)(List(Of T), IEnumerable(Of T))
- uid: Recore.Collections.Generic.MappedComparer`2
  name: MappedComparer<T, U>
  href: api/Recore.Collections.Generic.MappedComparer-2.html
  commentId: T:Recore.Collections.Generic.MappedComparer`2
  name.vb: MappedComparer(Of T, U)
  fullName: Recore.Collections.Generic.MappedComparer<T, U>
  fullName.vb: Recore.Collections.Generic.MappedComparer(Of T, U)
  nameWithType: MappedComparer<T, U>
  nameWithType.vb: MappedComparer(Of T, U)
- uid: Recore.Collections.Generic.MappedComparer`2.#ctor(Recore.Func{`0,`1})
  name: MappedComparer(Func<T, U>)
  href: api/Recore.Collections.Generic.MappedComparer-2.html#Recore_Collections_Generic_MappedComparer_2__ctor_Recore_Func__0__1__
  commentId: M:Recore.Collections.Generic.MappedComparer`2.#ctor(Recore.Func{`0,`1})
  name.vb: MappedComparer(Func(Of T, U))
  fullName: Recore.Collections.Generic.MappedComparer<T, U>.MappedComparer(Recore.Func<T, U>)
  fullName.vb: Recore.Collections.Generic.MappedComparer(Of T, U).MappedComparer(Recore.Func(Of T, U))
  nameWithType: MappedComparer<T, U>.MappedComparer(Func<T, U>)
  nameWithType.vb: MappedComparer(Of T, U).MappedComparer(Func(Of T, U))
- uid: Recore.Collections.Generic.MappedComparer`2.#ctor*
  name: MappedComparer
  href: api/Recore.Collections.Generic.MappedComparer-2.html#Recore_Collections_Generic_MappedComparer_2__ctor_
  commentId: Overload:Recore.Collections.Generic.MappedComparer`2.#ctor
  isSpec: "True"
  fullName: Recore.Collections.Generic.MappedComparer<T, U>.MappedComparer
  fullName.vb: Recore.Collections.Generic.MappedComparer(Of T, U).MappedComparer
  nameWithType: MappedComparer<T, U>.MappedComparer
  nameWithType.vb: MappedComparer(Of T, U).MappedComparer
- uid: Recore.Collections.Generic.MappedComparer`2.Compare(`0,`0)
  name: Compare(T, T)
  href: api/Recore.Collections.Generic.MappedComparer-2.html#Recore_Collections_Generic_MappedComparer_2_Compare__0__0_
  commentId: M:Recore.Collections.Generic.MappedComparer`2.Compare(`0,`0)
  fullName: Recore.Collections.Generic.MappedComparer<T, U>.Compare(T, T)
  fullName.vb: Recore.Collections.Generic.MappedComparer(Of T, U).Compare(T, T)
  nameWithType: MappedComparer<T, U>.Compare(T, T)
  nameWithType.vb: MappedComparer(Of T, U).Compare(T, T)
- uid: Recore.Collections.Generic.MappedComparer`2.Compare*
  name: Compare
  href: api/Recore.Collections.Generic.MappedComparer-2.html#Recore_Collections_Generic_MappedComparer_2_Compare_
  commentId: Overload:Recore.Collections.Generic.MappedComparer`2.Compare
  isSpec: "True"
  fullName: Recore.Collections.Generic.MappedComparer<T, U>.Compare
  fullName.vb: Recore.Collections.Generic.MappedComparer(Of T, U).Compare
  nameWithType: MappedComparer<T, U>.Compare
  nameWithType.vb: MappedComparer(Of T, U).Compare
- uid: Recore.Collections.Generic.MappedEqualityComparer`2
  name: MappedEqualityComparer<T, U>
  href: api/Recore.Collections.Generic.MappedEqualityComparer-2.html
  commentId: T:Recore.Collections.Generic.MappedEqualityComparer`2
  name.vb: MappedEqualityComparer(Of T, U)
  fullName: Recore.Collections.Generic.MappedEqualityComparer<T, U>
  fullName.vb: Recore.Collections.Generic.MappedEqualityComparer(Of T, U)
  nameWithType: MappedEqualityComparer<T, U>
  nameWithType.vb: MappedEqualityComparer(Of T, U)
- uid: Recore.Collections.Generic.MappedEqualityComparer`2.#ctor(Recore.Func{`0,`1})
  name: MappedEqualityComparer(Func<T, U>)
  href: api/Recore.Collections.Generic.MappedEqualityComparer-2.html#Recore_Collections_Generic_MappedEqualityComparer_2__ctor_Recore_Func__0__1__
  commentId: M:Recore.Collections.Generic.MappedEqualityComparer`2.#ctor(Recore.Func{`0,`1})
  name.vb: MappedEqualityComparer(Func(Of T, U))
  fullName: Recore.Collections.Generic.MappedEqualityComparer<T, U>.MappedEqualityComparer(Recore.Func<T, U>)
  fullName.vb: Recore.Collections.Generic.MappedEqualityComparer(Of T, U).MappedEqualityComparer(Recore.Func(Of T, U))
  nameWithType: MappedEqualityComparer<T, U>.MappedEqualityComparer(Func<T, U>)
  nameWithType.vb: MappedEqualityComparer(Of T, U).MappedEqualityComparer(Func(Of T, U))
- uid: Recore.Collections.Generic.MappedEqualityComparer`2.#ctor*
  name: MappedEqualityComparer
  href: api/Recore.Collections.Generic.MappedEqualityComparer-2.html#Recore_Collections_Generic_MappedEqualityComparer_2__ctor_
  commentId: Overload:Recore.Collections.Generic.MappedEqualityComparer`2.#ctor
  isSpec: "True"
  fullName: Recore.Collections.Generic.MappedEqualityComparer<T, U>.MappedEqualityComparer
  fullName.vb: Recore.Collections.Generic.MappedEqualityComparer(Of T, U).MappedEqualityComparer
  nameWithType: MappedEqualityComparer<T, U>.MappedEqualityComparer
  nameWithType.vb: MappedEqualityComparer(Of T, U).MappedEqualityComparer
- uid: Recore.Collections.Generic.MappedEqualityComparer`2.Equals(`0,`0)
  name: Equals(T, T)
  href: api/Recore.Collections.Generic.MappedEqualityComparer-2.html#Recore_Collections_Generic_MappedEqualityComparer_2_Equals__0__0_
  commentId: M:Recore.Collections.Generic.MappedEqualityComparer`2.Equals(`0,`0)
  fullName: Recore.Collections.Generic.MappedEqualityComparer<T, U>.Equals(T, T)
  fullName.vb: Recore.Collections.Generic.MappedEqualityComparer(Of T, U).Equals(T, T)
  nameWithType: MappedEqualityComparer<T, U>.Equals(T, T)
  nameWithType.vb: MappedEqualityComparer(Of T, U).Equals(T, T)
- uid: Recore.Collections.Generic.MappedEqualityComparer`2.Equals*
  name: Equals
  href: api/Recore.Collections.Generic.MappedEqualityComparer-2.html#Recore_Collections_Generic_MappedEqualityComparer_2_Equals_
  commentId: Overload:Recore.Collections.Generic.MappedEqualityComparer`2.Equals
  isSpec: "True"
  fullName: Recore.Collections.Generic.MappedEqualityComparer<T, U>.Equals
  fullName.vb: Recore.Collections.Generic.MappedEqualityComparer(Of T, U).Equals
  nameWithType: MappedEqualityComparer<T, U>.Equals
  nameWithType.vb: MappedEqualityComparer(Of T, U).Equals
- uid: Recore.Collections.Generic.MappedEqualityComparer`2.GetHashCode(`0)
  name: GetHashCode(T)
  href: api/Recore.Collections.Generic.MappedEqualityComparer-2.html#Recore_Collections_Generic_MappedEqualityComparer_2_GetHashCode__0_
  commentId: M:Recore.Collections.Generic.MappedEqualityComparer`2.GetHashCode(`0)
  fullName: Recore.Collections.Generic.MappedEqualityComparer<T, U>.GetHashCode(T)
  fullName.vb: Recore.Collections.Generic.MappedEqualityComparer(Of T, U).GetHashCode(T)
  nameWithType: MappedEqualityComparer<T, U>.GetHashCode(T)
  nameWithType.vb: MappedEqualityComparer(Of T, U).GetHashCode(T)
- uid: Recore.Collections.Generic.MappedEqualityComparer`2.GetHashCode*
  name: GetHashCode
  href: api/Recore.Collections.Generic.MappedEqualityComparer-2.html#Recore_Collections_Generic_MappedEqualityComparer_2_GetHashCode_
  commentId: Overload:Recore.Collections.Generic.MappedEqualityComparer`2.GetHashCode
  isSpec: "True"
  fullName: Recore.Collections.Generic.MappedEqualityComparer<T, U>.GetHashCode
  fullName.vb: Recore.Collections.Generic.MappedEqualityComparer(Of T, U).GetHashCode
  nameWithType: MappedEqualityComparer<T, U>.GetHashCode
  nameWithType.vb: MappedEqualityComparer(Of T, U).GetHashCode
- uid: Recore.Composer`2
  name: Composer<TValue, TResult>
  href: api/Recore.Composer-2.html
  commentId: T:Recore.Composer`2
  name.vb: Composer(Of TValue, TResult)
  fullName: Recore.Composer<TValue, TResult>
  fullName.vb: Recore.Composer(Of TValue, TResult)
  nameWithType: Composer<TValue, TResult>
  nameWithType.vb: Composer(Of TValue, TResult)
- uid: Recore.Composer`2.#ctor(Recore.Func{`0,`1})
  name: Composer(Func<TValue, TResult>)
  href: api/Recore.Composer-2.html#Recore_Composer_2__ctor_Recore_Func__0__1__
  commentId: M:Recore.Composer`2.#ctor(Recore.Func{`0,`1})
  name.vb: Composer(Func(Of TValue, TResult))
  fullName: Recore.Composer<TValue, TResult>.Composer(Recore.Func<TValue, TResult>)
  fullName.vb: Recore.Composer(Of TValue, TResult).Composer(Recore.Func(Of TValue, TResult))
  nameWithType: Composer<TValue, TResult>.Composer(Func<TValue, TResult>)
  nameWithType.vb: Composer(Of TValue, TResult).Composer(Func(Of TValue, TResult))
- uid: Recore.Composer`2.#ctor*
  name: Composer
  href: api/Recore.Composer-2.html#Recore_Composer_2__ctor_
  commentId: Overload:Recore.Composer`2.#ctor
  isSpec: "True"
  fullName: Recore.Composer<TValue, TResult>.Composer
  fullName.vb: Recore.Composer(Of TValue, TResult).Composer
  nameWithType: Composer<TValue, TResult>.Composer
  nameWithType.vb: Composer(Of TValue, TResult).Composer
- uid: Recore.Composer`2.Func
  name: Func
  href: api/Recore.Composer-2.html#Recore_Composer_2_Func
  commentId: P:Recore.Composer`2.Func
  fullName: Recore.Composer<TValue, TResult>.Func
  fullName.vb: Recore.Composer(Of TValue, TResult).Func
  nameWithType: Composer<TValue, TResult>.Func
  nameWithType.vb: Composer(Of TValue, TResult).Func
- uid: Recore.Composer`2.Func*
  name: Func
  href: api/Recore.Composer-2.html#Recore_Composer_2_Func_
  commentId: Overload:Recore.Composer`2.Func
  isSpec: "True"
  fullName: Recore.Composer<TValue, TResult>.Func
  fullName.vb: Recore.Composer(Of TValue, TResult).Func
  nameWithType: Composer<TValue, TResult>.Func
  nameWithType.vb: Composer(Of TValue, TResult).Func
- uid: Recore.Composer`2.Then(Action{`1})
  name: Then(Action<TResult>)
  href: api/Recore.Composer-2.html#Recore_Composer_2_Then_Action__1__
  commentId: M:Recore.Composer`2.Then(Action{`1})
  name.vb: Then(Action(Of TResult))
  fullName: Recore.Composer<TValue, TResult>.Then(Action<TResult>)
  fullName.vb: Recore.Composer(Of TValue, TResult).Then(Action(Of TResult))
  nameWithType: Composer<TValue, TResult>.Then(Action<TResult>)
  nameWithType.vb: Composer(Of TValue, TResult).Then(Action(Of TResult))
- uid: Recore.Composer`2.Then*
  name: Then
  href: api/Recore.Composer-2.html#Recore_Composer_2_Then_
  commentId: Overload:Recore.Composer`2.Then
  isSpec: "True"
  fullName: Recore.Composer<TValue, TResult>.Then
  fullName.vb: Recore.Composer(Of TValue, TResult).Then
  nameWithType: Composer<TValue, TResult>.Then
  nameWithType.vb: Composer(Of TValue, TResult).Then
- uid: Recore.Composer`2.Then``1(Recore.Func{`1,``0})
  name: Then<TNextResult>(Func<TResult, TNextResult>)
  href: api/Recore.Composer-2.html#Recore_Composer_2_Then__1_Recore_Func__1___0__
  commentId: M:Recore.Composer`2.Then``1(Recore.Func{`1,``0})
  name.vb: Then(Of TNextResult)(Func(Of TResult, TNextResult))
  fullName: Recore.Composer<TValue, TResult>.Then<TNextResult>(Recore.Func<TResult, TNextResult>)
  fullName.vb: Recore.Composer(Of TValue, TResult).Then(Of TNextResult)(Recore.Func(Of TResult, TNextResult))
  nameWithType: Composer<TValue, TResult>.Then<TNextResult>(Func<TResult, TNextResult>)
  nameWithType.vb: Composer(Of TValue, TResult).Then(Of TNextResult)(Func(Of TResult, TNextResult))
- uid: Recore.Defer
  name: Defer
  href: api/Recore.Defer.html
  commentId: T:Recore.Defer
  fullName: Recore.Defer
  nameWithType: Defer
- uid: Recore.Defer.#ctor(Action)
  name: Defer(Action)
  href: api/Recore.Defer.html#Recore_Defer__ctor_Action_
  commentId: M:Recore.Defer.#ctor(Action)
  fullName: Recore.Defer.Defer(Action)
  nameWithType: Defer.Defer(Action)
- uid: Recore.Defer.#ctor*
  name: Defer
  href: api/Recore.Defer.html#Recore_Defer__ctor_
  commentId: Overload:Recore.Defer.#ctor
  isSpec: "True"
  fullName: Recore.Defer.Defer
  nameWithType: Defer.Defer
- uid: Recore.Defer.Dispose
  name: Dispose()
  href: api/Recore.Defer.html#Recore_Defer_Dispose
  commentId: M:Recore.Defer.Dispose
  fullName: Recore.Defer.Dispose()
  nameWithType: Defer.Dispose()
- uid: Recore.Defer.Dispose*
  name: Dispose
  href: api/Recore.Defer.html#Recore_Defer_Dispose_
  commentId: Overload:Recore.Defer.Dispose
  isSpec: "True"
  fullName: Recore.Defer.Dispose
  nameWithType: Defer.Dispose
- uid: Recore.Either
  name: Either
  href: api/Recore.Either.html
  commentId: T:Recore.Either
  fullName: Recore.Either
  nameWithType: Either
- uid: Recore.Either.Lefts*
  name: Lefts
  href: api/Recore.Either.html#Recore_Either_Lefts_
  commentId: Overload:Recore.Either.Lefts
  isSpec: "True"
  fullName: Recore.Either.Lefts
  nameWithType: Either.Lefts
- uid: Recore.Either.Lefts``2(IEnumerable{Recore.Either{``0,``1}})
  name: Lefts<TLeft, TRight>(IEnumerable<Either<TLeft, TRight>>)
  href: api/Recore.Either.html#Recore_Either_Lefts__2_IEnumerable_Recore_Either___0___1___
  commentId: M:Recore.Either.Lefts``2(IEnumerable{Recore.Either{``0,``1}})
  name.vb: Lefts(Of TLeft, TRight)(IEnumerable(Of Either(Of TLeft, TRight)))
  fullName: Recore.Either.Lefts<TLeft, TRight>(IEnumerable<Recore.Either<TLeft, TRight>>)
  fullName.vb: Recore.Either.Lefts(Of TLeft, TRight)(IEnumerable(Of Recore.Either(Of TLeft, TRight)))
  nameWithType: Either.Lefts<TLeft, TRight>(IEnumerable<Either<TLeft, TRight>>)
  nameWithType.vb: Either.Lefts(Of TLeft, TRight)(IEnumerable(Of Either(Of TLeft, TRight)))
- uid: Recore.Either.Lift*
  name: Lift
  href: api/Recore.Either.html#Recore_Either_Lift_
  commentId: Overload:Recore.Either.Lift
  isSpec: "True"
  fullName: Recore.Either.Lift
  nameWithType: Either.Lift
- uid: Recore.Either.Lift``2(Action{``0},Action{``1})
  name: Lift<TLeft, TRight>(Action<TLeft>, Action<TRight>)
  href: api/Recore.Either.html#Recore_Either_Lift__2_Action___0__Action___1__
  commentId: M:Recore.Either.Lift``2(Action{``0},Action{``1})
  name.vb: Lift(Of TLeft, TRight)(Action(Of TLeft), Action(Of TRight))
  fullName: Recore.Either.Lift<TLeft, TRight>(Action<TLeft>, Action<TRight>)
  fullName.vb: Recore.Either.Lift(Of TLeft, TRight)(Action(Of TLeft), Action(Of TRight))
  nameWithType: Either.Lift<TLeft, TRight>(Action<TLeft>, Action<TRight>)
  nameWithType.vb: Either.Lift(Of TLeft, TRight)(Action(Of TLeft), Action(Of TRight))
- uid: Recore.Either.Lift``3(Recore.Func{``0,``2},Recore.Func{``1,``2})
  name: Lift<TLeft, TRight, TResult>(Func<TLeft, TResult>, Func<TRight, TResult>)
  href: api/Recore.Either.html#Recore_Either_Lift__3_Recore_Func___0___2__Recore_Func___1___2__
  commentId: M:Recore.Either.Lift``3(Recore.Func{``0,``2},Recore.Func{``1,``2})
  name.vb: Lift(Of TLeft, TRight, TResult)(Func(Of TLeft, TResult), Func(Of TRight, TResult))
  fullName: Recore.Either.Lift<TLeft, TRight, TResult>(Recore.Func<TLeft, TResult>, Recore.Func<TRight, TResult>)
  fullName.vb: Recore.Either.Lift(Of TLeft, TRight, TResult)(Recore.Func(Of TLeft, TResult), Recore.Func(Of TRight, TResult))
  nameWithType: Either.Lift<TLeft, TRight, TResult>(Func<TLeft, TResult>, Func<TRight, TResult>)
  nameWithType.vb: Either.Lift(Of TLeft, TRight, TResult)(Func(Of TLeft, TResult), Func(Of TRight, TResult))
- uid: Recore.Either.Rights*
  name: Rights
  href: api/Recore.Either.html#Recore_Either_Rights_
  commentId: Overload:Recore.Either.Rights
  isSpec: "True"
  fullName: Recore.Either.Rights
  nameWithType: Either.Rights
- uid: Recore.Either.Rights``2(IEnumerable{Recore.Either{``0,``1}})
  name: Rights<TLeft, TRight>(IEnumerable<Either<TLeft, TRight>>)
  href: api/Recore.Either.html#Recore_Either_Rights__2_IEnumerable_Recore_Either___0___1___
  commentId: M:Recore.Either.Rights``2(IEnumerable{Recore.Either{``0,``1}})
  name.vb: Rights(Of TLeft, TRight)(IEnumerable(Of Either(Of TLeft, TRight)))
  fullName: Recore.Either.Rights<TLeft, TRight>(IEnumerable<Recore.Either<TLeft, TRight>>)
  fullName.vb: Recore.Either.Rights(Of TLeft, TRight)(IEnumerable(Of Recore.Either(Of TLeft, TRight)))
  nameWithType: Either.Rights<TLeft, TRight>(IEnumerable<Either<TLeft, TRight>>)
  nameWithType.vb: Either.Rights(Of TLeft, TRight)(IEnumerable(Of Either(Of TLeft, TRight)))
- uid: Recore.Either`2
  name: Either<TLeft, TRight>
  href: api/Recore.Either-2.html
  commentId: T:Recore.Either`2
  name.vb: Either(Of TLeft, TRight)
  fullName: Recore.Either<TLeft, TRight>
  fullName.vb: Recore.Either(Of TLeft, TRight)
  nameWithType: Either<TLeft, TRight>
  nameWithType.vb: Either(Of TLeft, TRight)
- uid: Recore.Either`2.#ctor(`0)
  name: Either(TLeft)
  href: api/Recore.Either-2.html#Recore_Either_2__ctor__0_
  commentId: M:Recore.Either`2.#ctor(`0)
  fullName: Recore.Either<TLeft, TRight>.Either(TLeft)
  fullName.vb: Recore.Either(Of TLeft, TRight).Either(TLeft)
  nameWithType: Either<TLeft, TRight>.Either(TLeft)
  nameWithType.vb: Either(Of TLeft, TRight).Either(TLeft)
- uid: Recore.Either`2.#ctor(`1)
  name: Either(TRight)
  href: api/Recore.Either-2.html#Recore_Either_2__ctor__1_
  commentId: M:Recore.Either`2.#ctor(`1)
  fullName: Recore.Either<TLeft, TRight>.Either(TRight)
  fullName.vb: Recore.Either(Of TLeft, TRight).Either(TRight)
  nameWithType: Either<TLeft, TRight>.Either(TRight)
  nameWithType.vb: Either(Of TLeft, TRight).Either(TRight)
- uid: Recore.Either`2.#ctor*
  name: Either
  href: api/Recore.Either-2.html#Recore_Either_2__ctor_
  commentId: Overload:Recore.Either`2.#ctor
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.Either
  fullName.vb: Recore.Either(Of TLeft, TRight).Either
  nameWithType: Either<TLeft, TRight>.Either
  nameWithType.vb: Either(Of TLeft, TRight).Either
- uid: Recore.Either`2.Equals(Recore.Either{`0,`1})
  name: Equals(Either<TLeft, TRight>)
  href: api/Recore.Either-2.html#Recore_Either_2_Equals_Recore_Either__0__1__
  commentId: M:Recore.Either`2.Equals(Recore.Either{`0,`1})
  name.vb: Equals(Either(Of TLeft, TRight))
  fullName: Recore.Either<TLeft, TRight>.Equals(Recore.Either<TLeft, TRight>)
  fullName.vb: Recore.Either(Of TLeft, TRight).Equals(Recore.Either(Of TLeft, TRight))
  nameWithType: Either<TLeft, TRight>.Equals(Either<TLeft, TRight>)
  nameWithType.vb: Either(Of TLeft, TRight).Equals(Either(Of TLeft, TRight))
- uid: Recore.Either`2.Equals(System.Object)
  name: Equals(Object)
  href: api/Recore.Either-2.html#Recore_Either_2_Equals_System_Object_
  commentId: M:Recore.Either`2.Equals(System.Object)
  fullName: Recore.Either<TLeft, TRight>.Equals(System.Object)
  fullName.vb: Recore.Either(Of TLeft, TRight).Equals(System.Object)
  nameWithType: Either<TLeft, TRight>.Equals(Object)
  nameWithType.vb: Either(Of TLeft, TRight).Equals(Object)
- uid: Recore.Either`2.Equals*
  name: Equals
  href: api/Recore.Either-2.html#Recore_Either_2_Equals_
  commentId: Overload:Recore.Either`2.Equals
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.Equals
  fullName.vb: Recore.Either(Of TLeft, TRight).Equals
  nameWithType: Either<TLeft, TRight>.Equals
  nameWithType.vb: Either(Of TLeft, TRight).Equals
- uid: Recore.Either`2.GetHashCode
  name: GetHashCode()
  href: api/Recore.Either-2.html#Recore_Either_2_GetHashCode
  commentId: M:Recore.Either`2.GetHashCode
  fullName: Recore.Either<TLeft, TRight>.GetHashCode()
  fullName.vb: Recore.Either(Of TLeft, TRight).GetHashCode()
  nameWithType: Either<TLeft, TRight>.GetHashCode()
  nameWithType.vb: Either(Of TLeft, TRight).GetHashCode()
- uid: Recore.Either`2.GetHashCode*
  name: GetHashCode
  href: api/Recore.Either-2.html#Recore_Either_2_GetHashCode_
  commentId: Overload:Recore.Either`2.GetHashCode
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.GetHashCode
  fullName.vb: Recore.Either(Of TLeft, TRight).GetHashCode
  nameWithType: Either<TLeft, TRight>.GetHashCode
  nameWithType.vb: Either(Of TLeft, TRight).GetHashCode
- uid: Recore.Either`2.GetLeft
  name: GetLeft()
  href: api/Recore.Either-2.html#Recore_Either_2_GetLeft
  commentId: M:Recore.Either`2.GetLeft
  fullName: Recore.Either<TLeft, TRight>.GetLeft()
  fullName.vb: Recore.Either(Of TLeft, TRight).GetLeft()
  nameWithType: Either<TLeft, TRight>.GetLeft()
  nameWithType.vb: Either(Of TLeft, TRight).GetLeft()
- uid: Recore.Either`2.GetLeft*
  name: GetLeft
  href: api/Recore.Either-2.html#Recore_Either_2_GetLeft_
  commentId: Overload:Recore.Either`2.GetLeft
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.GetLeft
  fullName.vb: Recore.Either(Of TLeft, TRight).GetLeft
  nameWithType: Either<TLeft, TRight>.GetLeft
  nameWithType.vb: Either(Of TLeft, TRight).GetLeft
- uid: Recore.Either`2.GetRight
  name: GetRight()
  href: api/Recore.Either-2.html#Recore_Either_2_GetRight
  commentId: M:Recore.Either`2.GetRight
  fullName: Recore.Either<TLeft, TRight>.GetRight()
  fullName.vb: Recore.Either(Of TLeft, TRight).GetRight()
  nameWithType: Either<TLeft, TRight>.GetRight()
  nameWithType.vb: Either(Of TLeft, TRight).GetRight()
- uid: Recore.Either`2.GetRight*
  name: GetRight
  href: api/Recore.Either-2.html#Recore_Either_2_GetRight_
  commentId: Overload:Recore.Either`2.GetRight
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.GetRight
  fullName.vb: Recore.Either(Of TLeft, TRight).GetRight
  nameWithType: Either<TLeft, TRight>.GetRight
  nameWithType.vb: Either(Of TLeft, TRight).GetRight
- uid: Recore.Either`2.IfLeft(Action{`0})
  name: IfLeft(Action<TLeft>)
  href: api/Recore.Either-2.html#Recore_Either_2_IfLeft_Action__0__
  commentId: M:Recore.Either`2.IfLeft(Action{`0})
  name.vb: IfLeft(Action(Of TLeft))
  fullName: Recore.Either<TLeft, TRight>.IfLeft(Action<TLeft>)
  fullName.vb: Recore.Either(Of TLeft, TRight).IfLeft(Action(Of TLeft))
  nameWithType: Either<TLeft, TRight>.IfLeft(Action<TLeft>)
  nameWithType.vb: Either(Of TLeft, TRight).IfLeft(Action(Of TLeft))
- uid: Recore.Either`2.IfLeft*
  name: IfLeft
  href: api/Recore.Either-2.html#Recore_Either_2_IfLeft_
  commentId: Overload:Recore.Either`2.IfLeft
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.IfLeft
  fullName.vb: Recore.Either(Of TLeft, TRight).IfLeft
  nameWithType: Either<TLeft, TRight>.IfLeft
  nameWithType.vb: Either(Of TLeft, TRight).IfLeft
- uid: Recore.Either`2.IfRight(Action{`1})
  name: IfRight(Action<TRight>)
  href: api/Recore.Either-2.html#Recore_Either_2_IfRight_Action__1__
  commentId: M:Recore.Either`2.IfRight(Action{`1})
  name.vb: IfRight(Action(Of TRight))
  fullName: Recore.Either<TLeft, TRight>.IfRight(Action<TRight>)
  fullName.vb: Recore.Either(Of TLeft, TRight).IfRight(Action(Of TRight))
  nameWithType: Either<TLeft, TRight>.IfRight(Action<TRight>)
  nameWithType.vb: Either(Of TLeft, TRight).IfRight(Action(Of TRight))
- uid: Recore.Either`2.IfRight*
  name: IfRight
  href: api/Recore.Either-2.html#Recore_Either_2_IfRight_
  commentId: Overload:Recore.Either`2.IfRight
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.IfRight
  fullName.vb: Recore.Either(Of TLeft, TRight).IfRight
  nameWithType: Either<TLeft, TRight>.IfRight
  nameWithType.vb: Either(Of TLeft, TRight).IfRight
- uid: Recore.Either`2.IsLeft
  name: IsLeft
  href: api/Recore.Either-2.html#Recore_Either_2_IsLeft
  commentId: P:Recore.Either`2.IsLeft
  fullName: Recore.Either<TLeft, TRight>.IsLeft
  fullName.vb: Recore.Either(Of TLeft, TRight).IsLeft
  nameWithType: Either<TLeft, TRight>.IsLeft
  nameWithType.vb: Either(Of TLeft, TRight).IsLeft
- uid: Recore.Either`2.IsLeft*
  name: IsLeft
  href: api/Recore.Either-2.html#Recore_Either_2_IsLeft_
  commentId: Overload:Recore.Either`2.IsLeft
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.IsLeft
  fullName.vb: Recore.Either(Of TLeft, TRight).IsLeft
  nameWithType: Either<TLeft, TRight>.IsLeft
  nameWithType.vb: Either(Of TLeft, TRight).IsLeft
- uid: Recore.Either`2.IsRight
  name: IsRight
  href: api/Recore.Either-2.html#Recore_Either_2_IsRight
  commentId: P:Recore.Either`2.IsRight
  fullName: Recore.Either<TLeft, TRight>.IsRight
  fullName.vb: Recore.Either(Of TLeft, TRight).IsRight
  nameWithType: Either<TLeft, TRight>.IsRight
  nameWithType.vb: Either(Of TLeft, TRight).IsRight
- uid: Recore.Either`2.IsRight*
  name: IsRight
  href: api/Recore.Either-2.html#Recore_Either_2_IsRight_
  commentId: Overload:Recore.Either`2.IsRight
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.IsRight
  fullName.vb: Recore.Either(Of TLeft, TRight).IsRight
  nameWithType: Either<TLeft, TRight>.IsRight
  nameWithType.vb: Either(Of TLeft, TRight).IsRight
- uid: Recore.Either`2.OnLeft*
  name: OnLeft
  href: api/Recore.Either-2.html#Recore_Either_2_OnLeft_
  commentId: Overload:Recore.Either`2.OnLeft
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.OnLeft
  fullName.vb: Recore.Either(Of TLeft, TRight).OnLeft
  nameWithType: Either<TLeft, TRight>.OnLeft
  nameWithType.vb: Either(Of TLeft, TRight).OnLeft
- uid: Recore.Either`2.OnLeft``1(Recore.Func{`0,``0})
  name: OnLeft<TResult>(Func<TLeft, TResult>)
  href: api/Recore.Either-2.html#Recore_Either_2_OnLeft__1_Recore_Func__0___0__
  commentId: M:Recore.Either`2.OnLeft``1(Recore.Func{`0,``0})
  name.vb: OnLeft(Of TResult)(Func(Of TLeft, TResult))
  fullName: Recore.Either<TLeft, TRight>.OnLeft<TResult>(Recore.Func<TLeft, TResult>)
  fullName.vb: Recore.Either(Of TLeft, TRight).OnLeft(Of TResult)(Recore.Func(Of TLeft, TResult))
  nameWithType: Either<TLeft, TRight>.OnLeft<TResult>(Func<TLeft, TResult>)
  nameWithType.vb: Either(Of TLeft, TRight).OnLeft(Of TResult)(Func(Of TLeft, TResult))
- uid: Recore.Either`2.OnRight*
  name: OnRight
  href: api/Recore.Either-2.html#Recore_Either_2_OnRight_
  commentId: Overload:Recore.Either`2.OnRight
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.OnRight
  fullName.vb: Recore.Either(Of TLeft, TRight).OnRight
  nameWithType: Either<TLeft, TRight>.OnRight
  nameWithType.vb: Either(Of TLeft, TRight).OnRight
- uid: Recore.Either`2.OnRight``1(Recore.Func{`1,``0})
  name: OnRight<TResult>(Func<TRight, TResult>)
  href: api/Recore.Either-2.html#Recore_Either_2_OnRight__1_Recore_Func__1___0__
  commentId: M:Recore.Either`2.OnRight``1(Recore.Func{`1,``0})
  name.vb: OnRight(Of TResult)(Func(Of TRight, TResult))
  fullName: Recore.Either<TLeft, TRight>.OnRight<TResult>(Recore.Func<TRight, TResult>)
  fullName.vb: Recore.Either(Of TLeft, TRight).OnRight(Of TResult)(Recore.Func(Of TRight, TResult))
  nameWithType: Either<TLeft, TRight>.OnRight<TResult>(Func<TRight, TResult>)
  nameWithType.vb: Either(Of TLeft, TRight).OnRight(Of TResult)(Func(Of TRight, TResult))
- uid: Recore.Either`2.op_Equality(Recore.Either{`0,`1},Recore.Either{`0,`1})
  name: Equality(Either<TLeft, TRight>, Either<TLeft, TRight>)
  href: api/Recore.Either-2.html#Recore_Either_2_op_Equality_Recore_Either__0__1__Recore_Either__0__1__
  commentId: M:Recore.Either`2.op_Equality(Recore.Either{`0,`1},Recore.Either{`0,`1})
  name.vb: Equality(Either(Of TLeft, TRight), Either(Of TLeft, TRight))
  fullName: Recore.Either<TLeft, TRight>.Equality(Recore.Either<TLeft, TRight>, Recore.Either<TLeft, TRight>)
  fullName.vb: Recore.Either(Of TLeft, TRight).Equality(Recore.Either(Of TLeft, TRight), Recore.Either(Of TLeft, TRight))
  nameWithType: Either<TLeft, TRight>.Equality(Either<TLeft, TRight>, Either<TLeft, TRight>)
  nameWithType.vb: Either(Of TLeft, TRight).Equality(Either(Of TLeft, TRight), Either(Of TLeft, TRight))
- uid: Recore.Either`2.op_Equality*
  name: Equality
  href: api/Recore.Either-2.html#Recore_Either_2_op_Equality_
  commentId: Overload:Recore.Either`2.op_Equality
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.Equality
  fullName.vb: Recore.Either(Of TLeft, TRight).Equality
  nameWithType: Either<TLeft, TRight>.Equality
  nameWithType.vb: Either(Of TLeft, TRight).Equality
- uid: Recore.Either`2.op_Implicit(`0)~Recore.Either{`0,`1}
  name: Implicit(TLeft to Either<TLeft, TRight>)
  href: api/Recore.Either-2.html#Recore_Either_2_op_Implicit__0__Recore_Either__0__1_
  commentId: M:Recore.Either`2.op_Implicit(`0)~Recore.Either{`0,`1}
  name.vb: Widening(TLeft to Either(Of TLeft, TRight))
  fullName: Recore.Either<TLeft, TRight>.Implicit(TLeft to Recore.Either<TLeft, TRight>)
  fullName.vb: Recore.Either(Of TLeft, TRight).Widening(TLeft to Recore.Either(Of TLeft, TRight))
  nameWithType: Either<TLeft, TRight>.Implicit(TLeft to Either<TLeft, TRight>)
  nameWithType.vb: Either(Of TLeft, TRight).Widening(TLeft to Either(Of TLeft, TRight))
- uid: Recore.Either`2.op_Implicit(`1)~Recore.Either{`0,`1}
  name: Implicit(TRight to Either<TLeft, TRight>)
  href: api/Recore.Either-2.html#Recore_Either_2_op_Implicit__1__Recore_Either__0__1_
  commentId: M:Recore.Either`2.op_Implicit(`1)~Recore.Either{`0,`1}
  name.vb: Widening(TRight to Either(Of TLeft, TRight))
  fullName: Recore.Either<TLeft, TRight>.Implicit(TRight to Recore.Either<TLeft, TRight>)
  fullName.vb: Recore.Either(Of TLeft, TRight).Widening(TRight to Recore.Either(Of TLeft, TRight))
  nameWithType: Either<TLeft, TRight>.Implicit(TRight to Either<TLeft, TRight>)
  nameWithType.vb: Either(Of TLeft, TRight).Widening(TRight to Either(Of TLeft, TRight))
- uid: Recore.Either`2.op_Implicit*
  name: Implicit
  href: api/Recore.Either-2.html#Recore_Either_2_op_Implicit_
  commentId: Overload:Recore.Either`2.op_Implicit
  isSpec: "True"
  name.vb: Widening
  fullName: Recore.Either<TLeft, TRight>.Implicit
  fullName.vb: Recore.Either(Of TLeft, TRight).Widening
  nameWithType: Either<TLeft, TRight>.Implicit
  nameWithType.vb: Either(Of TLeft, TRight).Widening
- uid: Recore.Either`2.op_Inequality(Recore.Either{`0,`1},Recore.Either{`0,`1})
  name: Inequality(Either<TLeft, TRight>, Either<TLeft, TRight>)
  href: api/Recore.Either-2.html#Recore_Either_2_op_Inequality_Recore_Either__0__1__Recore_Either__0__1__
  commentId: M:Recore.Either`2.op_Inequality(Recore.Either{`0,`1},Recore.Either{`0,`1})
  name.vb: Inequality(Either(Of TLeft, TRight), Either(Of TLeft, TRight))
  fullName: Recore.Either<TLeft, TRight>.Inequality(Recore.Either<TLeft, TRight>, Recore.Either<TLeft, TRight>)
  fullName.vb: Recore.Either(Of TLeft, TRight).Inequality(Recore.Either(Of TLeft, TRight), Recore.Either(Of TLeft, TRight))
  nameWithType: Either<TLeft, TRight>.Inequality(Either<TLeft, TRight>, Either<TLeft, TRight>)
  nameWithType.vb: Either(Of TLeft, TRight).Inequality(Either(Of TLeft, TRight), Either(Of TLeft, TRight))
- uid: Recore.Either`2.op_Inequality*
  name: Inequality
  href: api/Recore.Either-2.html#Recore_Either_2_op_Inequality_
  commentId: Overload:Recore.Either`2.op_Inequality
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.Inequality
  fullName.vb: Recore.Either(Of TLeft, TRight).Inequality
  nameWithType: Either<TLeft, TRight>.Inequality
  nameWithType.vb: Either(Of TLeft, TRight).Inequality
- uid: Recore.Either`2.Swap
  name: Swap()
  href: api/Recore.Either-2.html#Recore_Either_2_Swap
  commentId: M:Recore.Either`2.Swap
  fullName: Recore.Either<TLeft, TRight>.Swap()
  fullName.vb: Recore.Either(Of TLeft, TRight).Swap()
  nameWithType: Either<TLeft, TRight>.Swap()
  nameWithType.vb: Either(Of TLeft, TRight).Swap()
- uid: Recore.Either`2.Swap*
  name: Swap
  href: api/Recore.Either-2.html#Recore_Either_2_Swap_
  commentId: Overload:Recore.Either`2.Swap
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.Swap
  fullName.vb: Recore.Either(Of TLeft, TRight).Swap
  nameWithType: Either<TLeft, TRight>.Swap
  nameWithType.vb: Either(Of TLeft, TRight).Swap
- uid: Recore.Either`2.Switch(Action{`0},Action{`1})
  name: Switch(Action<TLeft>, Action<TRight>)
  href: api/Recore.Either-2.html#Recore_Either_2_Switch_Action__0__Action__1__
  commentId: M:Recore.Either`2.Switch(Action{`0},Action{`1})
  name.vb: Switch(Action(Of TLeft), Action(Of TRight))
  fullName: Recore.Either<TLeft, TRight>.Switch(Action<TLeft>, Action<TRight>)
  fullName.vb: Recore.Either(Of TLeft, TRight).Switch(Action(Of TLeft), Action(Of TRight))
  nameWithType: Either<TLeft, TRight>.Switch(Action<TLeft>, Action<TRight>)
  nameWithType.vb: Either(Of TLeft, TRight).Switch(Action(Of TLeft), Action(Of TRight))
- uid: Recore.Either`2.Switch*
  name: Switch
  href: api/Recore.Either-2.html#Recore_Either_2_Switch_
  commentId: Overload:Recore.Either`2.Switch
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.Switch
  fullName.vb: Recore.Either(Of TLeft, TRight).Switch
  nameWithType: Either<TLeft, TRight>.Switch
  nameWithType.vb: Either(Of TLeft, TRight).Switch
- uid: Recore.Either`2.Switch``1(Recore.Func{`0,``0},Recore.Func{`1,``0})
  name: Switch<T>(Func<TLeft, T>, Func<TRight, T>)
  href: api/Recore.Either-2.html#Recore_Either_2_Switch__1_Recore_Func__0___0__Recore_Func__1___0__
  commentId: M:Recore.Either`2.Switch``1(Recore.Func{`0,``0},Recore.Func{`1,``0})
  name.vb: Switch(Of T)(Func(Of TLeft, T), Func(Of TRight, T))
  fullName: Recore.Either<TLeft, TRight>.Switch<T>(Recore.Func<TLeft, T>, Recore.Func<TRight, T>)
  fullName.vb: Recore.Either(Of TLeft, TRight).Switch(Of T)(Recore.Func(Of TLeft, T), Recore.Func(Of TRight, T))
  nameWithType: Either<TLeft, TRight>.Switch<T>(Func<TLeft, T>, Func<TRight, T>)
  nameWithType.vb: Either(Of TLeft, TRight).Switch(Of T)(Func(Of TLeft, T), Func(Of TRight, T))
- uid: Recore.Either`2.ToString
  name: ToString()
  href: api/Recore.Either-2.html#Recore_Either_2_ToString
  commentId: M:Recore.Either`2.ToString
  fullName: Recore.Either<TLeft, TRight>.ToString()
  fullName.vb: Recore.Either(Of TLeft, TRight).ToString()
  nameWithType: Either<TLeft, TRight>.ToString()
  nameWithType.vb: Either(Of TLeft, TRight).ToString()
- uid: Recore.Either`2.ToString*
  name: ToString
  href: api/Recore.Either-2.html#Recore_Either_2_ToString_
  commentId: Overload:Recore.Either`2.ToString
  isSpec: "True"
  fullName: Recore.Either<TLeft, TRight>.ToString
  fullName.vb: Recore.Either(Of TLeft, TRight).ToString
  nameWithType: Either<TLeft, TRight>.ToString
  nameWithType.vb: Either(Of TLeft, TRight).ToString
- uid: Recore.Func
  name: Func
  href: api/Recore.Func.html
  commentId: T:Recore.Func
  fullName: Recore.Func
  nameWithType: Func
- uid: Recore.Func.Fluent*
  name: Fluent
  href: api/Recore.Func.html#Recore_Func_Fluent_
  commentId: Overload:Recore.Func.Fluent
  isSpec: "True"
  fullName: Recore.Func.Fluent
  nameWithType: Func.Fluent
- uid: Recore.Func.Fluent``1(Action{``0})
  name: Fluent<T>(Action<T>)
  href: api/Recore.Func.html#Recore_Func_Fluent__1_Action___0__
  commentId: M:Recore.Func.Fluent``1(Action{``0})
  name.vb: Fluent(Of T)(Action(Of T))
  fullName: Recore.Func.Fluent<T>(Action<T>)
  fullName.vb: Recore.Func.Fluent(Of T)(Action(Of T))
  nameWithType: Func.Fluent<T>(Action<T>)
  nameWithType.vb: Func.Fluent(Of T)(Action(Of T))
- uid: Recore.Func.Invoke*
  name: Invoke
  href: api/Recore.Func.html#Recore_Func_Invoke_
  commentId: Overload:Recore.Func.Invoke
  isSpec: "True"
  fullName: Recore.Func.Invoke
  nameWithType: Func.Invoke
- uid: Recore.Func.Invoke``1(Recore.Func{``0})
  name: Invoke<T>(Func<T>)
  href: api/Recore.Func.html#Recore_Func_Invoke__1_Recore_Func___0__
  commentId: M:Recore.Func.Invoke``1(Recore.Func{``0})
  name.vb: Invoke(Of T)(Func(Of T))
  fullName: Recore.Func.Invoke<T>(Recore.Func<T>)
  fullName.vb: Recore.Func.Invoke(Of T)(Recore.Func(Of T))
  nameWithType: Func.Invoke<T>(Func<T>)
  nameWithType.vb: Func.Invoke(Of T)(Func(Of T))
- uid: Recore.Func.Memoize*
  name: Memoize
  href: api/Recore.Func.html#Recore_Func_Memoize_
  commentId: Overload:Recore.Func.Memoize
  isSpec: "True"
  fullName: Recore.Func.Memoize
  nameWithType: Func.Memoize
- uid: Recore.Func.Memoize``2(Recore.Func{``0,``1})
  name: Memoize<TSource, TResult>(Func<TSource, TResult>)
  href: api/Recore.Func.html#Recore_Func_Memoize__2_Recore_Func___0___1__
  commentId: M:Recore.Func.Memoize``2(Recore.Func{``0,``1})
  name.vb: Memoize(Of TSource, TResult)(Func(Of TSource, TResult))
  fullName: Recore.Func.Memoize<TSource, TResult>(Recore.Func<TSource, TResult>)
  fullName.vb: Recore.Func.Memoize(Of TSource, TResult)(Recore.Func(Of TSource, TResult))
  nameWithType: Func.Memoize<TSource, TResult>(Func<TSource, TResult>)
  nameWithType.vb: Func.Memoize(Of TSource, TResult)(Func(Of TSource, TResult))
- uid: Recore.Func.Memoize``2(Recore.Func{``0,``1},IEqualityComparer{``0})
  name: Memoize<TSource, TResult>(Func<TSource, TResult>, IEqualityComparer<TSource>)
  href: api/Recore.Func.html#Recore_Func_Memoize__2_Recore_Func___0___1__IEqualityComparer___0__
  commentId: M:Recore.Func.Memoize``2(Recore.Func{``0,``1},IEqualityComparer{``0})
  name.vb: Memoize(Of TSource, TResult)(Func(Of TSource, TResult), IEqualityComparer(Of TSource))
  fullName: Recore.Func.Memoize<TSource, TResult>(Recore.Func<TSource, TResult>, IEqualityComparer<TSource>)
  fullName.vb: Recore.Func.Memoize(Of TSource, TResult)(Recore.Func(Of TSource, TResult), IEqualityComparer(Of TSource))
  nameWithType: Func.Memoize<TSource, TResult>(Func<TSource, TResult>, IEqualityComparer<TSource>)
  nameWithType.vb: Func.Memoize(Of TSource, TResult)(Func(Of TSource, TResult), IEqualityComparer(Of TSource))
- uid: Recore.Func.TupleArgs*
  name: TupleArgs
  href: api/Recore.Func.html#Recore_Func_TupleArgs_
  commentId: Overload:Recore.Func.TupleArgs
  isSpec: "True"
  fullName: Recore.Func.TupleArgs
  nameWithType: Func.TupleArgs
- uid: Recore.Func.TupleArgs``3(Recore.Func{``0,``1,``2})
  name: TupleArgs<T1, T2, TResult>(Func<T1, T2, TResult>)
  href: api/Recore.Func.html#Recore_Func_TupleArgs__3_Recore_Func___0___1___2__
  commentId: M:Recore.Func.TupleArgs``3(Recore.Func{``0,``1,``2})
  name.vb: TupleArgs(Of T1, T2, TResult)(Func(Of T1, T2, TResult))
  fullName: Recore.Func.TupleArgs<T1, T2, TResult>(Recore.Func<T1, T2, TResult>)
  fullName.vb: Recore.Func.TupleArgs(Of T1, T2, TResult)(Recore.Func(Of T1, T2, TResult))
  nameWithType: Func.TupleArgs<T1, T2, TResult>(Func<T1, T2, TResult>)
  nameWithType.vb: Func.TupleArgs(Of T1, T2, TResult)(Func(Of T1, T2, TResult))
- uid: Recore.Func.TupleArgs``4(Recore.Func{``0,``1,``2,``3})
  name: TupleArgs<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>)
  href: api/Recore.Func.html#Recore_Func_TupleArgs__4_Recore_Func___0___1___2___3__
  commentId: M:Recore.Func.TupleArgs``4(Recore.Func{``0,``1,``2,``3})
  name.vb: TupleArgs(Of T1, T2, T3, TResult)(Func(Of T1, T2, T3, TResult))
  fullName: Recore.Func.TupleArgs<T1, T2, T3, TResult>(Recore.Func<T1, T2, T3, TResult>)
  fullName.vb: Recore.Func.TupleArgs(Of T1, T2, T3, TResult)(Recore.Func(Of T1, T2, T3, TResult))
  nameWithType: Func.TupleArgs<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>)
  nameWithType.vb: Func.TupleArgs(Of T1, T2, T3, TResult)(Func(Of T1, T2, T3, TResult))
- uid: Recore.Func.TupleArgs``5(Recore.Func{``0,``1,``2,``3,``4})
  name: TupleArgs<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>)
  href: api/Recore.Func.html#Recore_Func_TupleArgs__5_Recore_Func___0___1___2___3___4__
  commentId: M:Recore.Func.TupleArgs``5(Recore.Func{``0,``1,``2,``3,``4})
  name.vb: TupleArgs(Of T1, T2, T3, T4, TResult)(Func(Of T1, T2, T3, T4, TResult))
  fullName: Recore.Func.TupleArgs<T1, T2, T3, T4, TResult>(Recore.Func<T1, T2, T3, T4, TResult>)
  fullName.vb: Recore.Func.TupleArgs(Of T1, T2, T3, T4, TResult)(Recore.Func(Of T1, T2, T3, T4, TResult))
  nameWithType: Func.TupleArgs<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>)
  nameWithType.vb: Func.TupleArgs(Of T1, T2, T3, T4, TResult)(Func(Of T1, T2, T3, T4, TResult))
- uid: Recore.Func.TupleArgs``6(Recore.Func{``0,``1,``2,``3,``4,``5})
  name: TupleArgs<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>)
  href: api/Recore.Func.html#Recore_Func_TupleArgs__6_Recore_Func___0___1___2___3___4___5__
  commentId: M:Recore.Func.TupleArgs``6(Recore.Func{``0,``1,``2,``3,``4,``5})
  name.vb: TupleArgs(Of T1, T2, T3, T4, T5, TResult)(Func(Of T1, T2, T3, T4, T5, TResult))
  fullName: Recore.Func.TupleArgs<T1, T2, T3, T4, T5, TResult>(Recore.Func<T1, T2, T3, T4, T5, TResult>)
  fullName.vb: Recore.Func.TupleArgs(Of T1, T2, T3, T4, T5, TResult)(Recore.Func(Of T1, T2, T3, T4, T5, TResult))
  nameWithType: Func.TupleArgs<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>)
  nameWithType.vb: Func.TupleArgs(Of T1, T2, T3, T4, T5, TResult)(Func(Of T1, T2, T3, T4, T5, TResult))
- uid: Recore.Func.TupleArgs``7(Recore.Func{``0,``1,``2,``3,``4,``5,``6})
  name: TupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>)
  href: api/Recore.Func.html#Recore_Func_TupleArgs__7_Recore_Func___0___1___2___3___4___5___6__
  commentId: M:Recore.Func.TupleArgs``7(Recore.Func{``0,``1,``2,``3,``4,``5,``6})
  name.vb: TupleArgs(Of T1, T2, T3, T4, T5, T6, TResult)(Func(Of T1, T2, T3, T4, T5, T6, TResult))
  fullName: Recore.Func.TupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Recore.Func<T1, T2, T3, T4, T5, T6, TResult>)
  fullName.vb: Recore.Func.TupleArgs(Of T1, T2, T3, T4, T5, T6, TResult)(Recore.Func(Of T1, T2, T3, T4, T5, T6, TResult))
  nameWithType: Func.TupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>)
  nameWithType.vb: Func.TupleArgs(Of T1, T2, T3, T4, T5, T6, TResult)(Func(Of T1, T2, T3, T4, T5, T6, TResult))
- uid: Recore.Func.TupleArgs``8(Recore.Func{``0,``1,``2,``3,``4,``5,``6,``7})
  name: TupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>)
  href: api/Recore.Func.html#Recore_Func_TupleArgs__8_Recore_Func___0___1___2___3___4___5___6___7__
  commentId: M:Recore.Func.TupleArgs``8(Recore.Func{``0,``1,``2,``3,``4,``5,``6,``7})
  name.vb: TupleArgs(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  fullName: Recore.Func.TupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Recore.Func<T1, T2, T3, T4, T5, T6, T7, TResult>)
  fullName.vb: Recore.Func.TupleArgs(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Recore.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  nameWithType: Func.TupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>)
  nameWithType.vb: Func.TupleArgs(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
- uid: Recore.Func.UntupleArgs*
  name: UntupleArgs
  href: api/Recore.Func.html#Recore_Func_UntupleArgs_
  commentId: Overload:Recore.Func.UntupleArgs
  isSpec: "True"
  fullName: Recore.Func.UntupleArgs
  nameWithType: Func.UntupleArgs
- uid: Recore.Func.UntupleArgs``3(Recore.Func{Tuple{``0,``1},``2})
  name: UntupleArgs<T1, T2, TResult>(Func<Tuple<T1, T2>, TResult>)
  href: api/Recore.Func.html#Recore_Func_UntupleArgs__3_Recore_Func_Tuple___0___1____2__
  commentId: M:Recore.Func.UntupleArgs``3(Recore.Func{Tuple{``0,``1},``2})
  name.vb: UntupleArgs(Of T1, T2, TResult)(Func(Of Tuple(Of T1, T2), TResult))
  fullName: Recore.Func.UntupleArgs<T1, T2, TResult>(Recore.Func<Tuple<T1, T2>, TResult>)
  fullName.vb: Recore.Func.UntupleArgs(Of T1, T2, TResult)(Recore.Func(Of Tuple(Of T1, T2), TResult))
  nameWithType: Func.UntupleArgs<T1, T2, TResult>(Func<Tuple<T1, T2>, TResult>)
  nameWithType.vb: Func.UntupleArgs(Of T1, T2, TResult)(Func(Of Tuple(Of T1, T2), TResult))
- uid: Recore.Func.UntupleArgs``4(Recore.Func{Tuple{``0,``1,``2},``3})
  name: UntupleArgs<T1, T2, T3, TResult>(Func<Tuple<T1, T2, T3>, TResult>)
  href: api/Recore.Func.html#Recore_Func_UntupleArgs__4_Recore_Func_Tuple___0___1___2____3__
  commentId: M:Recore.Func.UntupleArgs``4(Recore.Func{Tuple{``0,``1,``2},``3})
  name.vb: UntupleArgs(Of T1, T2, T3, TResult)(Func(Of Tuple(Of T1, T2, T3), TResult))
  fullName: Recore.Func.UntupleArgs<T1, T2, T3, TResult>(Recore.Func<Tuple<T1, T2, T3>, TResult>)
  fullName.vb: Recore.Func.UntupleArgs(Of T1, T2, T3, TResult)(Recore.Func(Of Tuple(Of T1, T2, T3), TResult))
  nameWithType: Func.UntupleArgs<T1, T2, T3, TResult>(Func<Tuple<T1, T2, T3>, TResult>)
  nameWithType.vb: Func.UntupleArgs(Of T1, T2, T3, TResult)(Func(Of Tuple(Of T1, T2, T3), TResult))
- uid: Recore.Func.UntupleArgs``5(Recore.Func{Tuple{``0,``1,``2,``3},``4})
  name: UntupleArgs<T1, T2, T3, T4, TResult>(Func<Tuple<T1, T2, T3, T4>, TResult>)
  href: api/Recore.Func.html#Recore_Func_UntupleArgs__5_Recore_Func_Tuple___0___1___2___3____4__
  commentId: M:Recore.Func.UntupleArgs``5(Recore.Func{Tuple{``0,``1,``2,``3},``4})
  name.vb: UntupleArgs(Of T1, T2, T3, T4, TResult)(Func(Of Tuple(Of T1, T2, T3, T4), TResult))
  fullName: Recore.Func.UntupleArgs<T1, T2, T3, T4, TResult>(Recore.Func<Tuple<T1, T2, T3, T4>, TResult>)
  fullName.vb: Recore.Func.UntupleArgs(Of T1, T2, T3, T4, TResult)(Recore.Func(Of Tuple(Of T1, T2, T3, T4), TResult))
  nameWithType: Func.UntupleArgs<T1, T2, T3, T4, TResult>(Func<Tuple<T1, T2, T3, T4>, TResult>)
  nameWithType.vb: Func.UntupleArgs(Of T1, T2, T3, T4, TResult)(Func(Of Tuple(Of T1, T2, T3, T4), TResult))
- uid: Recore.Func.UntupleArgs``6(Recore.Func{Tuple{``0,``1,``2,``3,``4},``5})
  name: UntupleArgs<T1, T2, T3, T4, T5, TResult>(Func<Tuple<T1, T2, T3, T4, T5>, TResult>)
  href: api/Recore.Func.html#Recore_Func_UntupleArgs__6_Recore_Func_Tuple___0___1___2___3___4____5__
  commentId: M:Recore.Func.UntupleArgs``6(Recore.Func{Tuple{``0,``1,``2,``3,``4},``5})
  name.vb: UntupleArgs(Of T1, T2, T3, T4, T5, TResult)(Func(Of Tuple(Of T1, T2, T3, T4, T5), TResult))
  fullName: Recore.Func.UntupleArgs<T1, T2, T3, T4, T5, TResult>(Recore.Func<Tuple<T1, T2, T3, T4, T5>, TResult>)
  fullName.vb: Recore.Func.UntupleArgs(Of T1, T2, T3, T4, T5, TResult)(Recore.Func(Of Tuple(Of T1, T2, T3, T4, T5), TResult))
  nameWithType: Func.UntupleArgs<T1, T2, T3, T4, T5, TResult>(Func<Tuple<T1, T2, T3, T4, T5>, TResult>)
  nameWithType.vb: Func.UntupleArgs(Of T1, T2, T3, T4, T5, TResult)(Func(Of Tuple(Of T1, T2, T3, T4, T5), TResult))
- uid: Recore.Func.UntupleArgs``7(Recore.Func{Tuple{``0,``1,``2,``3,``4,``5},``6})
  name: UntupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Func<Tuple<T1, T2, T3, T4, T5, T6>, TResult>)
  href: api/Recore.Func.html#Recore_Func_UntupleArgs__7_Recore_Func_Tuple___0___1___2___3___4___5____6__
  commentId: M:Recore.Func.UntupleArgs``7(Recore.Func{Tuple{``0,``1,``2,``3,``4,``5},``6})
  name.vb: UntupleArgs(Of T1, T2, T3, T4, T5, T6, TResult)(Func(Of Tuple(Of T1, T2, T3, T4, T5, T6), TResult))
  fullName: Recore.Func.UntupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Recore.Func<Tuple<T1, T2, T3, T4, T5, T6>, TResult>)
  fullName.vb: Recore.Func.UntupleArgs(Of T1, T2, T3, T4, T5, T6, TResult)(Recore.Func(Of Tuple(Of T1, T2, T3, T4, T5, T6), TResult))
  nameWithType: Func.UntupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Func<Tuple<T1, T2, T3, T4, T5, T6>, TResult>)
  nameWithType.vb: Func.UntupleArgs(Of T1, T2, T3, T4, T5, T6, TResult)(Func(Of Tuple(Of T1, T2, T3, T4, T5, T6), TResult))
- uid: Recore.Func.UntupleArgs``8(Recore.Func{Tuple{``0,``1,``2,``3,``4,``5,``6},``7})
  name: UntupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<Tuple<T1, T2, T3, T4, T5, T6, T7>, TResult>)
  href: api/Recore.Func.html#Recore_Func_UntupleArgs__8_Recore_Func_Tuple___0___1___2___3___4___5___6____7__
  commentId: M:Recore.Func.UntupleArgs``8(Recore.Func{Tuple{``0,``1,``2,``3,``4,``5,``6},``7})
  name.vb: UntupleArgs(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Func(Of Tuple(Of T1, T2, T3, T4, T5, T6, T7), TResult))
  fullName: Recore.Func.UntupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Recore.Func<Tuple<T1, T2, T3, T4, T5, T6, T7>, TResult>)
  fullName.vb: Recore.Func.UntupleArgs(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Recore.Func(Of Tuple(Of T1, T2, T3, T4, T5, T6, T7), TResult))
  nameWithType: Func.UntupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<Tuple<T1, T2, T3, T4, T5, T6, T7>, TResult>)
  nameWithType.vb: Func.UntupleArgs(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Func(Of Tuple(Of T1, T2, T3, T4, T5, T6, T7), TResult))
- uid: Recore.Linq
  name: Recore.Linq
  href: api/Recore.Linq.html
  commentId: N:Recore.Linq
  fullName: Recore.Linq
  nameWithType: Recore.Linq
- uid: Recore.Linq.Renumerable
  name: Renumerable
  href: api/Recore.Linq.Renumerable.html
  commentId: T:Recore.Linq.Renumerable
  fullName: Recore.Linq.Renumerable
  nameWithType: Renumerable
- uid: Recore.Linq.Renumerable.Argmax*
  name: Argmax
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Argmax_
  commentId: Overload:Recore.Linq.Renumerable.Argmax
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.Argmax
  nameWithType: Renumerable.Argmax
- uid: Recore.Linq.Renumerable.Argmax``2(IEnumerable{``0},Recore.Func{``0,``1})
  name: Argmax<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Argmax__2_IEnumerable___0__Recore_Func___0___1__
  commentId: M:Recore.Linq.Renumerable.Argmax``2(IEnumerable{``0},Recore.Func{``0,``1})
  name.vb: Argmax(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
  fullName: Recore.Linq.Renumerable.Argmax<TSource, TResult>(IEnumerable<TSource>, Recore.Func<TSource, TResult>)
  fullName.vb: Recore.Linq.Renumerable.Argmax(Of TSource, TResult)(IEnumerable(Of TSource), Recore.Func(Of TSource, TResult))
  nameWithType: Renumerable.Argmax<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  nameWithType.vb: Renumerable.Argmax(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: Recore.Linq.Renumerable.Argmin*
  name: Argmin
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Argmin_
  commentId: Overload:Recore.Linq.Renumerable.Argmin
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.Argmin
  nameWithType: Renumerable.Argmin
- uid: Recore.Linq.Renumerable.Argmin``2(IEnumerable{``0},Recore.Func{``0,``1})
  name: Argmin<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Argmin__2_IEnumerable___0__Recore_Func___0___1__
  commentId: M:Recore.Linq.Renumerable.Argmin``2(IEnumerable{``0},Recore.Func{``0,``1})
  name.vb: Argmin(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
  fullName: Recore.Linq.Renumerable.Argmin<TSource, TResult>(IEnumerable<TSource>, Recore.Func<TSource, TResult>)
  fullName.vb: Recore.Linq.Renumerable.Argmin(Of TSource, TResult)(IEnumerable(Of TSource), Recore.Func(Of TSource, TResult))
  nameWithType: Renumerable.Argmin<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  nameWithType.vb: Renumerable.Argmin(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: Recore.Linq.Renumerable.Enumerate*
  name: Enumerate
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Enumerate_
  commentId: Overload:Recore.Linq.Renumerable.Enumerate
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.Enumerate
  nameWithType: Renumerable.Enumerate
- uid: Recore.Linq.Renumerable.Enumerate``1(IEnumerable{``0})
  name: Enumerate<TSource>(IEnumerable<TSource>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Enumerate__1_IEnumerable___0__
  commentId: M:Recore.Linq.Renumerable.Enumerate``1(IEnumerable{``0})
  name.vb: Enumerate(Of TSource)(IEnumerable(Of TSource))
  fullName: Recore.Linq.Renumerable.Enumerate<TSource>(IEnumerable<TSource>)
  fullName.vb: Recore.Linq.Renumerable.Enumerate(Of TSource)(IEnumerable(Of TSource))
  nameWithType: Renumerable.Enumerate<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Renumerable.Enumerate(Of TSource)(IEnumerable(Of TSource))
- uid: Recore.Linq.Renumerable.Flatten*
  name: Flatten
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Flatten_
  commentId: Overload:Recore.Linq.Renumerable.Flatten
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.Flatten
  nameWithType: Renumerable.Flatten
- uid: Recore.Linq.Renumerable.Flatten``1(IEnumerable{IEnumerable{``0}})
  name: Flatten<TSource>(IEnumerable<IEnumerable<TSource>>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Flatten__1_IEnumerable_IEnumerable___0___
  commentId: M:Recore.Linq.Renumerable.Flatten``1(IEnumerable{IEnumerable{``0}})
  name.vb: Flatten(Of TSource)(IEnumerable(Of IEnumerable(Of TSource)))
  fullName: Recore.Linq.Renumerable.Flatten<TSource>(IEnumerable<IEnumerable<TSource>>)
  fullName.vb: Recore.Linq.Renumerable.Flatten(Of TSource)(IEnumerable(Of IEnumerable(Of TSource)))
  nameWithType: Renumerable.Flatten<TSource>(IEnumerable<IEnumerable<TSource>>)
  nameWithType.vb: Renumerable.Flatten(Of TSource)(IEnumerable(Of IEnumerable(Of TSource)))
- uid: Recore.Linq.Renumerable.ForEach*
  name: ForEach
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_ForEach_
  commentId: Overload:Recore.Linq.Renumerable.ForEach
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.ForEach
  nameWithType: Renumerable.ForEach
- uid: Recore.Linq.Renumerable.ForEach``1(IEnumerable{``0},Action{``0})
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_ForEach__1_IEnumerable___0__Action___0__
  commentId: M:Recore.Linq.Renumerable.ForEach``1(IEnumerable{``0},Action{``0})
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource))
  fullName: Recore.Linq.Renumerable.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)
  fullName.vb: Recore.Linq.Renumerable.ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource))
  nameWithType: Renumerable.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)
  nameWithType.vb: Renumerable.ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource))
- uid: Recore.Linq.Renumerable.Lift*
  name: Lift
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Lift_
  commentId: Overload:Recore.Linq.Renumerable.Lift
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.Lift
  nameWithType: Renumerable.Lift
- uid: Recore.Linq.Renumerable.Lift``1(Action{``0})
  name: Lift<T>(Action<T>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Lift__1_Action___0__
  commentId: M:Recore.Linq.Renumerable.Lift``1(Action{``0})
  name.vb: Lift(Of T)(Action(Of T))
  fullName: Recore.Linq.Renumerable.Lift<T>(Action<T>)
  fullName.vb: Recore.Linq.Renumerable.Lift(Of T)(Action(Of T))
  nameWithType: Renumerable.Lift<T>(Action<T>)
  nameWithType.vb: Renumerable.Lift(Of T)(Action(Of T))
- uid: Recore.Linq.Renumerable.Lift``2(Recore.Func{``0,``1})
  name: Lift<T, TResult>(Func<T, TResult>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Lift__2_Recore_Func___0___1__
  commentId: M:Recore.Linq.Renumerable.Lift``2(Recore.Func{``0,``1})
  name.vb: Lift(Of T, TResult)(Func(Of T, TResult))
  fullName: Recore.Linq.Renumerable.Lift<T, TResult>(Recore.Func<T, TResult>)
  fullName.vb: Recore.Linq.Renumerable.Lift(Of T, TResult)(Recore.Func(Of T, TResult))
  nameWithType: Renumerable.Lift<T, TResult>(Func<T, TResult>)
  nameWithType.vb: Renumerable.Lift(Of T, TResult)(Func(Of T, TResult))
- uid: Recore.Linq.Renumerable.NonNull*
  name: NonNull
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_NonNull_
  commentId: Overload:Recore.Linq.Renumerable.NonNull
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.NonNull
  nameWithType: Renumerable.NonNull
- uid: Recore.Linq.Renumerable.NonNull``1(IEnumerable{``0})
  name: NonNull<TSource>(IEnumerable<TSource>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_NonNull__1_IEnumerable___0__
  commentId: M:Recore.Linq.Renumerable.NonNull``1(IEnumerable{``0})
  name.vb: NonNull(Of TSource)(IEnumerable(Of TSource))
  fullName: Recore.Linq.Renumerable.NonNull<TSource>(IEnumerable<TSource>)
  fullName.vb: Recore.Linq.Renumerable.NonNull(Of TSource)(IEnumerable(Of TSource))
  nameWithType: Renumerable.NonNull<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Renumerable.NonNull(Of TSource)(IEnumerable(Of TSource))
- uid: Recore.Linq.Renumerable.NonNull``1(IEnumerable{System.Nullable{``0}})
  name: NonNull<TSource>(IEnumerable<Nullable<TSource>>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_NonNull__1_IEnumerable_System_Nullable___0___
  commentId: M:Recore.Linq.Renumerable.NonNull``1(IEnumerable{System.Nullable{``0}})
  name.vb: NonNull(Of TSource)(IEnumerable(Of Nullable(Of TSource)))
  fullName: Recore.Linq.Renumerable.NonNull<TSource>(IEnumerable<System.Nullable<TSource>>)
  fullName.vb: Recore.Linq.Renumerable.NonNull(Of TSource)(IEnumerable(Of System.Nullable(Of TSource)))
  nameWithType: Renumerable.NonNull<TSource>(IEnumerable<Nullable<TSource>>)
  nameWithType.vb: Renumerable.NonNull(Of TSource)(IEnumerable(Of Nullable(Of TSource)))
- uid: Recore.Linq.Renumerable.OnKeys*
  name: OnKeys
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_OnKeys_
  commentId: Overload:Recore.Linq.Renumerable.OnKeys
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.OnKeys
  nameWithType: Renumerable.OnKeys
- uid: Recore.Linq.Renumerable.OnKeys``3(IEnumerable{KeyValuePair{``0,``1}},Recore.Func{``0,``2})
  name: OnKeys<TKey, TValue, TResult>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TKey, TResult>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_OnKeys__3_IEnumerable_KeyValuePair___0___1___Recore_Func___0___2__
  commentId: M:Recore.Linq.Renumerable.OnKeys``3(IEnumerable{KeyValuePair{``0,``1}},Recore.Func{``0,``2})
  name.vb: OnKeys(Of TKey, TValue, TResult)(IEnumerable(Of KeyValuePair(Of TKey, TValue)), Func(Of TKey, TResult))
  fullName: Recore.Linq.Renumerable.OnKeys<TKey, TValue, TResult>(IEnumerable<KeyValuePair<TKey, TValue>>, Recore.Func<TKey, TResult>)
  fullName.vb: Recore.Linq.Renumerable.OnKeys(Of TKey, TValue, TResult)(IEnumerable(Of KeyValuePair(Of TKey, TValue)), Recore.Func(Of TKey, TResult))
  nameWithType: Renumerable.OnKeys<TKey, TValue, TResult>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TKey, TResult>)
  nameWithType.vb: Renumerable.OnKeys(Of TKey, TValue, TResult)(IEnumerable(Of KeyValuePair(Of TKey, TValue)), Func(Of TKey, TResult))
- uid: Recore.Linq.Renumerable.OnValues*
  name: OnValues
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_OnValues_
  commentId: Overload:Recore.Linq.Renumerable.OnValues
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.OnValues
  nameWithType: Renumerable.OnValues
- uid: Recore.Linq.Renumerable.OnValues``3(IEnumerable{KeyValuePair{``0,``1}},Recore.Func{``1,``2})
  name: OnValues<TKey, TValue, TResult>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TValue, TResult>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_OnValues__3_IEnumerable_KeyValuePair___0___1___Recore_Func___1___2__
  commentId: M:Recore.Linq.Renumerable.OnValues``3(IEnumerable{KeyValuePair{``0,``1}},Recore.Func{``1,``2})
  name.vb: OnValues(Of TKey, TValue, TResult)(IEnumerable(Of KeyValuePair(Of TKey, TValue)), Func(Of TValue, TResult))
  fullName: Recore.Linq.Renumerable.OnValues<TKey, TValue, TResult>(IEnumerable<KeyValuePair<TKey, TValue>>, Recore.Func<TValue, TResult>)
  fullName.vb: Recore.Linq.Renumerable.OnValues(Of TKey, TValue, TResult)(IEnumerable(Of KeyValuePair(Of TKey, TValue)), Recore.Func(Of TValue, TResult))
  nameWithType: Renumerable.OnValues<TKey, TValue, TResult>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TValue, TResult>)
  nameWithType.vb: Renumerable.OnValues(Of TKey, TValue, TResult)(IEnumerable(Of KeyValuePair(Of TKey, TValue)), Func(Of TValue, TResult))
- uid: Recore.Linq.Renumerable.Product*
  name: Product
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Product_
  commentId: Overload:Recore.Linq.Renumerable.Product
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.Product
  nameWithType: Renumerable.Product
- uid: Recore.Linq.Renumerable.Product``2(IEnumerable{``0},IEnumerable{``1})
  name: Product<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Product__2_IEnumerable___0__IEnumerable___1__
  commentId: M:Recore.Linq.Renumerable.Product``2(IEnumerable{``0},IEnumerable{``1})
  name.vb: Product(Of TFirst, TSecond)(IEnumerable(Of TFirst), IEnumerable(Of TSecond))
  fullName: Recore.Linq.Renumerable.Product<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>)
  fullName.vb: Recore.Linq.Renumerable.Product(Of TFirst, TSecond)(IEnumerable(Of TFirst), IEnumerable(Of TSecond))
  nameWithType: Renumerable.Product<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>)
  nameWithType.vb: Renumerable.Product(Of TFirst, TSecond)(IEnumerable(Of TFirst), IEnumerable(Of TSecond))
- uid: Recore.Linq.Renumerable.ToDictionary*
  name: ToDictionary
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_ToDictionary_
  commentId: Overload:Recore.Linq.Renumerable.ToDictionary
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.ToDictionary
  nameWithType: Renumerable.ToDictionary
- uid: Recore.Linq.Renumerable.ToDictionary``2(IEnumerable{KeyValuePair{``0,``1}})
  name: ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_ToDictionary__2_IEnumerable_KeyValuePair___0___1___
  commentId: M:Recore.Linq.Renumerable.ToDictionary``2(IEnumerable{KeyValuePair{``0,``1}})
  name.vb: ToDictionary(Of TKey, TValue)(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName: Recore.Linq.Renumerable.ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>)
  fullName.vb: Recore.Linq.Renumerable.ToDictionary(Of TKey, TValue)(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  nameWithType: Renumerable.ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>)
  nameWithType.vb: Renumerable.ToDictionary(Of TKey, TValue)(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
- uid: Recore.Linq.Renumerable.ToLinkedList*
  name: ToLinkedList
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_ToLinkedList_
  commentId: Overload:Recore.Linq.Renumerable.ToLinkedList
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.ToLinkedList
  nameWithType: Renumerable.ToLinkedList
- uid: Recore.Linq.Renumerable.ToLinkedList``1(IEnumerable{``0})
  name: ToLinkedList<TSource>(IEnumerable<TSource>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_ToLinkedList__1_IEnumerable___0__
  commentId: M:Recore.Linq.Renumerable.ToLinkedList``1(IEnumerable{``0})
  name.vb: ToLinkedList(Of TSource)(IEnumerable(Of TSource))
  fullName: Recore.Linq.Renumerable.ToLinkedList<TSource>(IEnumerable<TSource>)
  fullName.vb: Recore.Linq.Renumerable.ToLinkedList(Of TSource)(IEnumerable(Of TSource))
  nameWithType: Renumerable.ToLinkedList<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Renumerable.ToLinkedList(Of TSource)(IEnumerable(Of TSource))
- uid: Recore.Linq.Renumerable.Zip*
  name: Zip
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Zip_
  commentId: Overload:Recore.Linq.Renumerable.Zip
  isSpec: "True"
  fullName: Recore.Linq.Renumerable.Zip
  nameWithType: Renumerable.Zip
- uid: Recore.Linq.Renumerable.Zip``2(IEnumerable{``0},IEnumerable{``1})
  name: Zip<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>)
  href: api/Recore.Linq.Renumerable.html#Recore_Linq_Renumerable_Zip__2_IEnumerable___0__IEnumerable___1__
  commentId: M:Recore.Linq.Renumerable.Zip``2(IEnumerable{``0},IEnumerable{``1})
  name.vb: Zip(Of TFirst, TSecond)(IEnumerable(Of TFirst), IEnumerable(Of TSecond))
  fullName: Recore.Linq.Renumerable.Zip<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>)
  fullName.vb: Recore.Linq.Renumerable.Zip(Of TFirst, TSecond)(IEnumerable(Of TFirst), IEnumerable(Of TSecond))
  nameWithType: Renumerable.Zip<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>)
  nameWithType.vb: Renumerable.Zip(Of TFirst, TSecond)(IEnumerable(Of TFirst), IEnumerable(Of TSecond))
- uid: Recore.ObjectExtensions
  name: ObjectExtensions
  href: api/Recore.ObjectExtensions.html
  commentId: T:Recore.ObjectExtensions
  fullName: Recore.ObjectExtensions
  nameWithType: ObjectExtensions
- uid: Recore.ObjectExtensions.StaticCast*
  name: StaticCast
  href: api/Recore.ObjectExtensions.html#Recore_ObjectExtensions_StaticCast_
  commentId: Overload:Recore.ObjectExtensions.StaticCast
  isSpec: "True"
  fullName: Recore.ObjectExtensions.StaticCast
  nameWithType: ObjectExtensions.StaticCast
- uid: Recore.ObjectExtensions.StaticCast``1(``0)
  name: StaticCast<T>(T)
  href: api/Recore.ObjectExtensions.html#Recore_ObjectExtensions_StaticCast__1___0_
  commentId: M:Recore.ObjectExtensions.StaticCast``1(``0)
  name.vb: StaticCast(Of T)(T)
  fullName: Recore.ObjectExtensions.StaticCast<T>(T)
  fullName.vb: Recore.ObjectExtensions.StaticCast(Of T)(T)
  nameWithType: ObjectExtensions.StaticCast<T>(T)
  nameWithType.vb: ObjectExtensions.StaticCast(Of T)(T)
- uid: Recore.Of`1
  name: Of<T>
  href: api/Recore.Of-1.html
  commentId: T:Recore.Of`1
  name.vb: Of(Of T)
  fullName: Recore.Of<T>
  fullName.vb: Recore.Of(Of T)
  nameWithType: Of<T>
  nameWithType.vb: Of(Of T)
- uid: Recore.Of`1.Equals(Recore.Of{`0})
  name: Equals(Of<T>)
  href: api/Recore.Of-1.html#Recore_Of_1_Equals_Recore_Of__0__
  commentId: M:Recore.Of`1.Equals(Recore.Of{`0})
  name.vb: Equals(Of(Of T))
  fullName: Recore.Of<T>.Equals(Recore.Of<T>)
  fullName.vb: Recore.Of(Of T).Equals(Recore.Of(Of T))
  nameWithType: Of<T>.Equals(Of<T>)
  nameWithType.vb: Of(Of T).Equals(Of(Of T))
- uid: Recore.Of`1.Equals(System.Object)
  name: Equals(Object)
  href: api/Recore.Of-1.html#Recore_Of_1_Equals_System_Object_
  commentId: M:Recore.Of`1.Equals(System.Object)
  fullName: Recore.Of<T>.Equals(System.Object)
  fullName.vb: Recore.Of(Of T).Equals(System.Object)
  nameWithType: Of<T>.Equals(Object)
  nameWithType.vb: Of(Of T).Equals(Object)
- uid: Recore.Of`1.Equals*
  name: Equals
  href: api/Recore.Of-1.html#Recore_Of_1_Equals_
  commentId: Overload:Recore.Of`1.Equals
  isSpec: "True"
  fullName: Recore.Of<T>.Equals
  fullName.vb: Recore.Of(Of T).Equals
  nameWithType: Of<T>.Equals
  nameWithType.vb: Of(Of T).Equals
- uid: Recore.Of`1.GetHashCode
  name: GetHashCode()
  href: api/Recore.Of-1.html#Recore_Of_1_GetHashCode
  commentId: M:Recore.Of`1.GetHashCode
  fullName: Recore.Of<T>.GetHashCode()
  fullName.vb: Recore.Of(Of T).GetHashCode()
  nameWithType: Of<T>.GetHashCode()
  nameWithType.vb: Of(Of T).GetHashCode()
- uid: Recore.Of`1.GetHashCode*
  name: GetHashCode
  href: api/Recore.Of-1.html#Recore_Of_1_GetHashCode_
  commentId: Overload:Recore.Of`1.GetHashCode
  isSpec: "True"
  fullName: Recore.Of<T>.GetHashCode
  fullName.vb: Recore.Of(Of T).GetHashCode
  nameWithType: Of<T>.GetHashCode
  nameWithType.vb: Of(Of T).GetHashCode
- uid: Recore.Of`1.op_Equality(Recore.Of{`0},Recore.Of{`0})
  name: Equality(Of<T>, Of<T>)
  href: api/Recore.Of-1.html#Recore_Of_1_op_Equality_Recore_Of__0__Recore_Of__0__
  commentId: M:Recore.Of`1.op_Equality(Recore.Of{`0},Recore.Of{`0})
  name.vb: Equality(Of(Of T), Of(Of T))
  fullName: Recore.Of<T>.Equality(Recore.Of<T>, Recore.Of<T>)
  fullName.vb: Recore.Of(Of T).Equality(Recore.Of(Of T), Recore.Of(Of T))
  nameWithType: Of<T>.Equality(Of<T>, Of<T>)
  nameWithType.vb: Of(Of T).Equality(Of(Of T), Of(Of T))
- uid: Recore.Of`1.op_Equality*
  name: Equality
  href: api/Recore.Of-1.html#Recore_Of_1_op_Equality_
  commentId: Overload:Recore.Of`1.op_Equality
  isSpec: "True"
  fullName: Recore.Of<T>.Equality
  fullName.vb: Recore.Of(Of T).Equality
  nameWithType: Of<T>.Equality
  nameWithType.vb: Of(Of T).Equality
- uid: Recore.Of`1.op_Implicit(Recore.Of{`0})~`0
  name: Implicit(Of<T> to T)
  href: api/Recore.Of-1.html#Recore_Of_1_op_Implicit_Recore_Of__0____0
  commentId: M:Recore.Of`1.op_Implicit(Recore.Of{`0})~`0
  name.vb: Widening(Of(Of T) to T)
  fullName: Recore.Of<T>.Implicit(Recore.Of<T> to T)
  fullName.vb: Recore.Of(Of T).Widening(Recore.Of(Of T) to T)
  nameWithType: Of<T>.Implicit(Of<T> to T)
  nameWithType.vb: Of(Of T).Widening(Of(Of T) to T)
- uid: Recore.Of`1.op_Implicit*
  name: Implicit
  href: api/Recore.Of-1.html#Recore_Of_1_op_Implicit_
  commentId: Overload:Recore.Of`1.op_Implicit
  isSpec: "True"
  name.vb: Widening
  fullName: Recore.Of<T>.Implicit
  fullName.vb: Recore.Of(Of T).Widening
  nameWithType: Of<T>.Implicit
  nameWithType.vb: Of(Of T).Widening
- uid: Recore.Of`1.op_Inequality(Recore.Of{`0},Recore.Of{`0})
  name: Inequality(Of<T>, Of<T>)
  href: api/Recore.Of-1.html#Recore_Of_1_op_Inequality_Recore_Of__0__Recore_Of__0__
  commentId: M:Recore.Of`1.op_Inequality(Recore.Of{`0},Recore.Of{`0})
  name.vb: Inequality(Of(Of T), Of(Of T))
  fullName: Recore.Of<T>.Inequality(Recore.Of<T>, Recore.Of<T>)
  fullName.vb: Recore.Of(Of T).Inequality(Recore.Of(Of T), Recore.Of(Of T))
  nameWithType: Of<T>.Inequality(Of<T>, Of<T>)
  nameWithType.vb: Of(Of T).Inequality(Of(Of T), Of(Of T))
- uid: Recore.Of`1.op_Inequality*
  name: Inequality
  href: api/Recore.Of-1.html#Recore_Of_1_op_Inequality_
  commentId: Overload:Recore.Of`1.op_Inequality
  isSpec: "True"
  fullName: Recore.Of<T>.Inequality
  fullName.vb: Recore.Of(Of T).Inequality
  nameWithType: Of<T>.Inequality
  nameWithType.vb: Of(Of T).Inequality
- uid: Recore.Of`1.To*
  name: To
  href: api/Recore.Of-1.html#Recore_Of_1_To_
  commentId: Overload:Recore.Of`1.To
  isSpec: "True"
  fullName: Recore.Of<T>.To
  fullName.vb: Recore.Of(Of T).To
  nameWithType: Of<T>.To
  nameWithType.vb: Of(Of T).To
- uid: Recore.Of`1.To``1
  name: To<TOf>()
  href: api/Recore.Of-1.html#Recore_Of_1_To__1
  commentId: M:Recore.Of`1.To``1
  name.vb: To(Of TOf)()
  fullName: Recore.Of<T>.To<TOf>()
  fullName.vb: Recore.Of(Of T).To(Of TOf)()
  nameWithType: Of<T>.To<TOf>()
  nameWithType.vb: Of(Of T).To(Of TOf)()
- uid: Recore.Of`1.ToString
  name: ToString()
  href: api/Recore.Of-1.html#Recore_Of_1_ToString
  commentId: M:Recore.Of`1.ToString
  fullName: Recore.Of<T>.ToString()
  fullName.vb: Recore.Of(Of T).ToString()
  nameWithType: Of<T>.ToString()
  nameWithType.vb: Of(Of T).ToString()
- uid: Recore.Of`1.ToString*
  name: ToString
  href: api/Recore.Of-1.html#Recore_Of_1_ToString_
  commentId: Overload:Recore.Of`1.ToString
  isSpec: "True"
  fullName: Recore.Of<T>.ToString
  fullName.vb: Recore.Of(Of T).ToString
  nameWithType: Of<T>.ToString
  nameWithType.vb: Of(Of T).ToString
- uid: Recore.Of`1.Value
  name: Value
  href: api/Recore.Of-1.html#Recore_Of_1_Value
  commentId: P:Recore.Of`1.Value
  fullName: Recore.Of<T>.Value
  fullName.vb: Recore.Of(Of T).Value
  nameWithType: Of<T>.Value
  nameWithType.vb: Of(Of T).Value
- uid: Recore.Of`1.Value*
  name: Value
  href: api/Recore.Of-1.html#Recore_Of_1_Value_
  commentId: Overload:Recore.Of`1.Value
  isSpec: "True"
  fullName: Recore.Of<T>.Value
  fullName.vb: Recore.Of(Of T).Value
  nameWithType: Of<T>.Value
  nameWithType.vb: Of(Of T).Value
- uid: Recore.OfJsonAttribute
  name: OfJsonAttribute
  href: api/Recore.OfJsonAttribute.html
  commentId: T:Recore.OfJsonAttribute
  fullName: Recore.OfJsonAttribute
  nameWithType: OfJsonAttribute
- uid: Recore.OfJsonAttribute.#ctor(Type,Type)
  name: OfJsonAttribute(Type, Type)
  href: api/Recore.OfJsonAttribute.html#Recore_OfJsonAttribute__ctor_Type_Type_
  commentId: M:Recore.OfJsonAttribute.#ctor(Type,Type)
  fullName: Recore.OfJsonAttribute.OfJsonAttribute(Type, Type)
  nameWithType: OfJsonAttribute.OfJsonAttribute(Type, Type)
- uid: Recore.OfJsonAttribute.#ctor*
  name: OfJsonAttribute
  href: api/Recore.OfJsonAttribute.html#Recore_OfJsonAttribute__ctor_
  commentId: Overload:Recore.OfJsonAttribute.#ctor
  isSpec: "True"
  fullName: Recore.OfJsonAttribute.OfJsonAttribute
  nameWithType: OfJsonAttribute.OfJsonAttribute
- uid: Recore.Optional
  name: Optional
  href: api/Recore.Optional.html
  commentId: T:Recore.Optional
  fullName: Recore.Optional
  nameWithType: Optional
- uid: Recore.Optional.AwaitAsync*
  name: AwaitAsync
  href: api/Recore.Optional.html#Recore_Optional_AwaitAsync_
  commentId: Overload:Recore.Optional.AwaitAsync
  isSpec: "True"
  fullName: Recore.Optional.AwaitAsync
  nameWithType: Optional.AwaitAsync
- uid: Recore.Optional.AwaitAsync``1(Recore.Optional{Task{``0}})
  name: AwaitAsync<T>(Optional<Task<T>>)
  href: api/Recore.Optional.html#Recore_Optional_AwaitAsync__1_Recore_Optional_Task___0___
  commentId: M:Recore.Optional.AwaitAsync``1(Recore.Optional{Task{``0}})
  name.vb: AwaitAsync(Of T)(Optional(Of Task(Of T)))
  fullName: Recore.Optional.AwaitAsync<T>(Recore.Optional<Task<T>>)
  fullName.vb: Recore.Optional.AwaitAsync(Of T)(Recore.Optional(Of Task(Of T)))
  nameWithType: Optional.AwaitAsync<T>(Optional<Task<T>>)
  nameWithType.vb: Optional.AwaitAsync(Of T)(Optional(Of Task(Of T)))
- uid: Recore.Optional.Flatten*
  name: Flatten
  href: api/Recore.Optional.html#Recore_Optional_Flatten_
  commentId: Overload:Recore.Optional.Flatten
  isSpec: "True"
  fullName: Recore.Optional.Flatten
  nameWithType: Optional.Flatten
- uid: Recore.Optional.Flatten``1(Recore.Optional{Recore.Optional{``0}})
  name: Flatten<T>(Optional<Optional<T>>)
  href: api/Recore.Optional.html#Recore_Optional_Flatten__1_Recore_Optional_Recore_Optional___0___
  commentId: M:Recore.Optional.Flatten``1(Recore.Optional{Recore.Optional{``0}})
  name.vb: Flatten(Of T)(Optional(Of Optional(Of T)))
  fullName: Recore.Optional.Flatten<T>(Recore.Optional<Recore.Optional<T>>)
  fullName.vb: Recore.Optional.Flatten(Of T)(Recore.Optional(Of Recore.Optional(Of T)))
  nameWithType: Optional.Flatten<T>(Optional<Optional<T>>)
  nameWithType.vb: Optional.Flatten(Of T)(Optional(Of Optional(Of T)))
- uid: Recore.Optional.If*
  name: If
  href: api/Recore.Optional.html#Recore_Optional_If_
  commentId: Overload:Recore.Optional.If
  isSpec: "True"
  fullName: Recore.Optional.If
  nameWithType: Optional.If
- uid: Recore.Optional.If``1(System.Boolean,``0)
  name: If<T>(Boolean, T)
  href: api/Recore.Optional.html#Recore_Optional_If__1_System_Boolean___0_
  commentId: M:Recore.Optional.If``1(System.Boolean,``0)
  name.vb: If(Of T)(Boolean, T)
  fullName: Recore.Optional.If<T>(System.Boolean, T)
  fullName.vb: Recore.Optional.If(Of T)(System.Boolean, T)
  nameWithType: Optional.If<T>(Boolean, T)
  nameWithType.vb: Optional.If(Of T)(Boolean, T)
- uid: Recore.Optional.If``1(System.Boolean,Recore.Func{``0})
  name: If<T>(Boolean, Func<T>)
  href: api/Recore.Optional.html#Recore_Optional_If__1_System_Boolean_Recore_Func___0__
  commentId: M:Recore.Optional.If``1(System.Boolean,Recore.Func{``0})
  name.vb: If(Of T)(Boolean, Func(Of T))
  fullName: Recore.Optional.If<T>(System.Boolean, Recore.Func<T>)
  fullName.vb: Recore.Optional.If(Of T)(System.Boolean, Recore.Func(Of T))
  nameWithType: Optional.If<T>(Boolean, Func<T>)
  nameWithType.vb: Optional.If(Of T)(Boolean, Func(Of T))
- uid: Recore.Optional.Lift*
  name: Lift
  href: api/Recore.Optional.html#Recore_Optional_Lift_
  commentId: Overload:Recore.Optional.Lift
  isSpec: "True"
  fullName: Recore.Optional.Lift
  nameWithType: Optional.Lift
- uid: Recore.Optional.Lift``1(Action{``0})
  name: Lift<T>(Action<T>)
  href: api/Recore.Optional.html#Recore_Optional_Lift__1_Action___0__
  commentId: M:Recore.Optional.Lift``1(Action{``0})
  name.vb: Lift(Of T)(Action(Of T))
  fullName: Recore.Optional.Lift<T>(Action<T>)
  fullName.vb: Recore.Optional.Lift(Of T)(Action(Of T))
  nameWithType: Optional.Lift<T>(Action<T>)
  nameWithType.vb: Optional.Lift(Of T)(Action(Of T))
- uid: Recore.Optional.Lift``2(Recore.Func{``0,``1})
  name: Lift<T, TResult>(Func<T, TResult>)
  href: api/Recore.Optional.html#Recore_Optional_Lift__2_Recore_Func___0___1__
  commentId: M:Recore.Optional.Lift``2(Recore.Func{``0,``1})
  name.vb: Lift(Of T, TResult)(Func(Of T, TResult))
  fullName: Recore.Optional.Lift<T, TResult>(Recore.Func<T, TResult>)
  fullName.vb: Recore.Optional.Lift(Of T, TResult)(Recore.Func(Of T, TResult))
  nameWithType: Optional.Lift<T, TResult>(Func<T, TResult>)
  nameWithType.vb: Optional.Lift(Of T, TResult)(Func(Of T, TResult))
- uid: Recore.Optional.NonEmpty*
  name: NonEmpty
  href: api/Recore.Optional.html#Recore_Optional_NonEmpty_
  commentId: Overload:Recore.Optional.NonEmpty
  isSpec: "True"
  fullName: Recore.Optional.NonEmpty
  nameWithType: Optional.NonEmpty
- uid: Recore.Optional.NonEmpty``1(IEnumerable{Recore.Optional{``0}})
  name: NonEmpty<T>(IEnumerable<Optional<T>>)
  href: api/Recore.Optional.html#Recore_Optional_NonEmpty__1_IEnumerable_Recore_Optional___0___
  commentId: M:Recore.Optional.NonEmpty``1(IEnumerable{Recore.Optional{``0}})
  name.vb: NonEmpty(Of T)(IEnumerable(Of Optional(Of T)))
  fullName: Recore.Optional.NonEmpty<T>(IEnumerable<Recore.Optional<T>>)
  fullName.vb: Recore.Optional.NonEmpty(Of T)(IEnumerable(Of Recore.Optional(Of T)))
  nameWithType: Optional.NonEmpty<T>(IEnumerable<Optional<T>>)
  nameWithType.vb: Optional.NonEmpty(Of T)(IEnumerable(Of Optional(Of T)))
- uid: Recore.Optional.Of*
  name: Of
  href: api/Recore.Optional.html#Recore_Optional_Of_
  commentId: Overload:Recore.Optional.Of
  isSpec: "True"
  fullName: Recore.Optional.Of
  nameWithType: Optional.Of
- uid: Recore.Optional.Of``1(``0)
  name: Of<T>(T)
  href: api/Recore.Optional.html#Recore_Optional_Of__1___0_
  commentId: M:Recore.Optional.Of``1(``0)
  name.vb: Of(Of T)(T)
  fullName: Recore.Optional.Of<T>(T)
  fullName.vb: Recore.Optional.Of(Of T)(T)
  nameWithType: Optional.Of<T>(T)
  nameWithType.vb: Optional.Of(Of T)(T)
- uid: Recore.Optional`1
  name: Optional<T>
  href: api/Recore.Optional-1.html
  commentId: T:Recore.Optional`1
  name.vb: Optional(Of T)
  fullName: Recore.Optional<T>
  fullName.vb: Recore.Optional(Of T)
  nameWithType: Optional<T>
  nameWithType.vb: Optional(Of T)
- uid: Recore.Optional`1.#ctor(`0)
  name: Optional(T)
  href: api/Recore.Optional-1.html#Recore_Optional_1__ctor__0_
  commentId: M:Recore.Optional`1.#ctor(`0)
  fullName: Recore.Optional<T>.Optional(T)
  fullName.vb: Recore.Optional(Of T).Optional(T)
  nameWithType: Optional<T>.Optional(T)
  nameWithType.vb: Optional(Of T).Optional(T)
- uid: Recore.Optional`1.#ctor*
  name: Optional
  href: api/Recore.Optional-1.html#Recore_Optional_1__ctor_
  commentId: Overload:Recore.Optional`1.#ctor
  isSpec: "True"
  fullName: Recore.Optional<T>.Optional
  fullName.vb: Recore.Optional(Of T).Optional
  nameWithType: Optional<T>.Optional
  nameWithType.vb: Optional(Of T).Optional
- uid: Recore.Optional`1.AssertValue
  name: AssertValue()
  href: api/Recore.Optional-1.html#Recore_Optional_1_AssertValue
  commentId: M:Recore.Optional`1.AssertValue
  fullName: Recore.Optional<T>.AssertValue()
  fullName.vb: Recore.Optional(Of T).AssertValue()
  nameWithType: Optional<T>.AssertValue()
  nameWithType.vb: Optional(Of T).AssertValue()
- uid: Recore.Optional`1.AssertValue*
  name: AssertValue
  href: api/Recore.Optional-1.html#Recore_Optional_1_AssertValue_
  commentId: Overload:Recore.Optional`1.AssertValue
  isSpec: "True"
  fullName: Recore.Optional<T>.AssertValue
  fullName.vb: Recore.Optional(Of T).AssertValue
  nameWithType: Optional<T>.AssertValue
  nameWithType.vb: Optional(Of T).AssertValue
- uid: Recore.Optional`1.Empty
  name: Empty
  href: api/Recore.Optional-1.html#Recore_Optional_1_Empty
  commentId: P:Recore.Optional`1.Empty
  fullName: Recore.Optional<T>.Empty
  fullName.vb: Recore.Optional(Of T).Empty
  nameWithType: Optional<T>.Empty
  nameWithType.vb: Optional(Of T).Empty
- uid: Recore.Optional`1.Empty*
  name: Empty
  href: api/Recore.Optional-1.html#Recore_Optional_1_Empty_
  commentId: Overload:Recore.Optional`1.Empty
  isSpec: "True"
  fullName: Recore.Optional<T>.Empty
  fullName.vb: Recore.Optional(Of T).Empty
  nameWithType: Optional<T>.Empty
  nameWithType.vb: Optional(Of T).Empty
- uid: Recore.Optional`1.Equals(Recore.Optional{`0})
  name: Equals(Optional<T>)
  href: api/Recore.Optional-1.html#Recore_Optional_1_Equals_Recore_Optional__0__
  commentId: M:Recore.Optional`1.Equals(Recore.Optional{`0})
  name.vb: Equals(Optional(Of T))
  fullName: Recore.Optional<T>.Equals(Recore.Optional<T>)
  fullName.vb: Recore.Optional(Of T).Equals(Recore.Optional(Of T))
  nameWithType: Optional<T>.Equals(Optional<T>)
  nameWithType.vb: Optional(Of T).Equals(Optional(Of T))
- uid: Recore.Optional`1.Equals(System.Object)
  name: Equals(Object)
  href: api/Recore.Optional-1.html#Recore_Optional_1_Equals_System_Object_
  commentId: M:Recore.Optional`1.Equals(System.Object)
  fullName: Recore.Optional<T>.Equals(System.Object)
  fullName.vb: Recore.Optional(Of T).Equals(System.Object)
  nameWithType: Optional<T>.Equals(Object)
  nameWithType.vb: Optional(Of T).Equals(Object)
- uid: Recore.Optional`1.Equals*
  name: Equals
  href: api/Recore.Optional-1.html#Recore_Optional_1_Equals_
  commentId: Overload:Recore.Optional`1.Equals
  isSpec: "True"
  fullName: Recore.Optional<T>.Equals
  fullName.vb: Recore.Optional(Of T).Equals
  nameWithType: Optional<T>.Equals
  nameWithType.vb: Optional(Of T).Equals
- uid: Recore.Optional`1.GetHashCode
  name: GetHashCode()
  href: api/Recore.Optional-1.html#Recore_Optional_1_GetHashCode
  commentId: M:Recore.Optional`1.GetHashCode
  fullName: Recore.Optional<T>.GetHashCode()
  fullName.vb: Recore.Optional(Of T).GetHashCode()
  nameWithType: Optional<T>.GetHashCode()
  nameWithType.vb: Optional(Of T).GetHashCode()
- uid: Recore.Optional`1.GetHashCode*
  name: GetHashCode
  href: api/Recore.Optional-1.html#Recore_Optional_1_GetHashCode_
  commentId: Overload:Recore.Optional`1.GetHashCode
  isSpec: "True"
  fullName: Recore.Optional<T>.GetHashCode
  fullName.vb: Recore.Optional(Of T).GetHashCode
  nameWithType: Optional<T>.GetHashCode
  nameWithType.vb: Optional(Of T).GetHashCode
- uid: Recore.Optional`1.HasValue
  name: HasValue
  href: api/Recore.Optional-1.html#Recore_Optional_1_HasValue
  commentId: P:Recore.Optional`1.HasValue
  fullName: Recore.Optional<T>.HasValue
  fullName.vb: Recore.Optional(Of T).HasValue
  nameWithType: Optional<T>.HasValue
  nameWithType.vb: Optional(Of T).HasValue
- uid: Recore.Optional`1.HasValue*
  name: HasValue
  href: api/Recore.Optional-1.html#Recore_Optional_1_HasValue_
  commentId: Overload:Recore.Optional`1.HasValue
  isSpec: "True"
  fullName: Recore.Optional<T>.HasValue
  fullName.vb: Recore.Optional(Of T).HasValue
  nameWithType: Optional<T>.HasValue
  nameWithType.vb: Optional(Of T).HasValue
- uid: Recore.Optional`1.IfValue(Action{`0})
  name: IfValue(Action<T>)
  href: api/Recore.Optional-1.html#Recore_Optional_1_IfValue_Action__0__
  commentId: M:Recore.Optional`1.IfValue(Action{`0})
  name.vb: IfValue(Action(Of T))
  fullName: Recore.Optional<T>.IfValue(Action<T>)
  fullName.vb: Recore.Optional(Of T).IfValue(Action(Of T))
  nameWithType: Optional<T>.IfValue(Action<T>)
  nameWithType.vb: Optional(Of T).IfValue(Action(Of T))
- uid: Recore.Optional`1.IfValue*
  name: IfValue
  href: api/Recore.Optional-1.html#Recore_Optional_1_IfValue_
  commentId: Overload:Recore.Optional`1.IfValue
  isSpec: "True"
  fullName: Recore.Optional<T>.IfValue
  fullName.vb: Recore.Optional(Of T).IfValue
  nameWithType: Optional<T>.IfValue
  nameWithType.vb: Optional(Of T).IfValue
- uid: Recore.Optional`1.OnValue*
  name: OnValue
  href: api/Recore.Optional-1.html#Recore_Optional_1_OnValue_
  commentId: Overload:Recore.Optional`1.OnValue
  isSpec: "True"
  fullName: Recore.Optional<T>.OnValue
  fullName.vb: Recore.Optional(Of T).OnValue
  nameWithType: Optional<T>.OnValue
  nameWithType.vb: Optional(Of T).OnValue
- uid: Recore.Optional`1.OnValue``1(Recore.Func{`0,``0})
  name: OnValue<U>(Func<T, U>)
  href: api/Recore.Optional-1.html#Recore_Optional_1_OnValue__1_Recore_Func__0___0__
  commentId: M:Recore.Optional`1.OnValue``1(Recore.Func{`0,``0})
  name.vb: OnValue(Of U)(Func(Of T, U))
  fullName: Recore.Optional<T>.OnValue<U>(Recore.Func<T, U>)
  fullName.vb: Recore.Optional(Of T).OnValue(Of U)(Recore.Func(Of T, U))
  nameWithType: Optional<T>.OnValue<U>(Func<T, U>)
  nameWithType.vb: Optional(Of T).OnValue(Of U)(Func(Of T, U))
- uid: Recore.Optional`1.op_Equality(Recore.Optional{`0},Recore.Optional{`0})
  name: Equality(Optional<T>, Optional<T>)
  href: api/Recore.Optional-1.html#Recore_Optional_1_op_Equality_Recore_Optional__0__Recore_Optional__0__
  commentId: M:Recore.Optional`1.op_Equality(Recore.Optional{`0},Recore.Optional{`0})
  name.vb: Equality(Optional(Of T), Optional(Of T))
  fullName: Recore.Optional<T>.Equality(Recore.Optional<T>, Recore.Optional<T>)
  fullName.vb: Recore.Optional(Of T).Equality(Recore.Optional(Of T), Recore.Optional(Of T))
  nameWithType: Optional<T>.Equality(Optional<T>, Optional<T>)
  nameWithType.vb: Optional(Of T).Equality(Optional(Of T), Optional(Of T))
- uid: Recore.Optional`1.op_Equality*
  name: Equality
  href: api/Recore.Optional-1.html#Recore_Optional_1_op_Equality_
  commentId: Overload:Recore.Optional`1.op_Equality
  isSpec: "True"
  fullName: Recore.Optional<T>.Equality
  fullName.vb: Recore.Optional(Of T).Equality
  nameWithType: Optional<T>.Equality
  nameWithType.vb: Optional(Of T).Equality
- uid: Recore.Optional`1.op_Explicit(Recore.Optional{`0})~`0
  name: Explicit(Optional<T> to T)
  href: api/Recore.Optional-1.html#Recore_Optional_1_op_Explicit_Recore_Optional__0____0
  commentId: M:Recore.Optional`1.op_Explicit(Recore.Optional{`0})~`0
  name.vb: Narrowing(Optional(Of T) to T)
  fullName: Recore.Optional<T>.Explicit(Recore.Optional<T> to T)
  fullName.vb: Recore.Optional(Of T).Narrowing(Recore.Optional(Of T) to T)
  nameWithType: Optional<T>.Explicit(Optional<T> to T)
  nameWithType.vb: Optional(Of T).Narrowing(Optional(Of T) to T)
- uid: Recore.Optional`1.op_Explicit*
  name: Explicit
  href: api/Recore.Optional-1.html#Recore_Optional_1_op_Explicit_
  commentId: Overload:Recore.Optional`1.op_Explicit
  isSpec: "True"
  name.vb: Narrowing
  fullName: Recore.Optional<T>.Explicit
  fullName.vb: Recore.Optional(Of T).Narrowing
  nameWithType: Optional<T>.Explicit
  nameWithType.vb: Optional(Of T).Narrowing
- uid: Recore.Optional`1.op_Implicit(`0)~Recore.Optional{`0}
  name: Implicit(T to Optional<T>)
  href: api/Recore.Optional-1.html#Recore_Optional_1_op_Implicit__0__Recore_Optional__0_
  commentId: M:Recore.Optional`1.op_Implicit(`0)~Recore.Optional{`0}
  name.vb: Widening(T to Optional(Of T))
  fullName: Recore.Optional<T>.Implicit(T to Recore.Optional<T>)
  fullName.vb: Recore.Optional(Of T).Widening(T to Recore.Optional(Of T))
  nameWithType: Optional<T>.Implicit(T to Optional<T>)
  nameWithType.vb: Optional(Of T).Widening(T to Optional(Of T))
- uid: Recore.Optional`1.op_Implicit*
  name: Implicit
  href: api/Recore.Optional-1.html#Recore_Optional_1_op_Implicit_
  commentId: Overload:Recore.Optional`1.op_Implicit
  isSpec: "True"
  name.vb: Widening
  fullName: Recore.Optional<T>.Implicit
  fullName.vb: Recore.Optional(Of T).Widening
  nameWithType: Optional<T>.Implicit
  nameWithType.vb: Optional(Of T).Widening
- uid: Recore.Optional`1.op_Inequality(Recore.Optional{`0},Recore.Optional{`0})
  name: Inequality(Optional<T>, Optional<T>)
  href: api/Recore.Optional-1.html#Recore_Optional_1_op_Inequality_Recore_Optional__0__Recore_Optional__0__
  commentId: M:Recore.Optional`1.op_Inequality(Recore.Optional{`0},Recore.Optional{`0})
  name.vb: Inequality(Optional(Of T), Optional(Of T))
  fullName: Recore.Optional<T>.Inequality(Recore.Optional<T>, Recore.Optional<T>)
  fullName.vb: Recore.Optional(Of T).Inequality(Recore.Optional(Of T), Recore.Optional(Of T))
  nameWithType: Optional<T>.Inequality(Optional<T>, Optional<T>)
  nameWithType.vb: Optional(Of T).Inequality(Optional(Of T), Optional(Of T))
- uid: Recore.Optional`1.op_Inequality*
  name: Inequality
  href: api/Recore.Optional-1.html#Recore_Optional_1_op_Inequality_
  commentId: Overload:Recore.Optional`1.op_Inequality
  isSpec: "True"
  fullName: Recore.Optional<T>.Inequality
  fullName.vb: Recore.Optional(Of T).Inequality
  nameWithType: Optional<T>.Inequality
  nameWithType.vb: Optional(Of T).Inequality
- uid: Recore.Optional`1.Switch(Action{`0},Action)
  name: Switch(Action<T>, Action)
  href: api/Recore.Optional-1.html#Recore_Optional_1_Switch_Action__0__Action_
  commentId: M:Recore.Optional`1.Switch(Action{`0},Action)
  name.vb: Switch(Action(Of T), Action)
  fullName: Recore.Optional<T>.Switch(Action<T>, Action)
  fullName.vb: Recore.Optional(Of T).Switch(Action(Of T), Action)
  nameWithType: Optional<T>.Switch(Action<T>, Action)
  nameWithType.vb: Optional(Of T).Switch(Action(Of T), Action)
- uid: Recore.Optional`1.Switch*
  name: Switch
  href: api/Recore.Optional-1.html#Recore_Optional_1_Switch_
  commentId: Overload:Recore.Optional`1.Switch
  isSpec: "True"
  fullName: Recore.Optional<T>.Switch
  fullName.vb: Recore.Optional(Of T).Switch
  nameWithType: Optional<T>.Switch
  nameWithType.vb: Optional(Of T).Switch
- uid: Recore.Optional`1.Switch``1(Recore.Func{`0,``0},Recore.Func{``0})
  name: Switch<U>(Func<T, U>, Func<U>)
  href: api/Recore.Optional-1.html#Recore_Optional_1_Switch__1_Recore_Func__0___0__Recore_Func___0__
  commentId: M:Recore.Optional`1.Switch``1(Recore.Func{`0,``0},Recore.Func{``0})
  name.vb: Switch(Of U)(Func(Of T, U), Func(Of U))
  fullName: Recore.Optional<T>.Switch<U>(Recore.Func<T, U>, Recore.Func<U>)
  fullName.vb: Recore.Optional(Of T).Switch(Of U)(Recore.Func(Of T, U), Recore.Func(Of U))
  nameWithType: Optional<T>.Switch<U>(Func<T, U>, Func<U>)
  nameWithType.vb: Optional(Of T).Switch(Of U)(Func(Of T, U), Func(Of U))
- uid: Recore.Optional`1.Then*
  name: Then
  href: api/Recore.Optional-1.html#Recore_Optional_1_Then_
  commentId: Overload:Recore.Optional`1.Then
  isSpec: "True"
  fullName: Recore.Optional<T>.Then
  fullName.vb: Recore.Optional(Of T).Then
  nameWithType: Optional<T>.Then
  nameWithType.vb: Optional(Of T).Then
- uid: Recore.Optional`1.Then``1(Recore.Func{`0,Recore.Optional{``0}})
  name: Then<U>(Func<T, Optional<U>>)
  href: api/Recore.Optional-1.html#Recore_Optional_1_Then__1_Recore_Func__0_Recore_Optional___0___
  commentId: M:Recore.Optional`1.Then``1(Recore.Func{`0,Recore.Optional{``0}})
  name.vb: Then(Of U)(Func(Of T, Optional(Of U)))
  fullName: Recore.Optional<T>.Then<U>(Recore.Func<T, Recore.Optional<U>>)
  fullName.vb: Recore.Optional(Of T).Then(Of U)(Recore.Func(Of T, Recore.Optional(Of U)))
  nameWithType: Optional<T>.Then<U>(Func<T, Optional<U>>)
  nameWithType.vb: Optional(Of T).Then(Of U)(Func(Of T, Optional(Of U)))
- uid: Recore.Optional`1.ToEnumerable
  name: ToEnumerable()
  href: api/Recore.Optional-1.html#Recore_Optional_1_ToEnumerable
  commentId: M:Recore.Optional`1.ToEnumerable
  fullName: Recore.Optional<T>.ToEnumerable()
  fullName.vb: Recore.Optional(Of T).ToEnumerable()
  nameWithType: Optional<T>.ToEnumerable()
  nameWithType.vb: Optional(Of T).ToEnumerable()
- uid: Recore.Optional`1.ToEnumerable*
  name: ToEnumerable
  href: api/Recore.Optional-1.html#Recore_Optional_1_ToEnumerable_
  commentId: Overload:Recore.Optional`1.ToEnumerable
  isSpec: "True"
  fullName: Recore.Optional<T>.ToEnumerable
  fullName.vb: Recore.Optional(Of T).ToEnumerable
  nameWithType: Optional<T>.ToEnumerable
  nameWithType.vb: Optional(Of T).ToEnumerable
- uid: Recore.Optional`1.ToString
  name: ToString()
  href: api/Recore.Optional-1.html#Recore_Optional_1_ToString
  commentId: M:Recore.Optional`1.ToString
  fullName: Recore.Optional<T>.ToString()
  fullName.vb: Recore.Optional(Of T).ToString()
  nameWithType: Optional<T>.ToString()
  nameWithType.vb: Optional(Of T).ToString()
- uid: Recore.Optional`1.ToString*
  name: ToString
  href: api/Recore.Optional-1.html#Recore_Optional_1_ToString_
  commentId: Overload:Recore.Optional`1.ToString
  isSpec: "True"
  fullName: Recore.Optional<T>.ToString
  fullName.vb: Recore.Optional(Of T).ToString
  nameWithType: Optional<T>.ToString
  nameWithType.vb: Optional(Of T).ToString
- uid: Recore.Optional`1.ValueOr(`0)
  name: ValueOr(T)
  href: api/Recore.Optional-1.html#Recore_Optional_1_ValueOr__0_
  commentId: M:Recore.Optional`1.ValueOr(`0)
  fullName: Recore.Optional<T>.ValueOr(T)
  fullName.vb: Recore.Optional(Of T).ValueOr(T)
  nameWithType: Optional<T>.ValueOr(T)
  nameWithType.vb: Optional(Of T).ValueOr(T)
- uid: Recore.Optional`1.ValueOr*
  name: ValueOr
  href: api/Recore.Optional-1.html#Recore_Optional_1_ValueOr_
  commentId: Overload:Recore.Optional`1.ValueOr
  isSpec: "True"
  fullName: Recore.Optional<T>.ValueOr
  fullName.vb: Recore.Optional(Of T).ValueOr
  nameWithType: Optional<T>.ValueOr
  nameWithType.vb: Optional(Of T).ValueOr
- uid: Recore.Pipeline
  name: Pipeline
  href: api/Recore.Pipeline.html
  commentId: T:Recore.Pipeline
  fullName: Recore.Pipeline
  nameWithType: Pipeline
- uid: Recore.Pipeline.Of*
  name: Of
  href: api/Recore.Pipeline.html#Recore_Pipeline_Of_
  commentId: Overload:Recore.Pipeline.Of
  isSpec: "True"
  fullName: Recore.Pipeline.Of
  nameWithType: Pipeline.Of
- uid: Recore.Pipeline.Of``1(``0)
  name: Of<T>(T)
  href: api/Recore.Pipeline.html#Recore_Pipeline_Of__1___0_
  commentId: M:Recore.Pipeline.Of``1(``0)
  name.vb: Of(Of T)(T)
  fullName: Recore.Pipeline.Of<T>(T)
  fullName.vb: Recore.Pipeline.Of(Of T)(T)
  nameWithType: Pipeline.Of<T>(T)
  nameWithType.vb: Pipeline.Of(Of T)(T)
- uid: Recore.Pipeline`1
  name: Pipeline<T>
  href: api/Recore.Pipeline-1.html
  commentId: T:Recore.Pipeline`1
  name.vb: Pipeline(Of T)
  fullName: Recore.Pipeline<T>
  fullName.vb: Recore.Pipeline(Of T)
  nameWithType: Pipeline<T>
  nameWithType.vb: Pipeline(Of T)
- uid: Recore.Pipeline`1.#ctor(`0)
  name: Pipeline(T)
  href: api/Recore.Pipeline-1.html#Recore_Pipeline_1__ctor__0_
  commentId: M:Recore.Pipeline`1.#ctor(`0)
  fullName: Recore.Pipeline<T>.Pipeline(T)
  fullName.vb: Recore.Pipeline(Of T).Pipeline(T)
  nameWithType: Pipeline<T>.Pipeline(T)
  nameWithType.vb: Pipeline(Of T).Pipeline(T)
- uid: Recore.Pipeline`1.#ctor*
  name: Pipeline
  href: api/Recore.Pipeline-1.html#Recore_Pipeline_1__ctor_
  commentId: Overload:Recore.Pipeline`1.#ctor
  isSpec: "True"
  fullName: Recore.Pipeline<T>.Pipeline
  fullName.vb: Recore.Pipeline(Of T).Pipeline
  nameWithType: Pipeline<T>.Pipeline
  nameWithType.vb: Pipeline(Of T).Pipeline
- uid: Recore.Pipeline`1.Result
  name: Result
  href: api/Recore.Pipeline-1.html#Recore_Pipeline_1_Result
  commentId: P:Recore.Pipeline`1.Result
  fullName: Recore.Pipeline<T>.Result
  fullName.vb: Recore.Pipeline(Of T).Result
  nameWithType: Pipeline<T>.Result
  nameWithType.vb: Pipeline(Of T).Result
- uid: Recore.Pipeline`1.Result*
  name: Result
  href: api/Recore.Pipeline-1.html#Recore_Pipeline_1_Result_
  commentId: Overload:Recore.Pipeline`1.Result
  isSpec: "True"
  fullName: Recore.Pipeline<T>.Result
  fullName.vb: Recore.Pipeline(Of T).Result
  nameWithType: Pipeline<T>.Result
  nameWithType.vb: Pipeline(Of T).Result
- uid: Recore.Pipeline`1.Then(Action{`0})
  name: Then(Action<T>)
  href: api/Recore.Pipeline-1.html#Recore_Pipeline_1_Then_Action__0__
  commentId: M:Recore.Pipeline`1.Then(Action{`0})
  name.vb: Then(Action(Of T))
  fullName: Recore.Pipeline<T>.Then(Action<T>)
  fullName.vb: Recore.Pipeline(Of T).Then(Action(Of T))
  nameWithType: Pipeline<T>.Then(Action<T>)
  nameWithType.vb: Pipeline(Of T).Then(Action(Of T))
- uid: Recore.Pipeline`1.Then*
  name: Then
  href: api/Recore.Pipeline-1.html#Recore_Pipeline_1_Then_
  commentId: Overload:Recore.Pipeline`1.Then
  isSpec: "True"
  fullName: Recore.Pipeline<T>.Then
  fullName.vb: Recore.Pipeline(Of T).Then
  nameWithType: Pipeline<T>.Then
  nameWithType.vb: Pipeline(Of T).Then
- uid: Recore.Pipeline`1.Then``1(Recore.Func{`0,``0})
  name: Then<U>(Func<T, U>)
  href: api/Recore.Pipeline-1.html#Recore_Pipeline_1_Then__1_Recore_Func__0___0__
  commentId: M:Recore.Pipeline`1.Then``1(Recore.Func{`0,``0})
  name.vb: Then(Of U)(Func(Of T, U))
  fullName: Recore.Pipeline<T>.Then<U>(Recore.Func<T, U>)
  fullName.vb: Recore.Pipeline(Of T).Then(Of U)(Recore.Func(Of T, U))
  nameWithType: Pipeline<T>.Then<U>(Func<T, U>)
  nameWithType.vb: Pipeline(Of T).Then(Of U)(Func(Of T, U))
- uid: Recore.RelativeUri
  name: RelativeUri
  href: api/Recore.RelativeUri.html
  commentId: T:Recore.RelativeUri
  fullName: Recore.RelativeUri
  nameWithType: RelativeUri
- uid: Recore.RelativeUri.#ctor(System.String)
  name: RelativeUri(String)
  href: api/Recore.RelativeUri.html#Recore_RelativeUri__ctor_System_String_
  commentId: M:Recore.RelativeUri.#ctor(System.String)
  fullName: Recore.RelativeUri.RelativeUri(System.String)
  nameWithType: RelativeUri.RelativeUri(String)
- uid: Recore.RelativeUri.#ctor*
  name: RelativeUri
  href: api/Recore.RelativeUri.html#Recore_RelativeUri__ctor_
  commentId: Overload:Recore.RelativeUri.#ctor
  isSpec: "True"
  fullName: Recore.RelativeUri.RelativeUri
  nameWithType: RelativeUri.RelativeUri
- uid: Recore.RelativeUri.Combine(Recore.RelativeUri)
  name: Combine(RelativeUri)
  href: api/Recore.RelativeUri.html#Recore_RelativeUri_Combine_Recore_RelativeUri_
  commentId: M:Recore.RelativeUri.Combine(Recore.RelativeUri)
  fullName: Recore.RelativeUri.Combine(Recore.RelativeUri)
  nameWithType: RelativeUri.Combine(RelativeUri)
- uid: Recore.RelativeUri.Combine(System.String)
  name: Combine(String)
  href: api/Recore.RelativeUri.html#Recore_RelativeUri_Combine_System_String_
  commentId: M:Recore.RelativeUri.Combine(System.String)
  fullName: Recore.RelativeUri.Combine(System.String)
  nameWithType: RelativeUri.Combine(String)
- uid: Recore.RelativeUri.Combine*
  name: Combine
  href: api/Recore.RelativeUri.html#Recore_RelativeUri_Combine_
  commentId: Overload:Recore.RelativeUri.Combine
  isSpec: "True"
  fullName: Recore.RelativeUri.Combine
  nameWithType: RelativeUri.Combine
- uid: Recore.Result
  name: Result
  href: api/Recore.Result.html
  commentId: T:Recore.Result
  fullName: Recore.Result
  nameWithType: Result
- uid: Recore.Result.AsyncCatcher`1
  name: Result.AsyncCatcher<TValue>
  href: api/Recore.Result.AsyncCatcher-1.html
  commentId: T:Recore.Result.AsyncCatcher`1
  name.vb: Result.AsyncCatcher(Of TValue)
  fullName: Recore.Result.AsyncCatcher<TValue>
  fullName.vb: Recore.Result.AsyncCatcher(Of TValue)
  nameWithType: Result.AsyncCatcher<TValue>
  nameWithType.vb: Result.AsyncCatcher(Of TValue)
- uid: Recore.Result.AsyncCatcher`1.CatchAsync*
  name: CatchAsync
  href: api/Recore.Result.AsyncCatcher-1.html#Recore_Result_AsyncCatcher_1_CatchAsync_
  commentId: Overload:Recore.Result.AsyncCatcher`1.CatchAsync
  isSpec: "True"
  fullName: Recore.Result.AsyncCatcher<TValue>.CatchAsync
  fullName.vb: Recore.Result.AsyncCatcher(Of TValue).CatchAsync
  nameWithType: Result.AsyncCatcher<TValue>.CatchAsync
  nameWithType.vb: Result.AsyncCatcher(Of TValue).CatchAsync
- uid: Recore.Result.AsyncCatcher`1.CatchAsync``1
  name: CatchAsync<TException>()
  href: api/Recore.Result.AsyncCatcher-1.html#Recore_Result_AsyncCatcher_1_CatchAsync__1
  commentId: M:Recore.Result.AsyncCatcher`1.CatchAsync``1
  name.vb: CatchAsync(Of TException)()
  fullName: Recore.Result.AsyncCatcher<TValue>.CatchAsync<TException>()
  fullName.vb: Recore.Result.AsyncCatcher(Of TValue).CatchAsync(Of TException)()
  nameWithType: Result.AsyncCatcher<TValue>.CatchAsync<TException>()
  nameWithType.vb: Result.AsyncCatcher(Of TValue).CatchAsync(Of TException)()
- uid: Recore.Result.AsyncCatcher`1.CatchAsync``2(Recore.AsyncFunc{``0,``1})
  name: CatchAsync<TException, TResult>(AsyncFunc<TException, TResult>)
  href: api/Recore.Result.AsyncCatcher-1.html#Recore_Result_AsyncCatcher_1_CatchAsync__2_Recore_AsyncFunc___0___1__
  commentId: M:Recore.Result.AsyncCatcher`1.CatchAsync``2(Recore.AsyncFunc{``0,``1})
  name.vb: CatchAsync(Of TException, TResult)(AsyncFunc(Of TException, TResult))
  fullName: Recore.Result.AsyncCatcher<TValue>.CatchAsync<TException, TResult>(Recore.AsyncFunc<TException, TResult>)
  fullName.vb: Recore.Result.AsyncCatcher(Of TValue).CatchAsync(Of TException, TResult)(Recore.AsyncFunc(Of TException, TResult))
  nameWithType: Result.AsyncCatcher<TValue>.CatchAsync<TException, TResult>(AsyncFunc<TException, TResult>)
  nameWithType.vb: Result.AsyncCatcher(Of TValue).CatchAsync(Of TException, TResult)(AsyncFunc(Of TException, TResult))
- uid: Recore.Result.Catcher`1
  name: Result.Catcher<TValue>
  href: api/Recore.Result.Catcher-1.html
  commentId: T:Recore.Result.Catcher`1
  name.vb: Result.Catcher(Of TValue)
  fullName: Recore.Result.Catcher<TValue>
  fullName.vb: Recore.Result.Catcher(Of TValue)
  nameWithType: Result.Catcher<TValue>
  nameWithType.vb: Result.Catcher(Of TValue)
- uid: Recore.Result.Catcher`1.Catch*
  name: Catch
  href: api/Recore.Result.Catcher-1.html#Recore_Result_Catcher_1_Catch_
  commentId: Overload:Recore.Result.Catcher`1.Catch
  isSpec: "True"
  fullName: Recore.Result.Catcher<TValue>.Catch
  fullName.vb: Recore.Result.Catcher(Of TValue).Catch
  nameWithType: Result.Catcher<TValue>.Catch
  nameWithType.vb: Result.Catcher(Of TValue).Catch
- uid: Recore.Result.Catcher`1.Catch``1
  name: Catch<TException>()
  href: api/Recore.Result.Catcher-1.html#Recore_Result_Catcher_1_Catch__1
  commentId: M:Recore.Result.Catcher`1.Catch``1
  name.vb: Catch(Of TException)()
  fullName: Recore.Result.Catcher<TValue>.Catch<TException>()
  fullName.vb: Recore.Result.Catcher(Of TValue).Catch(Of TException)()
  nameWithType: Result.Catcher<TValue>.Catch<TException>()
  nameWithType.vb: Result.Catcher(Of TValue).Catch(Of TException)()
- uid: Recore.Result.Catcher`1.Catch``2(Recore.Func{``0,``1})
  name: Catch<TException, TMapped>(Func<TException, TMapped>)
  href: api/Recore.Result.Catcher-1.html#Recore_Result_Catcher_1_Catch__2_Recore_Func___0___1__
  commentId: M:Recore.Result.Catcher`1.Catch``2(Recore.Func{``0,``1})
  name.vb: Catch(Of TException, TMapped)(Func(Of TException, TMapped))
  fullName: Recore.Result.Catcher<TValue>.Catch<TException, TMapped>(Recore.Func<TException, TMapped>)
  fullName.vb: Recore.Result.Catcher(Of TValue).Catch(Of TException, TMapped)(Recore.Func(Of TException, TMapped))
  nameWithType: Result.Catcher<TValue>.Catch<TException, TMapped>(Func<TException, TMapped>)
  nameWithType.vb: Result.Catcher(Of TValue).Catch(Of TException, TMapped)(Func(Of TException, TMapped))
- uid: Recore.Result.Failure*
  name: Failure
  href: api/Recore.Result.html#Recore_Result_Failure_
  commentId: Overload:Recore.Result.Failure
  isSpec: "True"
  fullName: Recore.Result.Failure
  nameWithType: Result.Failure
- uid: Recore.Result.Failure``2(``1)
  name: Failure<TValue, TError>(TError)
  href: api/Recore.Result.html#Recore_Result_Failure__2___1_
  commentId: M:Recore.Result.Failure``2(``1)
  name.vb: Failure(Of TValue, TError)(TError)
  fullName: Recore.Result.Failure<TValue, TError>(TError)
  fullName.vb: Recore.Result.Failure(Of TValue, TError)(TError)
  nameWithType: Result.Failure<TValue, TError>(TError)
  nameWithType.vb: Result.Failure(Of TValue, TError)(TError)
- uid: Recore.Result.Failures*
  name: Failures
  href: api/Recore.Result.html#Recore_Result_Failures_
  commentId: Overload:Recore.Result.Failures
  isSpec: "True"
  fullName: Recore.Result.Failures
  nameWithType: Result.Failures
- uid: Recore.Result.Failures``2(IEnumerable{Recore.Result{``0,``1}})
  name: Failures<TValue, TError>(IEnumerable<Result<TValue, TError>>)
  href: api/Recore.Result.html#Recore_Result_Failures__2_IEnumerable_Recore_Result___0___1___
  commentId: M:Recore.Result.Failures``2(IEnumerable{Recore.Result{``0,``1}})
  name.vb: Failures(Of TValue, TError)(IEnumerable(Of Result(Of TValue, TError)))
  fullName: Recore.Result.Failures<TValue, TError>(IEnumerable<Recore.Result<TValue, TError>>)
  fullName.vb: Recore.Result.Failures(Of TValue, TError)(IEnumerable(Of Recore.Result(Of TValue, TError)))
  nameWithType: Result.Failures<TValue, TError>(IEnumerable<Result<TValue, TError>>)
  nameWithType.vb: Result.Failures(Of TValue, TError)(IEnumerable(Of Result(Of TValue, TError)))
- uid: Recore.Result.Flatten*
  name: Flatten
  href: api/Recore.Result.html#Recore_Result_Flatten_
  commentId: Overload:Recore.Result.Flatten
  isSpec: "True"
  fullName: Recore.Result.Flatten
  nameWithType: Result.Flatten
- uid: Recore.Result.Flatten``2(Recore.Result{Recore.Result{``0,``1},``1})
  name: Flatten<TValue, TError>(Result<Result<TValue, TError>, TError>)
  href: api/Recore.Result.html#Recore_Result_Flatten__2_Recore_Result_Recore_Result___0___1____1__
  commentId: M:Recore.Result.Flatten``2(Recore.Result{Recore.Result{``0,``1},``1})
  name.vb: Flatten(Of TValue, TError)(Result(Of Result(Of TValue, TError), TError))
  fullName: Recore.Result.Flatten<TValue, TError>(Recore.Result<Recore.Result<TValue, TError>, TError>)
  fullName.vb: Recore.Result.Flatten(Of TValue, TError)(Recore.Result(Of Recore.Result(Of TValue, TError), TError))
  nameWithType: Result.Flatten<TValue, TError>(Result<Result<TValue, TError>, TError>)
  nameWithType.vb: Result.Flatten(Of TValue, TError)(Result(Of Result(Of TValue, TError), TError))
- uid: Recore.Result.Success*
  name: Success
  href: api/Recore.Result.html#Recore_Result_Success_
  commentId: Overload:Recore.Result.Success
  isSpec: "True"
  fullName: Recore.Result.Success
  nameWithType: Result.Success
- uid: Recore.Result.Success``2(``0)
  name: Success<TValue, TError>(TValue)
  href: api/Recore.Result.html#Recore_Result_Success__2___0_
  commentId: M:Recore.Result.Success``2(``0)
  name.vb: Success(Of TValue, TError)(TValue)
  fullName: Recore.Result.Success<TValue, TError>(TValue)
  fullName.vb: Recore.Result.Success(Of TValue, TError)(TValue)
  nameWithType: Result.Success<TValue, TError>(TValue)
  nameWithType.vb: Result.Success(Of TValue, TError)(TValue)
- uid: Recore.Result.Successes*
  name: Successes
  href: api/Recore.Result.html#Recore_Result_Successes_
  commentId: Overload:Recore.Result.Successes
  isSpec: "True"
  fullName: Recore.Result.Successes
  nameWithType: Result.Successes
- uid: Recore.Result.Successes``2(IEnumerable{Recore.Result{``0,``1}})
  name: Successes<TValue, TError>(IEnumerable<Result<TValue, TError>>)
  href: api/Recore.Result.html#Recore_Result_Successes__2_IEnumerable_Recore_Result___0___1___
  commentId: M:Recore.Result.Successes``2(IEnumerable{Recore.Result{``0,``1}})
  name.vb: Successes(Of TValue, TError)(IEnumerable(Of Result(Of TValue, TError)))
  fullName: Recore.Result.Successes<TValue, TError>(IEnumerable<Recore.Result<TValue, TError>>)
  fullName.vb: Recore.Result.Successes(Of TValue, TError)(IEnumerable(Of Recore.Result(Of TValue, TError)))
  nameWithType: Result.Successes<TValue, TError>(IEnumerable<Result<TValue, TError>>)
  nameWithType.vb: Result.Successes(Of TValue, TError)(IEnumerable(Of Result(Of TValue, TError)))
- uid: Recore.Result.Try*
  name: Try
  href: api/Recore.Result.html#Recore_Result_Try_
  commentId: Overload:Recore.Result.Try
  isSpec: "True"
  fullName: Recore.Result.Try
  nameWithType: Result.Try
- uid: Recore.Result.Try``1(Recore.Func{``0})
  name: Try<TValue>(Func<TValue>)
  href: api/Recore.Result.html#Recore_Result_Try__1_Recore_Func___0__
  commentId: M:Recore.Result.Try``1(Recore.Func{``0})
  name.vb: Try(Of TValue)(Func(Of TValue))
  fullName: Recore.Result.Try<TValue>(Recore.Func<TValue>)
  fullName.vb: Recore.Result.Try(Of TValue)(Recore.Func(Of TValue))
  nameWithType: Result.Try<TValue>(Func<TValue>)
  nameWithType.vb: Result.Try(Of TValue)(Func(Of TValue))
- uid: Recore.Result.TryAsync*
  name: TryAsync
  href: api/Recore.Result.html#Recore_Result_TryAsync_
  commentId: Overload:Recore.Result.TryAsync
  isSpec: "True"
  fullName: Recore.Result.TryAsync
  nameWithType: Result.TryAsync
- uid: Recore.Result.TryAsync``1(Recore.AsyncFunc{``0})
  name: TryAsync<TValue>(AsyncFunc<TValue>)
  href: api/Recore.Result.html#Recore_Result_TryAsync__1_Recore_AsyncFunc___0__
  commentId: M:Recore.Result.TryAsync``1(Recore.AsyncFunc{``0})
  name.vb: TryAsync(Of TValue)(AsyncFunc(Of TValue))
  fullName: Recore.Result.TryAsync<TValue>(Recore.AsyncFunc<TValue>)
  fullName.vb: Recore.Result.TryAsync(Of TValue)(Recore.AsyncFunc(Of TValue))
  nameWithType: Result.TryAsync<TValue>(AsyncFunc<TValue>)
  nameWithType.vb: Result.TryAsync(Of TValue)(AsyncFunc(Of TValue))
- uid: Recore.Result`2
  name: Result<TValue, TError>
  href: api/Recore.Result-2.html
  commentId: T:Recore.Result`2
  name.vb: Result(Of TValue, TError)
  fullName: Recore.Result<TValue, TError>
  fullName.vb: Recore.Result(Of TValue, TError)
  nameWithType: Result<TValue, TError>
  nameWithType.vb: Result(Of TValue, TError)
- uid: Recore.Result`2.#ctor(`0)
  name: Result(TValue)
  href: api/Recore.Result-2.html#Recore_Result_2__ctor__0_
  commentId: M:Recore.Result`2.#ctor(`0)
  fullName: Recore.Result<TValue, TError>.Result(TValue)
  fullName.vb: Recore.Result(Of TValue, TError).Result(TValue)
  nameWithType: Result<TValue, TError>.Result(TValue)
  nameWithType.vb: Result(Of TValue, TError).Result(TValue)
- uid: Recore.Result`2.#ctor(`1)
  name: Result(TError)
  href: api/Recore.Result-2.html#Recore_Result_2__ctor__1_
  commentId: M:Recore.Result`2.#ctor(`1)
  fullName: Recore.Result<TValue, TError>.Result(TError)
  fullName.vb: Recore.Result(Of TValue, TError).Result(TError)
  nameWithType: Result<TValue, TError>.Result(TError)
  nameWithType.vb: Result(Of TValue, TError).Result(TError)
- uid: Recore.Result`2.#ctor*
  name: Result
  href: api/Recore.Result-2.html#Recore_Result_2__ctor_
  commentId: Overload:Recore.Result`2.#ctor
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.Result
  fullName.vb: Recore.Result(Of TValue, TError).Result
  nameWithType: Result<TValue, TError>.Result
  nameWithType.vb: Result(Of TValue, TError).Result
- uid: Recore.Result`2.Equals(Recore.Result{`0,`1})
  name: Equals(Result<TValue, TError>)
  href: api/Recore.Result-2.html#Recore_Result_2_Equals_Recore_Result__0__1__
  commentId: M:Recore.Result`2.Equals(Recore.Result{`0,`1})
  name.vb: Equals(Result(Of TValue, TError))
  fullName: Recore.Result<TValue, TError>.Equals(Recore.Result<TValue, TError>)
  fullName.vb: Recore.Result(Of TValue, TError).Equals(Recore.Result(Of TValue, TError))
  nameWithType: Result<TValue, TError>.Equals(Result<TValue, TError>)
  nameWithType.vb: Result(Of TValue, TError).Equals(Result(Of TValue, TError))
- uid: Recore.Result`2.Equals(System.Object)
  name: Equals(Object)
  href: api/Recore.Result-2.html#Recore_Result_2_Equals_System_Object_
  commentId: M:Recore.Result`2.Equals(System.Object)
  fullName: Recore.Result<TValue, TError>.Equals(System.Object)
  fullName.vb: Recore.Result(Of TValue, TError).Equals(System.Object)
  nameWithType: Result<TValue, TError>.Equals(Object)
  nameWithType.vb: Result(Of TValue, TError).Equals(Object)
- uid: Recore.Result`2.Equals*
  name: Equals
  href: api/Recore.Result-2.html#Recore_Result_2_Equals_
  commentId: Overload:Recore.Result`2.Equals
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.Equals
  fullName.vb: Recore.Result(Of TValue, TError).Equals
  nameWithType: Result<TValue, TError>.Equals
  nameWithType.vb: Result(Of TValue, TError).Equals
- uid: Recore.Result`2.GetError
  name: GetError()
  href: api/Recore.Result-2.html#Recore_Result_2_GetError
  commentId: M:Recore.Result`2.GetError
  fullName: Recore.Result<TValue, TError>.GetError()
  fullName.vb: Recore.Result(Of TValue, TError).GetError()
  nameWithType: Result<TValue, TError>.GetError()
  nameWithType.vb: Result(Of TValue, TError).GetError()
- uid: Recore.Result`2.GetError*
  name: GetError
  href: api/Recore.Result-2.html#Recore_Result_2_GetError_
  commentId: Overload:Recore.Result`2.GetError
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.GetError
  fullName.vb: Recore.Result(Of TValue, TError).GetError
  nameWithType: Result<TValue, TError>.GetError
  nameWithType.vb: Result(Of TValue, TError).GetError
- uid: Recore.Result`2.GetHashCode
  name: GetHashCode()
  href: api/Recore.Result-2.html#Recore_Result_2_GetHashCode
  commentId: M:Recore.Result`2.GetHashCode
  fullName: Recore.Result<TValue, TError>.GetHashCode()
  fullName.vb: Recore.Result(Of TValue, TError).GetHashCode()
  nameWithType: Result<TValue, TError>.GetHashCode()
  nameWithType.vb: Result(Of TValue, TError).GetHashCode()
- uid: Recore.Result`2.GetHashCode*
  name: GetHashCode
  href: api/Recore.Result-2.html#Recore_Result_2_GetHashCode_
  commentId: Overload:Recore.Result`2.GetHashCode
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.GetHashCode
  fullName.vb: Recore.Result(Of TValue, TError).GetHashCode
  nameWithType: Result<TValue, TError>.GetHashCode
  nameWithType.vb: Result(Of TValue, TError).GetHashCode
- uid: Recore.Result`2.GetValue
  name: GetValue()
  href: api/Recore.Result-2.html#Recore_Result_2_GetValue
  commentId: M:Recore.Result`2.GetValue
  fullName: Recore.Result<TValue, TError>.GetValue()
  fullName.vb: Recore.Result(Of TValue, TError).GetValue()
  nameWithType: Result<TValue, TError>.GetValue()
  nameWithType.vb: Result(Of TValue, TError).GetValue()
- uid: Recore.Result`2.GetValue*
  name: GetValue
  href: api/Recore.Result-2.html#Recore_Result_2_GetValue_
  commentId: Overload:Recore.Result`2.GetValue
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.GetValue
  fullName.vb: Recore.Result(Of TValue, TError).GetValue
  nameWithType: Result<TValue, TError>.GetValue
  nameWithType.vb: Result(Of TValue, TError).GetValue
- uid: Recore.Result`2.IfError(Action{`1})
  name: IfError(Action<TError>)
  href: api/Recore.Result-2.html#Recore_Result_2_IfError_Action__1__
  commentId: M:Recore.Result`2.IfError(Action{`1})
  name.vb: IfError(Action(Of TError))
  fullName: Recore.Result<TValue, TError>.IfError(Action<TError>)
  fullName.vb: Recore.Result(Of TValue, TError).IfError(Action(Of TError))
  nameWithType: Result<TValue, TError>.IfError(Action<TError>)
  nameWithType.vb: Result(Of TValue, TError).IfError(Action(Of TError))
- uid: Recore.Result`2.IfError*
  name: IfError
  href: api/Recore.Result-2.html#Recore_Result_2_IfError_
  commentId: Overload:Recore.Result`2.IfError
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.IfError
  fullName.vb: Recore.Result(Of TValue, TError).IfError
  nameWithType: Result<TValue, TError>.IfError
  nameWithType.vb: Result(Of TValue, TError).IfError
- uid: Recore.Result`2.IfValue(Action{`0})
  name: IfValue(Action<TValue>)
  href: api/Recore.Result-2.html#Recore_Result_2_IfValue_Action__0__
  commentId: M:Recore.Result`2.IfValue(Action{`0})
  name.vb: IfValue(Action(Of TValue))
  fullName: Recore.Result<TValue, TError>.IfValue(Action<TValue>)
  fullName.vb: Recore.Result(Of TValue, TError).IfValue(Action(Of TValue))
  nameWithType: Result<TValue, TError>.IfValue(Action<TValue>)
  nameWithType.vb: Result(Of TValue, TError).IfValue(Action(Of TValue))
- uid: Recore.Result`2.IfValue*
  name: IfValue
  href: api/Recore.Result-2.html#Recore_Result_2_IfValue_
  commentId: Overload:Recore.Result`2.IfValue
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.IfValue
  fullName.vb: Recore.Result(Of TValue, TError).IfValue
  nameWithType: Result<TValue, TError>.IfValue
  nameWithType.vb: Result(Of TValue, TError).IfValue
- uid: Recore.Result`2.IsSuccessful
  name: IsSuccessful
  href: api/Recore.Result-2.html#Recore_Result_2_IsSuccessful
  commentId: P:Recore.Result`2.IsSuccessful
  fullName: Recore.Result<TValue, TError>.IsSuccessful
  fullName.vb: Recore.Result(Of TValue, TError).IsSuccessful
  nameWithType: Result<TValue, TError>.IsSuccessful
  nameWithType.vb: Result(Of TValue, TError).IsSuccessful
- uid: Recore.Result`2.IsSuccessful*
  name: IsSuccessful
  href: api/Recore.Result-2.html#Recore_Result_2_IsSuccessful_
  commentId: Overload:Recore.Result`2.IsSuccessful
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.IsSuccessful
  fullName.vb: Recore.Result(Of TValue, TError).IsSuccessful
  nameWithType: Result<TValue, TError>.IsSuccessful
  nameWithType.vb: Result(Of TValue, TError).IsSuccessful
- uid: Recore.Result`2.OnError*
  name: OnError
  href: api/Recore.Result-2.html#Recore_Result_2_OnError_
  commentId: Overload:Recore.Result`2.OnError
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.OnError
  fullName.vb: Recore.Result(Of TValue, TError).OnError
  nameWithType: Result<TValue, TError>.OnError
  nameWithType.vb: Result(Of TValue, TError).OnError
- uid: Recore.Result`2.OnError``1(Recore.Func{`1,``0})
  name: OnError<TResult>(Func<TError, TResult>)
  href: api/Recore.Result-2.html#Recore_Result_2_OnError__1_Recore_Func__1___0__
  commentId: M:Recore.Result`2.OnError``1(Recore.Func{`1,``0})
  name.vb: OnError(Of TResult)(Func(Of TError, TResult))
  fullName: Recore.Result<TValue, TError>.OnError<TResult>(Recore.Func<TError, TResult>)
  fullName.vb: Recore.Result(Of TValue, TError).OnError(Of TResult)(Recore.Func(Of TError, TResult))
  nameWithType: Result<TValue, TError>.OnError<TResult>(Func<TError, TResult>)
  nameWithType.vb: Result(Of TValue, TError).OnError(Of TResult)(Func(Of TError, TResult))
- uid: Recore.Result`2.OnValue*
  name: OnValue
  href: api/Recore.Result-2.html#Recore_Result_2_OnValue_
  commentId: Overload:Recore.Result`2.OnValue
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.OnValue
  fullName.vb: Recore.Result(Of TValue, TError).OnValue
  nameWithType: Result<TValue, TError>.OnValue
  nameWithType.vb: Result(Of TValue, TError).OnValue
- uid: Recore.Result`2.OnValue``1(Recore.Func{`0,``0})
  name: OnValue<TResult>(Func<TValue, TResult>)
  href: api/Recore.Result-2.html#Recore_Result_2_OnValue__1_Recore_Func__0___0__
  commentId: M:Recore.Result`2.OnValue``1(Recore.Func{`0,``0})
  name.vb: OnValue(Of TResult)(Func(Of TValue, TResult))
  fullName: Recore.Result<TValue, TError>.OnValue<TResult>(Recore.Func<TValue, TResult>)
  fullName.vb: Recore.Result(Of TValue, TError).OnValue(Of TResult)(Recore.Func(Of TValue, TResult))
  nameWithType: Result<TValue, TError>.OnValue<TResult>(Func<TValue, TResult>)
  nameWithType.vb: Result(Of TValue, TError).OnValue(Of TResult)(Func(Of TValue, TResult))
- uid: Recore.Result`2.op_Equality(Recore.Result{`0,`1},Recore.Result{`0,`1})
  name: Equality(Result<TValue, TError>, Result<TValue, TError>)
  href: api/Recore.Result-2.html#Recore_Result_2_op_Equality_Recore_Result__0__1__Recore_Result__0__1__
  commentId: M:Recore.Result`2.op_Equality(Recore.Result{`0,`1},Recore.Result{`0,`1})
  name.vb: Equality(Result(Of TValue, TError), Result(Of TValue, TError))
  fullName: Recore.Result<TValue, TError>.Equality(Recore.Result<TValue, TError>, Recore.Result<TValue, TError>)
  fullName.vb: Recore.Result(Of TValue, TError).Equality(Recore.Result(Of TValue, TError), Recore.Result(Of TValue, TError))
  nameWithType: Result<TValue, TError>.Equality(Result<TValue, TError>, Result<TValue, TError>)
  nameWithType.vb: Result(Of TValue, TError).Equality(Result(Of TValue, TError), Result(Of TValue, TError))
- uid: Recore.Result`2.op_Equality*
  name: Equality
  href: api/Recore.Result-2.html#Recore_Result_2_op_Equality_
  commentId: Overload:Recore.Result`2.op_Equality
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.Equality
  fullName.vb: Recore.Result(Of TValue, TError).Equality
  nameWithType: Result<TValue, TError>.Equality
  nameWithType.vb: Result(Of TValue, TError).Equality
- uid: Recore.Result`2.op_Implicit(`0)~Recore.Result{`0,`1}
  name: Implicit(TValue to Result<TValue, TError>)
  href: api/Recore.Result-2.html#Recore_Result_2_op_Implicit__0__Recore_Result__0__1_
  commentId: M:Recore.Result`2.op_Implicit(`0)~Recore.Result{`0,`1}
  name.vb: Widening(TValue to Result(Of TValue, TError))
  fullName: Recore.Result<TValue, TError>.Implicit(TValue to Recore.Result<TValue, TError>)
  fullName.vb: Recore.Result(Of TValue, TError).Widening(TValue to Recore.Result(Of TValue, TError))
  nameWithType: Result<TValue, TError>.Implicit(TValue to Result<TValue, TError>)
  nameWithType.vb: Result(Of TValue, TError).Widening(TValue to Result(Of TValue, TError))
- uid: Recore.Result`2.op_Implicit(`1)~Recore.Result{`0,`1}
  name: Implicit(TError to Result<TValue, TError>)
  href: api/Recore.Result-2.html#Recore_Result_2_op_Implicit__1__Recore_Result__0__1_
  commentId: M:Recore.Result`2.op_Implicit(`1)~Recore.Result{`0,`1}
  name.vb: Widening(TError to Result(Of TValue, TError))
  fullName: Recore.Result<TValue, TError>.Implicit(TError to Recore.Result<TValue, TError>)
  fullName.vb: Recore.Result(Of TValue, TError).Widening(TError to Recore.Result(Of TValue, TError))
  nameWithType: Result<TValue, TError>.Implicit(TError to Result<TValue, TError>)
  nameWithType.vb: Result(Of TValue, TError).Widening(TError to Result(Of TValue, TError))
- uid: Recore.Result`2.op_Implicit*
  name: Implicit
  href: api/Recore.Result-2.html#Recore_Result_2_op_Implicit_
  commentId: Overload:Recore.Result`2.op_Implicit
  isSpec: "True"
  name.vb: Widening
  fullName: Recore.Result<TValue, TError>.Implicit
  fullName.vb: Recore.Result(Of TValue, TError).Widening
  nameWithType: Result<TValue, TError>.Implicit
  nameWithType.vb: Result(Of TValue, TError).Widening
- uid: Recore.Result`2.op_Inequality(Recore.Result{`0,`1},Recore.Result{`0,`1})
  name: Inequality(Result<TValue, TError>, Result<TValue, TError>)
  href: api/Recore.Result-2.html#Recore_Result_2_op_Inequality_Recore_Result__0__1__Recore_Result__0__1__
  commentId: M:Recore.Result`2.op_Inequality(Recore.Result{`0,`1},Recore.Result{`0,`1})
  name.vb: Inequality(Result(Of TValue, TError), Result(Of TValue, TError))
  fullName: Recore.Result<TValue, TError>.Inequality(Recore.Result<TValue, TError>, Recore.Result<TValue, TError>)
  fullName.vb: Recore.Result(Of TValue, TError).Inequality(Recore.Result(Of TValue, TError), Recore.Result(Of TValue, TError))
  nameWithType: Result<TValue, TError>.Inequality(Result<TValue, TError>, Result<TValue, TError>)
  nameWithType.vb: Result(Of TValue, TError).Inequality(Result(Of TValue, TError), Result(Of TValue, TError))
- uid: Recore.Result`2.op_Inequality*
  name: Inequality
  href: api/Recore.Result-2.html#Recore_Result_2_op_Inequality_
  commentId: Overload:Recore.Result`2.op_Inequality
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.Inequality
  fullName.vb: Recore.Result(Of TValue, TError).Inequality
  nameWithType: Result<TValue, TError>.Inequality
  nameWithType.vb: Result(Of TValue, TError).Inequality
- uid: Recore.Result`2.Switch(Action{`0},Action{`1})
  name: Switch(Action<TValue>, Action<TError>)
  href: api/Recore.Result-2.html#Recore_Result_2_Switch_Action__0__Action__1__
  commentId: M:Recore.Result`2.Switch(Action{`0},Action{`1})
  name.vb: Switch(Action(Of TValue), Action(Of TError))
  fullName: Recore.Result<TValue, TError>.Switch(Action<TValue>, Action<TError>)
  fullName.vb: Recore.Result(Of TValue, TError).Switch(Action(Of TValue), Action(Of TError))
  nameWithType: Result<TValue, TError>.Switch(Action<TValue>, Action<TError>)
  nameWithType.vb: Result(Of TValue, TError).Switch(Action(Of TValue), Action(Of TError))
- uid: Recore.Result`2.Switch*
  name: Switch
  href: api/Recore.Result-2.html#Recore_Result_2_Switch_
  commentId: Overload:Recore.Result`2.Switch
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.Switch
  fullName.vb: Recore.Result(Of TValue, TError).Switch
  nameWithType: Result<TValue, TError>.Switch
  nameWithType.vb: Result(Of TValue, TError).Switch
- uid: Recore.Result`2.Switch``1(Recore.Func{`0,``0},Recore.Func{`1,``0})
  name: Switch<T>(Func<TValue, T>, Func<TError, T>)
  href: api/Recore.Result-2.html#Recore_Result_2_Switch__1_Recore_Func__0___0__Recore_Func__1___0__
  commentId: M:Recore.Result`2.Switch``1(Recore.Func{`0,``0},Recore.Func{`1,``0})
  name.vb: Switch(Of T)(Func(Of TValue, T), Func(Of TError, T))
  fullName: Recore.Result<TValue, TError>.Switch<T>(Recore.Func<TValue, T>, Recore.Func<TError, T>)
  fullName.vb: Recore.Result(Of TValue, TError).Switch(Of T)(Recore.Func(Of TValue, T), Recore.Func(Of TError, T))
  nameWithType: Result<TValue, TError>.Switch<T>(Func<TValue, T>, Func<TError, T>)
  nameWithType.vb: Result(Of TValue, TError).Switch(Of T)(Func(Of TValue, T), Func(Of TError, T))
- uid: Recore.Result`2.Then*
  name: Then
  href: api/Recore.Result-2.html#Recore_Result_2_Then_
  commentId: Overload:Recore.Result`2.Then
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.Then
  fullName.vb: Recore.Result(Of TValue, TError).Then
  nameWithType: Result<TValue, TError>.Then
  nameWithType.vb: Result(Of TValue, TError).Then
- uid: Recore.Result`2.Then``1(Recore.Func{`0,Recore.Result{``0,`1}})
  name: Then<TResult>(Func<TValue, Result<TResult, TError>>)
  href: api/Recore.Result-2.html#Recore_Result_2_Then__1_Recore_Func__0_Recore_Result___0__1___
  commentId: M:Recore.Result`2.Then``1(Recore.Func{`0,Recore.Result{``0,`1}})
  name.vb: Then(Of TResult)(Func(Of TValue, Result(Of TResult, TError)))
  fullName: Recore.Result<TValue, TError>.Then<TResult>(Recore.Func<TValue, Recore.Result<TResult, TError>>)
  fullName.vb: Recore.Result(Of TValue, TError).Then(Of TResult)(Recore.Func(Of TValue, Recore.Result(Of TResult, TError)))
  nameWithType: Result<TValue, TError>.Then<TResult>(Func<TValue, Result<TResult, TError>>)
  nameWithType.vb: Result(Of TValue, TError).Then(Of TResult)(Func(Of TValue, Result(Of TResult, TError)))
- uid: Recore.Result`2.ToString
  name: ToString()
  href: api/Recore.Result-2.html#Recore_Result_2_ToString
  commentId: M:Recore.Result`2.ToString
  fullName: Recore.Result<TValue, TError>.ToString()
  fullName.vb: Recore.Result(Of TValue, TError).ToString()
  nameWithType: Result<TValue, TError>.ToString()
  nameWithType.vb: Result(Of TValue, TError).ToString()
- uid: Recore.Result`2.ToString*
  name: ToString
  href: api/Recore.Result-2.html#Recore_Result_2_ToString_
  commentId: Overload:Recore.Result`2.ToString
  isSpec: "True"
  fullName: Recore.Result<TValue, TError>.ToString
  fullName.vb: Recore.Result(Of TValue, TError).ToString
  nameWithType: Result<TValue, TError>.ToString
  nameWithType.vb: Result(Of TValue, TError).ToString
- uid: Recore.Security.Cryptography
  name: Recore.Security.Cryptography
  href: api/Recore.Security.Cryptography.html
  commentId: N:Recore.Security.Cryptography
  fullName: Recore.Security.Cryptography
  nameWithType: Recore.Security.Cryptography
- uid: Recore.Security.Cryptography.Ciphertext
  name: Ciphertext
  href: api/Recore.Security.Cryptography.Ciphertext.html
  commentId: T:Recore.Security.Cryptography.Ciphertext
  fullName: Recore.Security.Cryptography.Ciphertext
  nameWithType: Ciphertext
- uid: Recore.Security.Cryptography.Ciphertext.Encrypt*
  name: Encrypt
  href: api/Recore.Security.Cryptography.Ciphertext.html#Recore_Security_Cryptography_Ciphertext_Encrypt_
  commentId: Overload:Recore.Security.Cryptography.Ciphertext.Encrypt
  isSpec: "True"
  fullName: Recore.Security.Cryptography.Ciphertext.Encrypt
  nameWithType: Ciphertext.Encrypt
- uid: Recore.Security.Cryptography.Ciphertext.Encrypt``1(System.String,System.Byte[],``0)
  name: Encrypt<THash>(String, Byte[], THash)
  href: api/Recore.Security.Cryptography.Ciphertext.html#Recore_Security_Cryptography_Ciphertext_Encrypt__1_System_String_System_Byte_____0_
  commentId: M:Recore.Security.Cryptography.Ciphertext.Encrypt``1(System.String,System.Byte[],``0)
  name.vb: Encrypt(Of THash)(String, Byte(), THash)
  fullName: Recore.Security.Cryptography.Ciphertext.Encrypt<THash>(System.String, System.Byte[], THash)
  fullName.vb: Recore.Security.Cryptography.Ciphertext.Encrypt(Of THash)(System.String, System.Byte(), THash)
  nameWithType: Ciphertext.Encrypt<THash>(String, Byte[], THash)
  nameWithType.vb: Ciphertext.Encrypt(Of THash)(String, Byte(), THash)
- uid: Recore.Security.Cryptography.Ciphertext.MD5(System.String,System.Byte[])
  name: MD5(String, Byte[])
  href: api/Recore.Security.Cryptography.Ciphertext.html#Recore_Security_Cryptography_Ciphertext_MD5_System_String_System_Byte___
  commentId: M:Recore.Security.Cryptography.Ciphertext.MD5(System.String,System.Byte[])
  name.vb: MD5(String, Byte())
  fullName: Recore.Security.Cryptography.Ciphertext.MD5(System.String, System.Byte[])
  fullName.vb: Recore.Security.Cryptography.Ciphertext.MD5(System.String, System.Byte())
  nameWithType: Ciphertext.MD5(String, Byte[])
  nameWithType.vb: Ciphertext.MD5(String, Byte())
- uid: Recore.Security.Cryptography.Ciphertext.MD5*
  name: MD5
  href: api/Recore.Security.Cryptography.Ciphertext.html#Recore_Security_Cryptography_Ciphertext_MD5_
  commentId: Overload:Recore.Security.Cryptography.Ciphertext.MD5
  isSpec: "True"
  fullName: Recore.Security.Cryptography.Ciphertext.MD5
  nameWithType: Ciphertext.MD5
- uid: Recore.Security.Cryptography.Ciphertext.SHA1(System.String,System.Byte[])
  name: SHA1(String, Byte[])
  href: api/Recore.Security.Cryptography.Ciphertext.html#Recore_Security_Cryptography_Ciphertext_SHA1_System_String_System_Byte___
  commentId: M:Recore.Security.Cryptography.Ciphertext.SHA1(System.String,System.Byte[])
  name.vb: SHA1(String, Byte())
  fullName: Recore.Security.Cryptography.Ciphertext.SHA1(System.String, System.Byte[])
  fullName.vb: Recore.Security.Cryptography.Ciphertext.SHA1(System.String, System.Byte())
  nameWithType: Ciphertext.SHA1(String, Byte[])
  nameWithType.vb: Ciphertext.SHA1(String, Byte())
- uid: Recore.Security.Cryptography.Ciphertext.SHA1*
  name: SHA1
  href: api/Recore.Security.Cryptography.Ciphertext.html#Recore_Security_Cryptography_Ciphertext_SHA1_
  commentId: Overload:Recore.Security.Cryptography.Ciphertext.SHA1
  isSpec: "True"
  fullName: Recore.Security.Cryptography.Ciphertext.SHA1
  nameWithType: Ciphertext.SHA1
- uid: Recore.Security.Cryptography.Ciphertext.SHA256(System.String,System.Byte[])
  name: SHA256(String, Byte[])
  href: api/Recore.Security.Cryptography.Ciphertext.html#Recore_Security_Cryptography_Ciphertext_SHA256_System_String_System_Byte___
  commentId: M:Recore.Security.Cryptography.Ciphertext.SHA256(System.String,System.Byte[])
  name.vb: SHA256(String, Byte())
  fullName: Recore.Security.Cryptography.Ciphertext.SHA256(System.String, System.Byte[])
  fullName.vb: Recore.Security.Cryptography.Ciphertext.SHA256(System.String, System.Byte())
  nameWithType: Ciphertext.SHA256(String, Byte[])
  nameWithType.vb: Ciphertext.SHA256(String, Byte())
- uid: Recore.Security.Cryptography.Ciphertext.SHA256*
  name: SHA256
  href: api/Recore.Security.Cryptography.Ciphertext.html#Recore_Security_Cryptography_Ciphertext_SHA256_
  commentId: Overload:Recore.Security.Cryptography.Ciphertext.SHA256
  isSpec: "True"
  fullName: Recore.Security.Cryptography.Ciphertext.SHA256
  nameWithType: Ciphertext.SHA256
- uid: Recore.Security.Cryptography.Ciphertext`1
  name: Ciphertext<THash>
  href: api/Recore.Security.Cryptography.Ciphertext-1.html
  commentId: T:Recore.Security.Cryptography.Ciphertext`1
  name.vb: Ciphertext(Of THash)
  fullName: Recore.Security.Cryptography.Ciphertext<THash>
  fullName.vb: Recore.Security.Cryptography.Ciphertext(Of THash)
  nameWithType: Ciphertext<THash>
  nameWithType.vb: Ciphertext(Of THash)
- uid: Recore.Security.Cryptography.Ciphertext`1.Encrypt(System.String,System.Byte[],`0)
  name: Encrypt(String, Byte[], THash)
  href: api/Recore.Security.Cryptography.Ciphertext-1.html#Recore_Security_Cryptography_Ciphertext_1_Encrypt_System_String_System_Byte____0_
  commentId: M:Recore.Security.Cryptography.Ciphertext`1.Encrypt(System.String,System.Byte[],`0)
  name.vb: Encrypt(String, Byte(), THash)
  fullName: Recore.Security.Cryptography.Ciphertext<THash>.Encrypt(System.String, System.Byte[], THash)
  fullName.vb: Recore.Security.Cryptography.Ciphertext(Of THash).Encrypt(System.String, System.Byte(), THash)
  nameWithType: Ciphertext<THash>.Encrypt(String, Byte[], THash)
  nameWithType.vb: Ciphertext(Of THash).Encrypt(String, Byte(), THash)
- uid: Recore.Security.Cryptography.Ciphertext`1.Encrypt*
  name: Encrypt
  href: api/Recore.Security.Cryptography.Ciphertext-1.html#Recore_Security_Cryptography_Ciphertext_1_Encrypt_
  commentId: Overload:Recore.Security.Cryptography.Ciphertext`1.Encrypt
  isSpec: "True"
  fullName: Recore.Security.Cryptography.Ciphertext<THash>.Encrypt
  fullName.vb: Recore.Security.Cryptography.Ciphertext(Of THash).Encrypt
  nameWithType: Ciphertext<THash>.Encrypt
  nameWithType.vb: Ciphertext(Of THash).Encrypt
- uid: Recore.Security.Cryptography.SecureCompare
  name: SecureCompare
  href: api/Recore.Security.Cryptography.SecureCompare.html
  commentId: T:Recore.Security.Cryptography.SecureCompare
  fullName: Recore.Security.Cryptography.SecureCompare
  nameWithType: SecureCompare
- uid: Recore.Security.Cryptography.SecureCompare.TimeInvariantEquals(System.Byte[],System.Byte[])
  name: TimeInvariantEquals(Byte[], Byte[])
  href: api/Recore.Security.Cryptography.SecureCompare.html#Recore_Security_Cryptography_SecureCompare_TimeInvariantEquals_System_Byte___System_Byte___
  commentId: M:Recore.Security.Cryptography.SecureCompare.TimeInvariantEquals(System.Byte[],System.Byte[])
  name.vb: TimeInvariantEquals(Byte(), Byte())
  fullName: Recore.Security.Cryptography.SecureCompare.TimeInvariantEquals(System.Byte[], System.Byte[])
  fullName.vb: Recore.Security.Cryptography.SecureCompare.TimeInvariantEquals(System.Byte(), System.Byte())
  nameWithType: SecureCompare.TimeInvariantEquals(Byte[], Byte[])
  nameWithType.vb: SecureCompare.TimeInvariantEquals(Byte(), Byte())
- uid: Recore.Security.Cryptography.SecureCompare.TimeInvariantEquals*
  name: TimeInvariantEquals
  href: api/Recore.Security.Cryptography.SecureCompare.html#Recore_Security_Cryptography_SecureCompare_TimeInvariantEquals_
  commentId: Overload:Recore.Security.Cryptography.SecureCompare.TimeInvariantEquals
  isSpec: "True"
  fullName: Recore.Security.Cryptography.SecureCompare.TimeInvariantEquals
  nameWithType: SecureCompare.TimeInvariantEquals
- uid: Recore.StringExtensions
  name: StringExtensions
  href: api/Recore.StringExtensions.html
  commentId: T:Recore.StringExtensions
  fullName: Recore.StringExtensions
  nameWithType: StringExtensions
- uid: Recore.StringExtensions.Tokenize(System.String)
  name: Tokenize(String)
  href: api/Recore.StringExtensions.html#Recore_StringExtensions_Tokenize_System_String_
  commentId: M:Recore.StringExtensions.Tokenize(System.String)
  fullName: Recore.StringExtensions.Tokenize(System.String)
  nameWithType: StringExtensions.Tokenize(String)
- uid: Recore.StringExtensions.Tokenize*
  name: Tokenize
  href: api/Recore.StringExtensions.html#Recore_StringExtensions_Tokenize_
  commentId: Overload:Recore.StringExtensions.Tokenize
  isSpec: "True"
  fullName: Recore.StringExtensions.Tokenize
  nameWithType: StringExtensions.Tokenize
- uid: Recore.Text.Json.Serialization.Converters
  name: Recore.Text.Json.Serialization.Converters
  href: api/Recore.Text.Json.Serialization.Converters.html
  commentId: N:Recore.Text.Json.Serialization.Converters
  fullName: Recore.Text.Json.Serialization.Converters
  nameWithType: Recore.Text.Json.Serialization.Converters
- uid: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2
  name: OverrideEitherConverter<TLeft, TRight>
  href: api/Recore.Text.Json.Serialization.Converters.OverrideEitherConverter-2.html
  commentId: T:Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2
  name.vb: OverrideEitherConverter(Of TLeft, TRight)
  fullName: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter<TLeft, TRight>
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter(Of TLeft, TRight)
  nameWithType: OverrideEitherConverter<TLeft, TRight>
  nameWithType.vb: OverrideEitherConverter(Of TLeft, TRight)
- uid: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.#ctor(Recore.Func{JsonElement,System.Boolean})
  name: OverrideEitherConverter(Func<JsonElement, Boolean>)
  href: api/Recore.Text.Json.Serialization.Converters.OverrideEitherConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideEitherConverter_2__ctor_Recore_Func_JsonElement_System_Boolean__
  commentId: M:Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.#ctor(Recore.Func{JsonElement,System.Boolean})
  name.vb: OverrideEitherConverter(Func(Of JsonElement, Boolean))
  fullName: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter<TLeft, TRight>.OverrideEitherConverter(Recore.Func<JsonElement, System.Boolean>)
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter(Of TLeft, TRight).OverrideEitherConverter(Recore.Func(Of JsonElement, System.Boolean))
  nameWithType: OverrideEitherConverter<TLeft, TRight>.OverrideEitherConverter(Func<JsonElement, Boolean>)
  nameWithType.vb: OverrideEitherConverter(Of TLeft, TRight).OverrideEitherConverter(Func(Of JsonElement, Boolean))
- uid: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.#ctor*
  name: OverrideEitherConverter
  href: api/Recore.Text.Json.Serialization.Converters.OverrideEitherConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideEitherConverter_2__ctor_
  commentId: Overload:Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.#ctor
  isSpec: "True"
  fullName: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter<TLeft, TRight>.OverrideEitherConverter
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter(Of TLeft, TRight).OverrideEitherConverter
  nameWithType: OverrideEitherConverter<TLeft, TRight>.OverrideEitherConverter
  nameWithType.vb: OverrideEitherConverter(Of TLeft, TRight).OverrideEitherConverter
- uid: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.Read(Utf8JsonReader@,Type,JsonSerializerOptions)
  name: Read(ref Utf8JsonReader, Type, JsonSerializerOptions)
  href: api/Recore.Text.Json.Serialization.Converters.OverrideEitherConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideEitherConverter_2_Read_Utf8JsonReader__Type_JsonSerializerOptions_
  commentId: M:Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.Read(Utf8JsonReader@,Type,JsonSerializerOptions)
  name.vb: Read(ByRef Utf8JsonReader, Type, JsonSerializerOptions)
  fullName: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter<TLeft, TRight>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions)
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter(Of TLeft, TRight).Read(ByRef Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType: OverrideEitherConverter<TLeft, TRight>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType.vb: OverrideEitherConverter(Of TLeft, TRight).Read(ByRef Utf8JsonReader, Type, JsonSerializerOptions)
- uid: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.Read*
  name: Read
  href: api/Recore.Text.Json.Serialization.Converters.OverrideEitherConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideEitherConverter_2_Read_
  commentId: Overload:Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.Read
  isSpec: "True"
  fullName: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter<TLeft, TRight>.Read
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter(Of TLeft, TRight).Read
  nameWithType: OverrideEitherConverter<TLeft, TRight>.Read
  nameWithType.vb: OverrideEitherConverter(Of TLeft, TRight).Read
- uid: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.Write(Utf8JsonWriter,Recore.Either{`0,`1},JsonSerializerOptions)
  name: Write(Utf8JsonWriter, Either<TLeft, TRight>, JsonSerializerOptions)
  href: api/Recore.Text.Json.Serialization.Converters.OverrideEitherConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideEitherConverter_2_Write_Utf8JsonWriter_Recore_Either__0__1__JsonSerializerOptions_
  commentId: M:Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.Write(Utf8JsonWriter,Recore.Either{`0,`1},JsonSerializerOptions)
  name.vb: Write(Utf8JsonWriter, Either(Of TLeft, TRight), JsonSerializerOptions)
  fullName: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter<TLeft, TRight>.Write(Utf8JsonWriter, Recore.Either<TLeft, TRight>, JsonSerializerOptions)
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter(Of TLeft, TRight).Write(Utf8JsonWriter, Recore.Either(Of TLeft, TRight), JsonSerializerOptions)
  nameWithType: OverrideEitherConverter<TLeft, TRight>.Write(Utf8JsonWriter, Either<TLeft, TRight>, JsonSerializerOptions)
  nameWithType.vb: OverrideEitherConverter(Of TLeft, TRight).Write(Utf8JsonWriter, Either(Of TLeft, TRight), JsonSerializerOptions)
- uid: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.Write*
  name: Write
  href: api/Recore.Text.Json.Serialization.Converters.OverrideEitherConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideEitherConverter_2_Write_
  commentId: Overload:Recore.Text.Json.Serialization.Converters.OverrideEitherConverter`2.Write
  isSpec: "True"
  fullName: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter<TLeft, TRight>.Write
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideEitherConverter(Of TLeft, TRight).Write
  nameWithType: OverrideEitherConverter<TLeft, TRight>.Write
  nameWithType.vb: OverrideEitherConverter(Of TLeft, TRight).Write
- uid: Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2
  name: OverrideResultConverter<TValue, TError>
  href: api/Recore.Text.Json.Serialization.Converters.OverrideResultConverter-2.html
  commentId: T:Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2
  name.vb: OverrideResultConverter(Of TValue, TError)
  fullName: Recore.Text.Json.Serialization.Converters.OverrideResultConverter<TValue, TError>
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideResultConverter(Of TValue, TError)
  nameWithType: OverrideResultConverter<TValue, TError>
  nameWithType.vb: OverrideResultConverter(Of TValue, TError)
- uid: Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.#ctor(Recore.Func{JsonElement,System.Boolean})
  name: OverrideResultConverter(Func<JsonElement, Boolean>)
  href: api/Recore.Text.Json.Serialization.Converters.OverrideResultConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideResultConverter_2__ctor_Recore_Func_JsonElement_System_Boolean__
  commentId: M:Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.#ctor(Recore.Func{JsonElement,System.Boolean})
  name.vb: OverrideResultConverter(Func(Of JsonElement, Boolean))
  fullName: Recore.Text.Json.Serialization.Converters.OverrideResultConverter<TValue, TError>.OverrideResultConverter(Recore.Func<JsonElement, System.Boolean>)
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideResultConverter(Of TValue, TError).OverrideResultConverter(Recore.Func(Of JsonElement, System.Boolean))
  nameWithType: OverrideResultConverter<TValue, TError>.OverrideResultConverter(Func<JsonElement, Boolean>)
  nameWithType.vb: OverrideResultConverter(Of TValue, TError).OverrideResultConverter(Func(Of JsonElement, Boolean))
- uid: Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.#ctor*
  name: OverrideResultConverter
  href: api/Recore.Text.Json.Serialization.Converters.OverrideResultConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideResultConverter_2__ctor_
  commentId: Overload:Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.#ctor
  isSpec: "True"
  fullName: Recore.Text.Json.Serialization.Converters.OverrideResultConverter<TValue, TError>.OverrideResultConverter
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideResultConverter(Of TValue, TError).OverrideResultConverter
  nameWithType: OverrideResultConverter<TValue, TError>.OverrideResultConverter
  nameWithType.vb: OverrideResultConverter(Of TValue, TError).OverrideResultConverter
- uid: Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.Read(Utf8JsonReader@,Type,JsonSerializerOptions)
  name: Read(ref Utf8JsonReader, Type, JsonSerializerOptions)
  href: api/Recore.Text.Json.Serialization.Converters.OverrideResultConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideResultConverter_2_Read_Utf8JsonReader__Type_JsonSerializerOptions_
  commentId: M:Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.Read(Utf8JsonReader@,Type,JsonSerializerOptions)
  name.vb: Read(ByRef Utf8JsonReader, Type, JsonSerializerOptions)
  fullName: Recore.Text.Json.Serialization.Converters.OverrideResultConverter<TValue, TError>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions)
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideResultConverter(Of TValue, TError).Read(ByRef Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType: OverrideResultConverter<TValue, TError>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType.vb: OverrideResultConverter(Of TValue, TError).Read(ByRef Utf8JsonReader, Type, JsonSerializerOptions)
- uid: Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.Read*
  name: Read
  href: api/Recore.Text.Json.Serialization.Converters.OverrideResultConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideResultConverter_2_Read_
  commentId: Overload:Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.Read
  isSpec: "True"
  fullName: Recore.Text.Json.Serialization.Converters.OverrideResultConverter<TValue, TError>.Read
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideResultConverter(Of TValue, TError).Read
  nameWithType: OverrideResultConverter<TValue, TError>.Read
  nameWithType.vb: OverrideResultConverter(Of TValue, TError).Read
- uid: Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.Write(Utf8JsonWriter,Recore.Result{`0,`1},JsonSerializerOptions)
  name: Write(Utf8JsonWriter, Result<TValue, TError>, JsonSerializerOptions)
  href: api/Recore.Text.Json.Serialization.Converters.OverrideResultConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideResultConverter_2_Write_Utf8JsonWriter_Recore_Result__0__1__JsonSerializerOptions_
  commentId: M:Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.Write(Utf8JsonWriter,Recore.Result{`0,`1},JsonSerializerOptions)
  name.vb: Write(Utf8JsonWriter, Result(Of TValue, TError), JsonSerializerOptions)
  fullName: Recore.Text.Json.Serialization.Converters.OverrideResultConverter<TValue, TError>.Write(Utf8JsonWriter, Recore.Result<TValue, TError>, JsonSerializerOptions)
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideResultConverter(Of TValue, TError).Write(Utf8JsonWriter, Recore.Result(Of TValue, TError), JsonSerializerOptions)
  nameWithType: OverrideResultConverter<TValue, TError>.Write(Utf8JsonWriter, Result<TValue, TError>, JsonSerializerOptions)
  nameWithType.vb: OverrideResultConverter(Of TValue, TError).Write(Utf8JsonWriter, Result(Of TValue, TError), JsonSerializerOptions)
- uid: Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.Write*
  name: Write
  href: api/Recore.Text.Json.Serialization.Converters.OverrideResultConverter-2.html#Recore_Text_Json_Serialization_Converters_OverrideResultConverter_2_Write_
  commentId: Overload:Recore.Text.Json.Serialization.Converters.OverrideResultConverter`2.Write
  isSpec: "True"
  fullName: Recore.Text.Json.Serialization.Converters.OverrideResultConverter<TValue, TError>.Write
  fullName.vb: Recore.Text.Json.Serialization.Converters.OverrideResultConverter(Of TValue, TError).Write
  nameWithType: OverrideResultConverter<TValue, TError>.Write
  nameWithType.vb: OverrideResultConverter(Of TValue, TError).Write
- uid: Recore.Threading.Tasks
  name: Recore.Threading.Tasks
  href: api/Recore.Threading.Tasks.html
  commentId: N:Recore.Threading.Tasks
  fullName: Recore.Threading.Tasks
  nameWithType: Recore.Threading.Tasks
- uid: Recore.Threading.Tasks.TaskExtensions
  name: TaskExtensions
  href: api/Recore.Threading.Tasks.TaskExtensions.html
  commentId: T:Recore.Threading.Tasks.TaskExtensions
  fullName: Recore.Threading.Tasks.TaskExtensions
  nameWithType: TaskExtensions
- uid: Recore.Threading.Tasks.TaskExtensions.Synchronize(Task)
  name: Synchronize(Task)
  href: api/Recore.Threading.Tasks.TaskExtensions.html#Recore_Threading_Tasks_TaskExtensions_Synchronize_Task_
  commentId: M:Recore.Threading.Tasks.TaskExtensions.Synchronize(Task)
  fullName: Recore.Threading.Tasks.TaskExtensions.Synchronize(Task)
  nameWithType: TaskExtensions.Synchronize(Task)
- uid: Recore.Threading.Tasks.TaskExtensions.Synchronize*
  name: Synchronize
  href: api/Recore.Threading.Tasks.TaskExtensions.html#Recore_Threading_Tasks_TaskExtensions_Synchronize_
  commentId: Overload:Recore.Threading.Tasks.TaskExtensions.Synchronize
  isSpec: "True"
  fullName: Recore.Threading.Tasks.TaskExtensions.Synchronize
  nameWithType: TaskExtensions.Synchronize
- uid: Recore.Threading.Tasks.TaskExtensions.Synchronize``1(Task{``0})
  name: Synchronize<T>(Task<T>)
  href: api/Recore.Threading.Tasks.TaskExtensions.html#Recore_Threading_Tasks_TaskExtensions_Synchronize__1_Task___0__
  commentId: M:Recore.Threading.Tasks.TaskExtensions.Synchronize``1(Task{``0})
  name.vb: Synchronize(Of T)(Task(Of T))
  fullName: Recore.Threading.Tasks.TaskExtensions.Synchronize<T>(Task<T>)
  fullName.vb: Recore.Threading.Tasks.TaskExtensions.Synchronize(Of T)(Task(Of T))
  nameWithType: TaskExtensions.Synchronize<T>(Task<T>)
  nameWithType.vb: TaskExtensions.Synchronize(Of T)(Task(Of T))
- uid: Recore.Token
  name: Token
  href: api/Recore.Token.html
  commentId: T:Recore.Token
  fullName: Recore.Token
  nameWithType: Token
- uid: Recore.Token.#ctor(System.String)
  name: Token(String)
  href: api/Recore.Token.html#Recore_Token__ctor_System_String_
  commentId: M:Recore.Token.#ctor(System.String)
  fullName: Recore.Token.Token(System.String)
  nameWithType: Token.Token(String)
- uid: Recore.Token.#ctor*
  name: Token
  href: api/Recore.Token.html#Recore_Token__ctor_
  commentId: Overload:Recore.Token.#ctor
  isSpec: "True"
  fullName: Recore.Token.Token
  nameWithType: Token.Token
- uid: Recore.Token.CompareTo(Recore.Of{System.String})
  name: CompareTo(Of<String>)
  href: api/Recore.Token.html#Recore_Token_CompareTo_Recore_Of_System_String__
  commentId: M:Recore.Token.CompareTo(Recore.Of{System.String})
  name.vb: CompareTo(Of(Of String))
  fullName: Recore.Token.CompareTo(Recore.Of<System.String>)
  fullName.vb: Recore.Token.CompareTo(Recore.Of(Of System.String))
  nameWithType: Token.CompareTo(Of<String>)
  nameWithType.vb: Token.CompareTo(Of(Of String))
- uid: Recore.Token.CompareTo*
  name: CompareTo
  href: api/Recore.Token.html#Recore_Token_CompareTo_
  commentId: Overload:Recore.Token.CompareTo
  isSpec: "True"
  fullName: Recore.Token.CompareTo
  nameWithType: Token.CompareTo
- uid: Recore.Token.Equals(Recore.Of{System.String},StringComparison)
  name: Equals(Of<String>, StringComparison)
  href: api/Recore.Token.html#Recore_Token_Equals_Recore_Of_System_String__StringComparison_
  commentId: M:Recore.Token.Equals(Recore.Of{System.String},StringComparison)
  name.vb: Equals(Of(Of String), StringComparison)
  fullName: Recore.Token.Equals(Recore.Of<System.String>, StringComparison)
  fullName.vb: Recore.Token.Equals(Recore.Of(Of System.String), StringComparison)
  nameWithType: Token.Equals(Of<String>, StringComparison)
  nameWithType.vb: Token.Equals(Of(Of String), StringComparison)
- uid: Recore.Token.Equals*
  name: Equals
  href: api/Recore.Token.html#Recore_Token_Equals_
  commentId: Overload:Recore.Token.Equals
  isSpec: "True"
  fullName: Recore.Token.Equals
  nameWithType: Token.Equals
- uid: Recore.Unit
  name: Unit
  href: api/Recore.Unit.html
  commentId: T:Recore.Unit
  fullName: Recore.Unit
  nameWithType: Unit
- uid: Recore.Unit.Close(Action)
  name: Close(Action)
  href: api/Recore.Unit.html#Recore_Unit_Close_Action_
  commentId: M:Recore.Unit.Close(Action)
  fullName: Recore.Unit.Close(Action)
  nameWithType: Unit.Close(Action)
- uid: Recore.Unit.Close*
  name: Close
  href: api/Recore.Unit.html#Recore_Unit_Close_
  commentId: Overload:Recore.Unit.Close
  isSpec: "True"
  fullName: Recore.Unit.Close
  nameWithType: Unit.Close
- uid: Recore.Unit.Equals(Recore.Unit)
  name: Equals(Unit)
  href: api/Recore.Unit.html#Recore_Unit_Equals_Recore_Unit_
  commentId: M:Recore.Unit.Equals(Recore.Unit)
  fullName: Recore.Unit.Equals(Recore.Unit)
  nameWithType: Unit.Equals(Unit)
- uid: Recore.Unit.Equals(System.Object)
  name: Equals(Object)
  href: api/Recore.Unit.html#Recore_Unit_Equals_System_Object_
  commentId: M:Recore.Unit.Equals(System.Object)
  fullName: Recore.Unit.Equals(System.Object)
  nameWithType: Unit.Equals(Object)
- uid: Recore.Unit.Equals*
  name: Equals
  href: api/Recore.Unit.html#Recore_Unit_Equals_
  commentId: Overload:Recore.Unit.Equals
  isSpec: "True"
  fullName: Recore.Unit.Equals
  nameWithType: Unit.Equals
- uid: Recore.Unit.GetHashCode
  name: GetHashCode()
  href: api/Recore.Unit.html#Recore_Unit_GetHashCode
  commentId: M:Recore.Unit.GetHashCode
  fullName: Recore.Unit.GetHashCode()
  nameWithType: Unit.GetHashCode()
- uid: Recore.Unit.GetHashCode*
  name: GetHashCode
  href: api/Recore.Unit.html#Recore_Unit_GetHashCode_
  commentId: Overload:Recore.Unit.GetHashCode
  isSpec: "True"
  fullName: Recore.Unit.GetHashCode
  nameWithType: Unit.GetHashCode
- uid: Recore.Unit.op_Equality(Recore.Unit,Recore.Unit)
  name: Equality(Unit, Unit)
  href: api/Recore.Unit.html#Recore_Unit_op_Equality_Recore_Unit_Recore_Unit_
  commentId: M:Recore.Unit.op_Equality(Recore.Unit,Recore.Unit)
  fullName: Recore.Unit.Equality(Recore.Unit, Recore.Unit)
  nameWithType: Unit.Equality(Unit, Unit)
- uid: Recore.Unit.op_Equality*
  name: Equality
  href: api/Recore.Unit.html#Recore_Unit_op_Equality_
  commentId: Overload:Recore.Unit.op_Equality
  isSpec: "True"
  fullName: Recore.Unit.Equality
  nameWithType: Unit.Equality
- uid: Recore.Unit.op_Inequality(Recore.Unit,Recore.Unit)
  name: Inequality(Unit, Unit)
  href: api/Recore.Unit.html#Recore_Unit_op_Inequality_Recore_Unit_Recore_Unit_
  commentId: M:Recore.Unit.op_Inequality(Recore.Unit,Recore.Unit)
  fullName: Recore.Unit.Inequality(Recore.Unit, Recore.Unit)
  nameWithType: Unit.Inequality(Unit, Unit)
- uid: Recore.Unit.op_Inequality*
  name: Inequality
  href: api/Recore.Unit.html#Recore_Unit_op_Inequality_
  commentId: Overload:Recore.Unit.op_Inequality
  isSpec: "True"
  fullName: Recore.Unit.Inequality
  nameWithType: Unit.Inequality
- uid: Recore.Unit.ToString
  name: ToString()
  href: api/Recore.Unit.html#Recore_Unit_ToString
  commentId: M:Recore.Unit.ToString
  fullName: Recore.Unit.ToString()
  nameWithType: Unit.ToString()
- uid: Recore.Unit.ToString*
  name: ToString
  href: api/Recore.Unit.html#Recore_Unit_ToString_
  commentId: Overload:Recore.Unit.ToString
  isSpec: "True"
  fullName: Recore.Unit.ToString
  nameWithType: Unit.ToString
- uid: Recore.Unit.Value
  name: Value
  href: api/Recore.Unit.html#Recore_Unit_Value
  commentId: P:Recore.Unit.Value
  fullName: Recore.Unit.Value
  nameWithType: Unit.Value
- uid: Recore.Unit.Value*
  name: Value
  href: api/Recore.Unit.html#Recore_Unit_Value_
  commentId: Overload:Recore.Unit.Value
  isSpec: "True"
  fullName: Recore.Unit.Value
  nameWithType: Unit.Value
- uid: Recore.UriExtensions
  name: UriExtensions
  href: api/Recore.UriExtensions.html
  commentId: T:Recore.UriExtensions
  fullName: Recore.UriExtensions
  nameWithType: UriExtensions
- uid: Recore.UriExtensions.AsAbsoluteUri(Uri)
  name: AsAbsoluteUri(Uri)
  href: api/Recore.UriExtensions.html#Recore_UriExtensions_AsAbsoluteUri_Uri_
  commentId: M:Recore.UriExtensions.AsAbsoluteUri(Uri)
  fullName: Recore.UriExtensions.AsAbsoluteUri(Uri)
  nameWithType: UriExtensions.AsAbsoluteUri(Uri)
- uid: Recore.UriExtensions.AsAbsoluteUri*
  name: AsAbsoluteUri
  href: api/Recore.UriExtensions.html#Recore_UriExtensions_AsAbsoluteUri_
  commentId: Overload:Recore.UriExtensions.AsAbsoluteUri
  isSpec: "True"
  fullName: Recore.UriExtensions.AsAbsoluteUri
  nameWithType: UriExtensions.AsAbsoluteUri
