{
  "api/Recore.Functional.Composer-2.html": {
    "href": "api/Recore.Functional.Composer-2.html",
    "title": "Class Composer<TValue, TResult> | RecoreFX",
    "keywords": "Class Composer<TValue, TResult> Composes many functions or actions into a single function. Inheritance Object Composer<TValue, TResult> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Functional Assembly : Recore.dll Syntax public sealed class Composer<TValue, TResult> Type Parameters Name Description TValue TResult Examples // Without Composer var result = Baz(Bar(Foo(value))); // With Composer var result = new Composer<string, int>(Foo) .Then(Bar) .Then(Baz) .Func(); Constructors | Improve this Doc View Source Composer(Func<TValue, TResult>) Initializes the Composer<TValue, TResult> from a function. Declaration public Composer(Func<TValue, TResult> func) Parameters Type Name Description Func <TValue, TResult> func Properties | Improve this Doc View Source Func Gets the composed function. Declaration public Func<TValue, TResult> Func { get; } Property Value Type Description Func <TValue, TResult> Methods | Improve this Doc View Source Then(Action<TResult>) Adds an action to be performed when evaluating the composed function. Declaration public Composer<TValue, TResult> Then(Action<TResult> action) Parameters Type Name Description Action <TResult> action Returns Type Description Composer <TValue, TResult> Remarks Note that the action will be called lazily. It will not be called until the composed function is called. | Improve this Doc View Source Then<TNextResult>(Func<TResult, TNextResult>) Adds another function to the composed result. Declaration public Composer<TValue, TNextResult> Then<TNextResult>(Func<TResult, TNextResult> func) Parameters Type Name Description Func <TResult, TNextResult> func Returns Type Description Composer <TValue, TNextResult> Type Parameters Name Description TNextResult"
  },
  "api/Recore.Func.html": {
    "href": "api/Recore.Func.html",
    "title": "Class Func | RecoreFX",
    "keywords": "Class Func Contains methods for working with functions. Inheritance Object Func Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Func Methods | Improve this Doc View Source Fluent<T>(Action<T>) Passes through the argument passed to a void-returning routine. Declaration public static Func<T, T> Fluent<T>(this Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description Func <T, T> Type Parameters Name Description T | Improve this Doc View Source Invoke<T>(Func<T>) Calls a function and return its result. Declaration public static T Invoke<T>(Func<T> f) Parameters Type Name Description Func <T> f Returns Type Description T Type Parameters Name Description T Remarks This method is useful for making immediately-invoked function expressions in C#. | Improve this Doc View Source Memoize<TSource, TResult>(Func<TSource, TResult>) Creates a function that caches the results func to avoid calling it more than once. Declaration public static Func<TSource, TResult> Memoize<TSource, TResult>(Func<TSource, TResult> func) Parameters Type Name Description Func <TSource, TResult> func Returns Type Description Func <TSource, TResult> Type Parameters Name Description TSource TResult Remarks For the memoized function to be correct, func should return the same result every time it is called with the same argument. The memoized function is not thread-safe. The memoized function is not meant to serve as a general-purpose cache. The lifetime of the memoized function should be bounded to prevent the memoized results from consuming too much memory. | Improve this Doc View Source Memoize<TSource, TResult>(Func<TSource, TResult>, IEqualityComparer<TSource>) Creates a function that caches the results func to avoid calling it more than once, using comparer to determine when two arguments should be considered the same. Declaration public static Func<TSource, TResult> Memoize<TSource, TResult>(Func<TSource, TResult> func, IEqualityComparer<TSource> comparer) Parameters Type Name Description Func <TSource, TResult> func IEqualityComparer <TSource> comparer Returns Type Description Func <TSource, TResult> Type Parameters Name Description TSource TResult Remarks For the memoized function to be correct, func should return the same result every time it is called with the same argument. The memoized function is not thread-safe. The memoized function is not meant to serve as a general-purpose cache. The lifetime of the memoized function should be bounded to prevent the memoized results from consuming too much memory. | Improve this Doc View Source TupleArgs<T1, T2, TResult>(Func<T1, T2, TResult>) Converts a function's arguments to a tuple. Declaration public static Func<Tuple<T1, T2>, TResult> TupleArgs<T1, T2, TResult>(Func<T1, T2, TResult> func) Parameters Type Name Description Func <T1, T2, TResult> func Returns Type Description Func < Tuple <T1, T2>, TResult> Type Parameters Name Description T1 T2 TResult | Improve this Doc View Source TupleArgs<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>) Converts a function's arguments to a tuple. Declaration public static Func<Tuple<T1, T2, T3>, TResult> TupleArgs<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> func) Parameters Type Name Description Func <T1, T2, T3, TResult> func Returns Type Description Func < Tuple <T1, T2, T3>, TResult> Type Parameters Name Description T1 T2 T3 TResult | Improve this Doc View Source TupleArgs<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>) Converts a function's arguments to a tuple. Declaration public static Func<Tuple<T1, T2, T3, T4>, TResult> TupleArgs<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> func) Parameters Type Name Description Func <T1, T2, T3, T4, TResult> func Returns Type Description Func < Tuple <T1, T2, T3, T4>, TResult> Type Parameters Name Description T1 T2 T3 T4 TResult | Improve this Doc View Source TupleArgs<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>) Converts a function's arguments to a tuple. Declaration public static Func<Tuple<T1, T2, T3, T4, T5>, TResult> TupleArgs<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> func) Parameters Type Name Description Func <T1, T2, T3, T4, T5, TResult> func Returns Type Description Func < Tuple <T1, T2, T3, T4, T5>, TResult> Type Parameters Name Description T1 T2 T3 T4 T5 TResult | Improve this Doc View Source TupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>) Converts a function's arguments to a tuple. Declaration public static Func<Tuple<T1, T2, T3, T4, T5, T6>, TResult> TupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult> func) Parameters Type Name Description Func <T1, T2, T3, T4, T5, T6, TResult> func Returns Type Description Func < Tuple <T1, T2, T3, T4, T5, T6>, TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 TResult | Improve this Doc View Source TupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>) Converts a function's arguments to a tuple. Declaration public static Func<Tuple<T1, T2, T3, T4, T5, T6, T7>, TResult> TupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult> func) Parameters Type Name Description Func <T1, T2, T3, T4, T5, T6, T7, TResult> func Returns Type Description Func < Tuple <T1, T2, T3, T4, T5, T6, T7>, TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 TResult | Improve this Doc View Source UntupleArgs<T1, T2, TResult>(Func<Tuple<T1, T2>, TResult>) Spreads a unary function's tuple argument. Declaration public static Func<T1, T2, TResult> UntupleArgs<T1, T2, TResult>(Func<Tuple<T1, T2>, TResult> func) Parameters Type Name Description Func < Tuple <T1, T2>, TResult> func Returns Type Description Func <T1, T2, TResult> Type Parameters Name Description T1 T2 TResult | Improve this Doc View Source UntupleArgs<T1, T2, T3, TResult>(Func<Tuple<T1, T2, T3>, TResult>) Spreads a unary function's tuple argument. Declaration public static Func<T1, T2, T3, TResult> UntupleArgs<T1, T2, T3, TResult>(Func<Tuple<T1, T2, T3>, TResult> func) Parameters Type Name Description Func < Tuple <T1, T2, T3>, TResult> func Returns Type Description Func <T1, T2, T3, TResult> Type Parameters Name Description T1 T2 T3 TResult | Improve this Doc View Source UntupleArgs<T1, T2, T3, T4, TResult>(Func<Tuple<T1, T2, T3, T4>, TResult>) Spreads a unary function's tuple argument. Declaration public static Func<T1, T2, T3, T4, TResult> UntupleArgs<T1, T2, T3, T4, TResult>(Func<Tuple<T1, T2, T3, T4>, TResult> func) Parameters Type Name Description Func < Tuple <T1, T2, T3, T4>, TResult> func Returns Type Description Func <T1, T2, T3, T4, TResult> Type Parameters Name Description T1 T2 T3 T4 TResult | Improve this Doc View Source UntupleArgs<T1, T2, T3, T4, T5, TResult>(Func<Tuple<T1, T2, T3, T4, T5>, TResult>) Spreads a unary function's tuple argument. Declaration public static Func<T1, T2, T3, T4, T5, TResult> UntupleArgs<T1, T2, T3, T4, T5, TResult>(Func<Tuple<T1, T2, T3, T4, T5>, TResult> func) Parameters Type Name Description Func < Tuple <T1, T2, T3, T4, T5>, TResult> func Returns Type Description Func <T1, T2, T3, T4, T5, TResult> Type Parameters Name Description T1 T2 T3 T4 T5 TResult | Improve this Doc View Source UntupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Func<Tuple<T1, T2, T3, T4, T5, T6>, TResult>) Spreads a unary function's tuple argument. Declaration public static Func<T1, T2, T3, T4, T5, T6, TResult> UntupleArgs<T1, T2, T3, T4, T5, T6, TResult>(Func<Tuple<T1, T2, T3, T4, T5, T6>, TResult> func) Parameters Type Name Description Func < Tuple <T1, T2, T3, T4, T5, T6>, TResult> func Returns Type Description Func <T1, T2, T3, T4, T5, T6, TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 TResult | Improve this Doc View Source UntupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<Tuple<T1, T2, T3, T4, T5, T6, T7>, TResult>) Spreads a unary function's tuple argument. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, TResult> UntupleArgs<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<Tuple<T1, T2, T3, T4, T5, T6, T7>, TResult> func) Parameters Type Name Description Func < Tuple <T1, T2, T3, T4, T5, T6, T7>, TResult> func Returns Type Description Func <T1, T2, T3, T4, T5, T6, T7, TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 TResult"
  },
  "api/Recore.Functional.Operator.html": {
    "href": "api/Recore.Functional.Operator.html",
    "title": "Class Operator | RecoreFX",
    "keywords": "Class Operator Defines functions corresponding to C# operators. Inheritance Object Operator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Functional Assembly : Recore.dll Syntax public static class Operator Methods | Improve this Doc View Source Not(Boolean) Returns the logical negation of a boolean value. Declaration public static bool Not(bool value) Parameters Type Name Description Boolean value Returns Type Description Boolean"
  },
  "api/Recore.Collections.Generic.ICollectionExtensions.html": {
    "href": "api/Recore.Collections.Generic.ICollectionExtensions.html",
    "title": "Class ICollectionExtensions | RecoreFX",
    "keywords": "Class ICollectionExtensions Provides additional methods for working with ICollection<T> . Inheritance Object ICollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class ICollectionExtensions Methods | Improve this Doc View Source Append<T>(ICollection<T>, T) Adds an item to the collection and passes the collection through. Declaration public static ICollection<T> Append<T>(this ICollection<T> collection, T item) Parameters Type Name Description ICollection <T> collection T item Returns Type Description ICollection <T> Type Parameters Name Description T"
  },
  "api/Recore.AsyncAction-2.html": {
    "href": "api/Recore.AsyncAction-2.html",
    "title": "Delegate AsyncAction<T1, T2> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2> Encapsulates an asynchronous method that has two parameters and does not return a value. Equivalent to Func<T1, T2, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2>(T1 arg1, T2 arg2); Parameters Type Name Description T1 arg1 T2 arg2 Returns Type Description Task Type Parameters Name Description T1 T2"
  },
  "api/Recore.AsyncAction-13.html": {
    "href": "api/Recore.AsyncAction-13.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Encapsulates an asynchronous method that has 13 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 T13 arg13 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13"
  },
  "api/Recore.Of-1.html": {
    "href": "api/Recore.Of-1.html",
    "title": "Class Of<T> | RecoreFX",
    "keywords": "Class Of<T> Abstract base class for defining types that alias an existing type. Inheritance Object Of<T> Implements IEquatable < Of <T>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public abstract class Of<T> : IEquatable<Of<T>> Type Parameters Name Description T Examples Use Of to create a strongly-typed \"alias\" of another type. class Address : Of<string> {} var address = new Address { Value = \"1 Microsoft Way\" }; Console.WriteLine(address); // prints \"1 Microsoft Way\" Properties | Improve this Doc View Source Value The underlying instance of the wrapped type. Declaration public T Value { get; set; } Property Value Type Description T Methods | Improve this Doc View Source Equals(Of<T>) Determines whether two instances of the type are equal. Declaration public bool Equals(Of<T> other) Parameters Type Name Description Of <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether this instance is equal to another object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for the underlying object. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns the string representation for the underlying object. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Of<T>, Of<T>) Determines whether two instances of the type are equal. Declaration public static bool operator ==(Of<T> lhs, Of<T> rhs) Parameters Type Name Description Of <T> lhs Of <T> rhs Returns Type Description Boolean | Improve this Doc View Source Inequality(Of<T>, Of<T>) Determines whether two instances of the type are not equal. Declaration public static bool operator !=(Of<T> lhs, Of<T> rhs) Parameters Type Name Description Of <T> lhs Of <T> rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Recore.Collections.Generic.IReadOnlyDictionaryExtensions.html": {
    "href": "api/Recore.Collections.Generic.IReadOnlyDictionaryExtensions.html",
    "title": "Class IReadOnlyDictionaryExtensions | RecoreFX",
    "keywords": "Class IReadOnlyDictionaryExtensions Provides additional methods for working with IReadOnlyDictionary<TKey,TValue> . Inheritance Object IReadOnlyDictionaryExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class IReadOnlyDictionaryExtensions Methods | Improve this Doc View Source ValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) Gets the value that is associated with the specific key or the default value for the type TValue . Declaration public static TValue ValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dict, TKey key) Parameters Type Name Description IReadOnlyDictionary <TKey, TValue> dict TKey key Returns Type Description TValue Type Parameters Name Description TKey TValue"
  },
  "api/Recore.AsyncFunc-5.html": {
    "href": "api/Recore.AsyncFunc-5.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, TResult> Encapsulates an asynchronous method that has four parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 TResult"
  },
  "api/Recore.Text.StringUtil.html": {
    "href": "api/Recore.Text.StringUtil.html",
    "title": "Class StringUtil | RecoreFX",
    "keywords": "Class StringUtil Contains helper methods for working with strings. Inheritance Object StringUtil Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Text Assembly : Recore.dll Syntax public static class StringUtil Methods | Improve this Doc View Source JoinLines(IEnumerable<String>) Concatenates a sequence of strings into a single string where each input string is separated by NewLine . Declaration public static string JoinLines(IEnumerable<string> lines) Parameters Type Name Description IEnumerable < String > lines Returns Type Description String | Improve this Doc View Source JoinLines(String[]) Concatenates a variable number of string arguments into a single string where each input string is separated by NewLine . Declaration public static string JoinLines(params string[] lines) Parameters Type Name Description String [] lines Returns Type Description String"
  },
  "api/Recore.Linq.Renumerable.html": {
    "href": "api/Recore.Linq.Renumerable.html",
    "title": "Class Renumerable | RecoreFX",
    "keywords": "Class Renumerable Provides additional methods for working with objects that implement IEnumerable<T> . Inheritance Object Renumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Linq Assembly : Recore.dll Syntax public static class Renumerable Methods | Improve this Doc View Source Argmax<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Returns the maximum value and the maximizing value for a function from a sequence of values. Declaration public static (TResult Max, TSource Argmax) Argmax<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters Type Name Description IEnumerable <TSource> source Func <TSource, TResult> selector Returns Type Description ValueTuple <TResult, TSource> Type Parameters Name Description TSource TResult | Improve this Doc View Source Argmin<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Returns the minimum and the minimizing value for a function from a sequence of values. Declaration public static (TResult Min, TSource Argmin) Argmin<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters Type Name Description IEnumerable <TSource> source Func <TSource, TResult> selector Returns Type Description ValueTuple <TResult, TSource> Type Parameters Name Description TSource TResult | Improve this Doc View Source Enumerate<TSource>(IEnumerable<TSource>) Returns each element from a sequence along with its number from the beginning of the sequence, starting from zero. Declaration public static IEnumerable<(int index, TSource item)> Enumerate<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable <TSource> source Returns Type Description IEnumerable < ValueTuple < Int32 , TSource>> Type Parameters Name Description TSource | Improve this Doc View Source Flatten<TSource>(IEnumerable<IEnumerable<TSource>>) Converts a sequence of sequences into a single sequence. Declaration public static IEnumerable<TSource> Flatten<TSource>(this IEnumerable<IEnumerable<TSource>> source) Parameters Type Name Description IEnumerable < IEnumerable <TSource>> source Returns Type Description IEnumerable <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEach<TSource>(IEnumerable<TSource>, Action<TSource>) Performs an action on each element in a sequence. Declaration public static void ForEach<TSource>(this IEnumerable<TSource> source, Action<TSource> action) Parameters Type Name Description IEnumerable <TSource> source Action <TSource> action Type Parameters Name Description TSource Remarks This method is evaluated eagerly. | Improve this Doc View Source NonNull<TSource>(IEnumerable<TSource>) Collects all non-null values from the sequence. Declaration public static IEnumerable<TSource> NonNull<TSource>(this IEnumerable<TSource> source) where TSource : class Parameters Type Name Description IEnumerable <TSource> source Returns Type Description IEnumerable <TSource> Type Parameters Name Description TSource | Improve this Doc View Source NonNull<TSource>(IEnumerable<Nullable<TSource>>) Collects all non-null values from the sequence. Declaration public static IEnumerable<TSource> NonNull<TSource>(this IEnumerable<TSource?> source) where TSource : struct Parameters Type Name Description IEnumerable < Nullable <TSource>> source Returns Type Description IEnumerable <TSource> Type Parameters Name Description TSource | Improve this Doc View Source OnKeys<TKey, TValue, TResult>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TKey, TResult>) Projects each key in a sequence of key-value pairs to a new form. Declaration public static IEnumerable<KeyValuePair<TResult, TValue>> OnKeys<TKey, TValue, TResult>(this IEnumerable<KeyValuePair<TKey, TValue>> source, Func<TKey, TResult> func) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source Func <TKey, TResult> func Returns Type Description IEnumerable < KeyValuePair <TResult, TValue>> Type Parameters Name Description TKey TValue TResult | Improve this Doc View Source OnValues<TKey, TValue, TResult>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<TValue, TResult>) Projects each value in a sequence of key-value pairs to a new form. Declaration public static IEnumerable<KeyValuePair<TKey, TResult>> OnValues<TKey, TValue, TResult>(this IEnumerable<KeyValuePair<TKey, TValue>> source, Func<TValue, TResult> func) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source Func <TValue, TResult> func Returns Type Description IEnumerable < KeyValuePair <TKey, TResult>> Type Parameters Name Description TKey TValue TResult | Improve this Doc View Source Product<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>) Returns each element from a sequence along with its number from the beginning of the sequence, starting from zero. Declaration public static IEnumerable<(TFirst first, TSecond second)> Product<TFirst, TSecond>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second) Parameters Type Name Description IEnumerable <TFirst> first IEnumerable <TSecond> second Returns Type Description IEnumerable < ValueTuple <TFirst, TSecond>> Type Parameters Name Description TFirst TSecond | Improve this Doc View Source ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Creates a Dictionary<TKey,TValue> from a sequence of key-value pairs. Declaration public static Dictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> source Returns Type Description Dictionary <TKey, TValue> Type Parameters Name Description TKey TValue | Improve this Doc View Source ToLinkedList<TSource>(IEnumerable<TSource>) Creates a LinkedList<T> from an IEnumerable<T> . Declaration public static LinkedList<TSource> ToLinkedList<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable <TSource> source Returns Type Description LinkedList <TSource> Type Parameters Name Description TSource Remarks Linked lists don't need to be resized when adding elements, which can give this method better performance than ToList<TSource>(IEnumerable<TSource>) or ToArray<TSource>(IEnumerable<TSource>) . A common case is when you just want to force eager evaluation of a series of operations on an IEnumerable<T> or when you want to cache elements when performing multiple enumerations. For these cases, you don't need random access to elements, which makes LinkedList<T> a suitable data structure for storing the elements. | Improve this Doc View Source Zip<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>) Merges two sequences to a single sequence of tuples. Declaration public static IEnumerable<(TFirst first, TSecond second)> Zip<TFirst, TSecond>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second) Parameters Type Name Description IEnumerable <TFirst> first IEnumerable <TSecond> second Returns Type Description IEnumerable < ValueTuple <TFirst, TSecond>> Type Parameters Name Description TFirst TSecond Remarks If the sequences are of different lengths,"
  },
  "api/Recore.Security.Cryptography.SecureCompare.html": {
    "href": "api/Recore.Security.Cryptography.SecureCompare.html",
    "title": "Class SecureCompare | RecoreFX",
    "keywords": "Class SecureCompare Provides methods for securely comparing objects. Inheritance Object SecureCompare Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Security.Cryptography Assembly : Recore.dll Syntax public static class SecureCompare Methods | Improve this Doc View Source TimeInvariantEquals(Byte[], Byte[]) Checks two byte arrays for equality without early termination. Declaration public static bool TimeInvariantEquals(byte[] lhs, byte[] rhs) Parameters Type Name Description Byte [] lhs Byte [] rhs Returns Type Description Boolean Remarks This method is used to guard against timing attacks . When checking untrusted input against a secret, using a regular element-by-element equality method such as Equals(String) is insecure. For example, suppose you are checking whether an incoming request's signature matches what you expect. In this case, you hash the request payload with your own private key and compare that to the actual signature. If the comparison stops at the first unmatched element in the sequence, an attacker can time the comparison with a high-resolution timer and infer how many elements they guessed correctly. This method assumes that the length of the sequences are equal, such as two strings processed by a hashing algorithm. If the length of the sequence is considered a secret, this method should not be used as it will leak that information in a timing attack."
  },
  "api/Recore.Linq.html": {
    "href": "api/Recore.Linq.html",
    "title": "Namespace Recore.Linq | RecoreFX",
    "keywords": "Namespace Recore.Linq Classes Renumerable Provides additional methods for working with objects that implement IEnumerable<T> ."
  },
  "api/Recore.Collections.Generic.html": {
    "href": "api/Recore.Collections.Generic.html",
    "title": "Namespace Recore.Collections.Generic | RecoreFX",
    "keywords": "Namespace Recore.Collections.Generic Classes ICollectionExtensions Provides additional methods for working with ICollection<T> . IDictionaryExtensions Provides additional methods for working with IDictionary<TKey,TValue> . IReadOnlyDictionaryExtensions Provides additional methods for working with IReadOnlyDictionary<TKey,TValue> . LinkedListExtensions Provides additional methods for working with LinkedList<T> . ListExtensions Provides additional methods for working with List<T> ."
  },
  "api/Recore.AsyncFunc-7.html": {
    "href": "api/Recore.AsyncFunc-7.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, TResult> Encapsulates an asynchronous method that has six parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 TResult"
  },
  "api/Recore.AsyncFunc-15.html": {
    "href": "api/Recore.AsyncFunc-15.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Encapsulates an asynchronous method that has 14 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 T13 arg13 T14 arg14 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 TResult"
  },
  "api/Recore.AsyncAction-9.html": {
    "href": "api/Recore.AsyncAction-9.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9> Encapsulates an asynchronous method that has nine parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9"
  },
  "api/Recore.AsyncFunc-10.html": {
    "href": "api/Recore.AsyncFunc-10.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Encapsulates an asynchronous method that has nine parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 TResult"
  },
  "api/Recore.Token.html": {
    "href": "api/Recore.Token.html",
    "title": "Class Token | RecoreFX",
    "keywords": "Class Token Represents a non-null, non-empty string value where whitespace is not allowed. Inheritance Object Token Implements IEquatable < Token > IComparable < Token > IEquatable < String > IComparable < String > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public sealed class Token : IEquatable<Token>, IComparable<Token>, IEquatable<string>, IComparable<string> Remarks This type is meant to feel like a subclass of String , which is sealed. Constructors | Improve this Doc View Source Token(String) Constructs an instance of Token from a string value. Declaration public Token(string value) Parameters Type Name Description String value Methods | Improve this Doc View Source CompareTo(Token) Compares this instance with a specified Token object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object. Declaration public int CompareTo(Token other) Parameters Type Name Description Token other Returns Type Description Int32 | Improve this Doc View Source CompareTo(String) Compares this instance with a specified String object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object. Declaration public int CompareTo(string other) Parameters Type Name Description String other Returns Type Description Int32 | Improve this Doc View Source Equals(Token) Determines whether this instance and another Token have the same value. Declaration public bool Equals(Token other) Parameters Type Name Description Token other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether this instance and another object, which must be a Token or a String , have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source Equals(String) Determines whether this instance and a String have the same value. Declaration public bool Equals(string other) Parameters Type Name Description String other Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Returns the hash code of the underlying value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns the underlying string value. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Token, Token) Determines whether two instances of Token have the same value. Declaration public static bool operator ==(Token lhs, Token rhs) Parameters Type Name Description Token lhs Token rhs Returns Type Description Boolean | Improve this Doc View Source Implicit(Token to String) Converts this instance to its underlying value. Declaration public static implicit operator string (Token t) Parameters Type Name Description Token t Returns Type Description String | Improve this Doc View Source Inequality(Token, Token) Determines whether two instances of Token have different values. Declaration public static bool operator !=(Token lhs, Token rhs) Parameters Type Name Description Token lhs Token rhs Returns Type Description Boolean Implements System.IEquatable<T> System.IComparable<T> System.IEquatable<T> System.IComparable<T>"
  },
  "api/Recore.AsyncAction.html": {
    "href": "api/Recore.AsyncAction.html",
    "title": "Delegate AsyncAction | RecoreFX",
    "keywords": "Delegate AsyncAction Encapsulates an asynchronous method that has no parameters and does not return a value. Equivalent to Func<Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction(); Returns Type Description Task"
  },
  "api/Recore.AsyncFunc-13.html": {
    "href": "api/Recore.AsyncFunc-13.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Encapsulates an asynchronous method that has 12 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 TResult"
  },
  "api/Recore.AsyncAction-8.html": {
    "href": "api/Recore.AsyncAction-8.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8> Encapsulates an asynchronous method that has eight parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8"
  },
  "api/Recore.AsyncFunc-4.html": {
    "href": "api/Recore.AsyncFunc-4.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, TResult> Encapsulates an asynchronous method that has three parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, TResult>(T1 arg1, T2 arg2, T3 arg3); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 TResult"
  },
  "api/Recore.AsyncFunc-12.html": {
    "href": "api/Recore.AsyncFunc-12.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Encapsulates an asynchronous method that has 11 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 TResult"
  },
  "api/Recore.RelativeUri.html": {
    "href": "api/Recore.RelativeUri.html",
    "title": "Class RelativeUri | RecoreFX",
    "keywords": "Class RelativeUri Represents a relative URI. Inheritance Object Uri RelativeUri Implements ISerializable Inherited Members Uri.SchemeDelimiter Uri.UriSchemeFile Uri.UriSchemeFtp Uri.UriSchemeGopher Uri.UriSchemeHttp Uri.UriSchemeHttps Uri.UriSchemeMailto Uri.UriSchemeNetPipe Uri.UriSchemeNetTcp Uri.UriSchemeNews Uri.UriSchemeNntp Uri.Canonicalize() Uri.CheckHostName(String) Uri.CheckSchemeName(String) Uri.CheckSecurity() Uri.Compare(Uri, Uri, UriComponents, UriFormat, StringComparison) Uri.Equals(Object) Uri.Escape() Uri.EscapeDataString(String) Uri.EscapeString(String) Uri.EscapeUriString(String) Uri.FromHex(Char) Uri.GetComponents(UriComponents, UriFormat) Uri.GetHashCode() Uri.GetLeftPart(UriPartial) Uri.GetObjectData(SerializationInfo, StreamingContext) Uri.HexEscape(Char) Uri.HexUnescape(String, Int32) Uri.IsBadFileSystemCharacter(Char) Uri.IsBaseOf(Uri) Uri.IsExcludedCharacter(Char) Uri.IsHexDigit(Char) Uri.IsHexEncoding(String, Int32) Uri.IsReservedCharacter(Char) Uri.IsWellFormedOriginalString() Uri.IsWellFormedUriString(String, UriKind) Uri.MakeRelative(Uri) Uri.MakeRelativeUri(Uri) Uri.Parse() Uri.ISerializable.GetObjectData(SerializationInfo, StreamingContext) Uri.ToString() Uri.TryCreate(String, UriKind, Uri) Uri.TryCreate(Uri, String, Uri) Uri.TryCreate(Uri, Uri, Uri) Uri.Unescape(String) Uri.UnescapeDataString(String) Uri.AbsolutePath Uri.AbsoluteUri Uri.Authority Uri.DnsSafeHost Uri.Fragment Uri.Host Uri.HostNameType Uri.IdnHost Uri.IsAbsoluteUri Uri.IsDefaultPort Uri.IsFile Uri.IsLoopback Uri.IsUnc Uri.LocalPath Uri.OriginalString Uri.PathAndQuery Uri.Port Uri.Query Uri.Scheme Uri.Segments Uri.UserEscaped Uri.UserInfo Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public class RelativeUri : Uri, ISerializable Constructors | Improve this Doc View Source RelativeUri(String) Initializes a new instance of RelativeUri with the given URI. Declaration public RelativeUri(string uriString) Parameters Type Name Description String uriString Methods | Improve this Doc View Source Combine(RelativeUri) Appends a path to a relative URI. Declaration public RelativeUri Combine(RelativeUri relativeUri) Parameters Type Name Description RelativeUri relativeUri Returns Type Description RelativeUri Remarks The constructor Uri(Uri, Uri) will throw a UriFormatException if called with two relative URIs. | Improve this Doc View Source Combine(String) Appends a path to a relative URI. Declaration public RelativeUri Combine(string relativeUri) Parameters Type Name Description String relativeUri Returns Type Description RelativeUri Remarks The constructor Uri(Uri, String) will throw a UriFormatException if called with two relative URIs. Implements System.Runtime.Serialization.ISerializable Extension Methods UriExtensions.AsAbsoluteUri(Uri)"
  },
  "api/Recore.Collections.Generic.ListExtensions.html": {
    "href": "api/Recore.Collections.Generic.ListExtensions.html",
    "title": "Class ListExtensions | RecoreFX",
    "keywords": "Class ListExtensions Provides additional methods for working with List<T> . Inheritance Object ListExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class ListExtensions Methods | Improve this Doc View Source AppendRange<T>(List<T>, IEnumerable<T>) Adds the elements of the specified collection to the end of the list and passes the list through. Declaration public static List<T> AppendRange<T>(this List<T> list, IEnumerable<T> collection) Parameters Type Name Description List <T> list IEnumerable <T> collection Returns Type Description List <T> Type Parameters Name Description T"
  },
  "api/Recore.AsyncFunc-6.html": {
    "href": "api/Recore.AsyncFunc-6.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, TResult> Encapsulates an asynchronous method that has five parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 TResult"
  },
  "api/Recore.AsyncFunc-16.html": {
    "href": "api/Recore.AsyncFunc-16.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Encapsulates an asynchronous method that has 15 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 T13 arg13 T14 arg14 T15 arg15 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 TResult"
  },
  "api/Recore.AsyncFunc-11.html": {
    "href": "api/Recore.AsyncFunc-11.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Encapsulates an asynchronous method that has 10 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 TResult"
  },
  "api/Recore.AsyncAction-4.html": {
    "href": "api/Recore.AsyncAction-4.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4> Encapsulates an asynchronous method that has four parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4"
  },
  "api/Recore.AsyncFunc-2.html": {
    "href": "api/Recore.AsyncFunc-2.html",
    "title": "Delegate AsyncFunc<T, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T, TResult> Encapsulates an asynchronous method that has one parameter and returns a value of the type specified by the TResult parameter. Equivalent to Func<Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T, TResult>(T obj); Parameters Type Name Description T obj Returns Type Description Task <TResult> Type Parameters Name Description T TResult"
  },
  "api/Recore.AsyncFunc-9.html": {
    "href": "api/Recore.AsyncFunc-9.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Encapsulates an asynchronous method that has eight parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 TResult"
  },
  "api/Recore.Collections.Generic.LinkedListExtensions.html": {
    "href": "api/Recore.Collections.Generic.LinkedListExtensions.html",
    "title": "Class LinkedListExtensions | RecoreFX",
    "keywords": "Class LinkedListExtensions Provides additional methods for working with LinkedList<T> . Inheritance Object LinkedListExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class LinkedListExtensions Methods | Improve this Doc View Source Add<T>(LinkedList<T>, T) Adds a new node with containing the specified value to the end of the LinkedList<T> . Declaration public static void Add<T>(this LinkedList<T> linkedList, T item) Parameters Type Name Description LinkedList <T> linkedList T item Type Parameters Name Description T Remarks This method is the same as AddLast(T) . It is needed to be able to use collection initializer syntax with LinkedList<T> . | Improve this Doc View Source Append<T>(LinkedList<T>, T) Adds a new node with containing the specified value to the end of the LinkedList<T> and returns the LinkedList<T> . Declaration public static LinkedList<T> Append<T>(this LinkedList<T> linkedList, T item) Parameters Type Name Description LinkedList <T> linkedList T item Returns Type Description LinkedList <T> Type Parameters Name Description T"
  },
  "api/Recore.Functional.Lift.html": {
    "href": "api/Recore.Functional.Lift.html",
    "title": "Class Lift | RecoreFX",
    "keywords": "Class Lift Adapts functions to operate on functors. Inheritance Object Lift Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Functional Assembly : Recore.dll Syntax public static class Lift Methods | Improve this Doc View Source OnEither<TLeft, TRight>(Action<TLeft>, Action<TRight>) Combines two unary actions into a single action taking either of their parameters. Declaration public static Action<Either<TLeft, TRight>> OnEither<TLeft, TRight>(Action<TLeft> leftAction, Action<TRight> rightAction) Parameters Type Name Description Action <TLeft> leftAction Action <TRight> rightAction Returns Type Description Action < Either <TLeft, TRight>> Type Parameters Name Description TLeft TRight | Improve this Doc View Source OnEither<TLeft, TRight, TResult>(Func<TLeft, TResult>, Func<TRight, TResult>) Combines two unary functions with the same return type into a single function taking either of their parameters. Declaration public static Func<Either<TLeft, TRight>, TResult> OnEither<TLeft, TRight, TResult>(Func<TLeft, TResult> leftFunc, Func<TRight, TResult> rightFunc) Parameters Type Name Description Func <TLeft, TResult> leftFunc Func <TRight, TResult> rightFunc Returns Type Description Func < Either <TLeft, TRight>, TResult> Type Parameters Name Description TLeft TRight TResult | Improve this Doc View Source OnEnumerable<T>(Action<T>) Converts an action operating on a scalar value to an action operating on a sequence of values. Declaration public static Action<IEnumerable<T>> OnEnumerable<T>(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description Action < IEnumerable <T>> Type Parameters Name Description T | Improve this Doc View Source OnEnumerable<T, TResult>(Func<T, TResult>) Converts a function operating on a scalar value to a function operating on a sequence of values. Declaration public static Func<IEnumerable<T>, IEnumerable<TResult>> OnEnumerable<T, TResult>(Func<T, TResult> func) Parameters Type Name Description Func <T, TResult> func Returns Type Description Func < IEnumerable <T>, IEnumerable <TResult>> Type Parameters Name Description T TResult | Improve this Doc View Source OnOptional<T>(Action<T>) Converts a unary action to work with Optional . Declaration public static Action<Optional<T>> OnOptional<T>(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description Action < Optional <T>> Type Parameters Name Description T | Improve this Doc View Source OnOptional<T, TResult>(Func<T, TResult>) Converts a unary function to work with Optional . Declaration public static Func<Optional<T>, Optional<TResult>> OnOptional<T, TResult>(Func<T, TResult> func) Parameters Type Name Description Func <T, TResult> func Returns Type Description Func < Optional <T>, Optional <TResult>> Type Parameters Name Description T TResult"
  },
  "api/Recore.Text.Wildcard.html": {
    "href": "api/Recore.Text.Wildcard.html",
    "title": "Class Wildcard | RecoreFX",
    "keywords": "Class Wildcard Represents a text pattern with * and ? wildcard characters. Inheritance Object Wildcard Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Text Assembly : Recore.dll Syntax public sealed class Wildcard Remarks In evaluating matches for the pattern, * will match zero or more characters while ? will match a single character. Constructors | Improve this Doc View Source Wildcard(String) Initializes a new instance of the Wildcard type with the specified pattern. Declaration public Wildcard(string pattern) Parameters Type Name Description String pattern Properties | Improve this Doc View Source Pattern Gets the pattern that was passed to the Wildcard constructor. Declaration public string Pattern { get; } Property Value Type Description String Methods | Improve this Doc View Source IsMatch(String) Determines whether a string matches the wildcard pattern. Declaration public bool IsMatch(string text) Parameters Type Name Description String text Returns Type Description Boolean"
  },
  "api/Recore.StringExtensions.html": {
    "href": "api/Recore.StringExtensions.html",
    "title": "Class StringExtensions | RecoreFX",
    "keywords": "Class StringExtensions Provides additional methods for working with strings. Inheritance Object StringExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class StringExtensions Methods | Improve this Doc View Source Tokenize(String) Splits a string into a sequence of tokens on its whitespace characters. Declaration public static Token[] Tokenize(this string str) Parameters Type Name Description String str Returns Type Description Token [] Remarks While a particular string may consist of tokens delimited by some other character or string, this method does not provide an option for this by design. This is consistent with the Token type itself, which does not check for any characters besides whitespace."
  },
  "api/Recore.Threading.Tasks.TaskExtensions.html": {
    "href": "api/Recore.Threading.Tasks.TaskExtensions.html",
    "title": "Class TaskExtensions | RecoreFX",
    "keywords": "Class TaskExtensions Provides additional methods for working with tasks. Inheritance Object TaskExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Threading.Tasks Assembly : Recore.dll Syntax public static class TaskExtensions Methods | Improve this Doc View Source Synchronize(Task) Blocks the current thread until the task completes. Declaration public static void Synchronize(this Task task) Parameters Type Name Description Task task Remarks If task is terminated by an exception, that exception will be rethrown in the current context. Unlike Wait() , that exception will be of its original type, not AggregateException . It will also preserve its original stack trace. This exception-throwing behavior is the same as if you had used await . Note that it is still possible to deadlock with this method. See https://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html . | Improve this Doc View Source Synchronize<T>(Task<T>) Blocks the current thread until the task completes. Declaration public static T Synchronize<T>(this Task<T> task) Parameters Type Name Description Task <T> task Returns Type Description T Type Parameters Name Description T Remarks If task is terminated by an exception, that exception will be rethrown in the current context. Unlike Result , that exception will be of its original type, not AggregateException . It will also preserve its original stack trace. This exception-throwing behavior is the same as if you had used await . Note that it is still possible to deadlock with this method. See https://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html ."
  },
  "api/Recore.Optional.html": {
    "href": "api/Recore.Optional.html",
    "title": "Class Optional | RecoreFX",
    "keywords": "Class Optional Provides additional methods for Optional<T> . Inheritance Object Optional Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Optional Methods | Improve this Doc View Source AwaitAsync<T>(Optional<Task<T>>) Converts an Optional<Task<T>> to a Task<Optional<T>> . Declaration public static Task<Optional<T>> AwaitAsync<T>(this Optional<Task<T>> optionalTask) Parameters Type Name Description Optional < Task <T>> optionalTask Returns Type Description Task < Optional <T>> Type Parameters Name Description T | Improve this Doc View Source Flatten<T>(Optional<Optional<T>>) Converts an Optional<Optional<T>> to an Optional<T> . Declaration public static Optional<T> Flatten<T>(this Optional<Optional<T>> optionalOptional) Parameters Type Name Description Optional < Optional <T>> optionalOptional Returns Type Description Optional <T> Type Parameters Name Description T | Improve this Doc View Source If<T>(Boolean, T) Sets an optional value if a condition is true. Declaration public static Optional<T> If<T>(bool condition, T value) Parameters Type Name Description Boolean condition T value Returns Type Description Optional <T> Type Parameters Name Description T Remarks This method is useful for converting the TryParse pattern to an Optional<T> result. | Improve this Doc View Source NonEmpty<T>(IEnumerable<Optional<T>>) Collects the non-empty values from the sequence. Declaration public static IEnumerable<T> NonEmpty<T>(this IEnumerable<Optional<T>> source) Parameters Type Name Description IEnumerable < Optional <T>> source Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source Of<T>(T) Makes a value optional. Declaration public static Optional<T> Of<T>(T value) Parameters Type Name Description T value Returns Type Description Optional <T> Type Parameters Name Description T Remarks This is useful for type inference in some cases where the implicit conversion can't be used, such as creating an Optional<T> and immediately invoking a method. It can also be passed as a delegate whereas the constructor can't be."
  },
  "api/Recore.Defer.html": {
    "href": "api/Recore.Defer.html",
    "title": "Class Defer | RecoreFX",
    "keywords": "Class Defer Invokes an action when disposed. Inheritance Object Defer Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public sealed class Defer : IDisposable Remarks Not thread-safe. Concurrent calls to dispose the object may result in the action being invoked multiple times. However, synchronous calls to Dispose() are idempotent. If an instance of this type is created and never disposed, the callback will not be called. By design, the callback is not called from the finalizer, which would happen non-determinstically. Constructors | Improve this Doc View Source Defer(Action) Initializes an object with an action to invoke when the object is disposed. Declaration public Defer(Action action) Parameters Type Name Description Action action Methods | Improve this Doc View Source Dispose() Invokes the callback registered with the object and marks the object as disposed. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Recore.AsyncFunc-8.html": {
    "href": "api/Recore.AsyncFunc-8.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, TResult> Encapsulates an asynchronous method that has seven parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 TResult"
  },
  "api/Recore.Hasher.html": {
    "href": "api/Recore.Hasher.html",
    "title": "Class Hasher | RecoreFX",
    "keywords": "Class Hasher Computes hash codes for types. Inheritance Object Hasher Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Hasher Methods | Improve this Doc View Source GetHashCode(Int32, Int32, Int32, Object[]) Combines the hash codes of one or more objects into a single hash code. Declaration public static int GetHashCode(int seed1 = 17, int seed2 = 23, int nullHash = 0, params object[] fields) Parameters Type Name Description Int32 seed1 Int32 seed2 Int32 nullHash Object [] fields Returns Type Description Int32 Remarks This is useful for computing the hash code for a type from the hash codes of all its members. It is superseded in .NET Standard 2.1 by the System.HashCode type."
  },
  "api/Recore.AsyncFunc-1.html": {
    "href": "api/Recore.AsyncFunc-1.html",
    "title": "Delegate AsyncFunc<TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<TResult> Encapsulates an asynchronous method that has no parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<TResult>(); Returns Type Description Task <TResult> Type Parameters Name Description TResult"
  },
  "api/Recore.AsyncAction-3.html": {
    "href": "api/Recore.AsyncAction-3.html",
    "title": "Delegate AsyncAction<T1, T2, T3> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3> Encapsulates an asynchronous method that has three parameters and does not return a value. Equivalent to Func<T1, T2, T3, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 Returns Type Description Task Type Parameters Name Description T1 T2 T3"
  },
  "api/Recore.AsyncAction-11.html": {
    "href": "api/Recore.AsyncAction-11.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Encapsulates an asynchronous method that has 11 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11"
  },
  "api/Recore.Collections.Generic.IDictionaryExtensions.html": {
    "href": "api/Recore.Collections.Generic.IDictionaryExtensions.html",
    "title": "Class IDictionaryExtensions | RecoreFX",
    "keywords": "Class IDictionaryExtensions Provides additional methods for working with IDictionary<TKey,TValue> . Inheritance Object IDictionaryExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class IDictionaryExtensions Methods | Improve this Doc View Source Append<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Adds an entry to the dictionary and passes the dictionary through. Declaration public static IDictionary<TKey, TValue> Append<TKey, TValue>(this IDictionary<TKey, TValue> dict, TKey key, TValue value) Parameters Type Name Description IDictionary <TKey, TValue> dict TKey key TValue value Returns Type Description IDictionary <TKey, TValue> Type Parameters Name Description TKey TValue | Improve this Doc View Source ValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) Gets the value that is associated with the specific key or the default value for the type TValue . Declaration public static TValue ValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dict, TKey key) Parameters Type Name Description IReadOnlyDictionary <TKey, TValue> dict TKey key Returns Type Description TValue Type Parameters Name Description TKey TValue Remarks This is duplicated from IReadOnlyDictionaryExtensions because IDictionary does not extend IReadOnlyDictionary ."
  },
  "api/Recore.AsyncFunc-3.html": {
    "href": "api/Recore.AsyncFunc-3.html",
    "title": "Delegate AsyncFunc<T1, T2, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, TResult> Encapsulates an asynchronous method that has two parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, TResult>(T1 arg1, T2 arg2); Parameters Type Name Description T1 arg1 T2 arg2 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 TResult"
  },
  "api/Recore.Result.Catcher-1.html": {
    "href": "api/Recore.Result.Catcher-1.html",
    "title": "Class Result.Catcher<TValue> | RecoreFX",
    "keywords": "Class Result.Catcher<TValue> Wraps a function to be executed and converted to Result<TValue, TError> . Inheritance Object Result.Catcher<TValue> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public sealed class Catcher<TValue> Type Parameters Name Description TValue Methods | Improve this Doc View Source Catch<TException>() Executes the stored function and catches exceptions of the given type. Declaration public Result<TValue, TException> Catch<TException>() where TException : Exception Returns Type Description Result <TValue, TException> Type Parameters Name Description TException | Improve this Doc View Source Catch<TException>(Func<TException, Boolean>) Executes the stored function and catches exceptions of the given type matching the given predicate. Declaration public Result<TValue, TException> Catch<TException>(Func<TException, bool> predicate = null) where TException : Exception Parameters Type Name Description Func <TException, Boolean > predicate Returns Type Description Result <TValue, TException> Type Parameters Name Description TException"
  },
  "api/Recore.Security.Cryptography.html": {
    "href": "api/Recore.Security.Cryptography.html",
    "title": "Namespace Recore.Security.Cryptography | RecoreFX",
    "keywords": "Namespace Recore.Security.Cryptography Classes SecureCompare Provides methods for securely comparing objects."
  },
  "api/Recore.Unit.html": {
    "href": "api/Recore.Unit.html",
    "title": "Struct Unit | RecoreFX",
    "keywords": "Struct Unit A type with only one value. Implements IEquatable < Unit > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public struct Unit : IEquatable<Unit> Remarks Whereas Void is a type with no values, Unit is a type with one value. It is useful when designing generic types or methods so that a non-generic version does not have to be provided. It is also useful for fluent interfaces (such as LINQ) so that a chain of method calls does not have to be broken by a Void -returning call. Properties | Improve this Doc View Source Value A singleton Unit value. Declaration public static Unit Value { get; } Property Value Type Description Unit Methods | Improve this Doc View Source Close(Action) Converts a return type of Void to a return type of Unit . Declaration public static Func<Unit> Close(Action action) Parameters Type Name Description Action action Returns Type Description Func < Unit > | Improve this Doc View Source Equals(Unit) Two unit instances are always equal. Declaration public bool Equals(Unit other) Parameters Type Name Description Unit other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether another object is the unit value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code of the unit value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string representation of the unit value. Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Unit, Unit) Two unit instances are always equal. Declaration public static bool operator ==(Unit lhs, Unit rhs) Parameters Type Name Description Unit lhs Unit rhs Returns Type Description Boolean | Improve this Doc View Source Inequality(Unit, Unit) Two unit instances are always equal. Declaration public static bool operator !=(Unit lhs, Unit rhs) Parameters Type Name Description Unit lhs Unit rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Recore.Result.html": {
    "href": "api/Recore.Result.html",
    "title": "Class Result | RecoreFX",
    "keywords": "Class Result Provides additional methods for Result<TValue, TError> . Inheritance Object Result Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Result Methods | Improve this Doc View Source Errors<TValue, TError>(IEnumerable<Result<TValue, TError>>) Collects all the errors from failed results from the sequence. Declaration public static IEnumerable<TError> Errors<TValue, TError>(this IEnumerable<Result<TValue, TError>> source) Parameters Type Name Description IEnumerable < Result <TValue, TError>> source Returns Type Description IEnumerable <TError> Type Parameters Name Description TValue TError | Improve this Doc View Source Failure<TValue, TError>(TError) Creates a failed result. Declaration public static Result<TValue, TError> Failure<TValue, TError>(TError error) Parameters Type Name Description TError error Returns Type Description Result <TValue, TError> Type Parameters Name Description TValue TError | Improve this Doc View Source Flatten<TValue, TError>(Result<Result<TValue, TError>, TError>) Converts a Result<Result<TValue, TError>, TError> to a Result<TValue, TError> . Declaration public static Result<TValue, TError> Flatten<TValue, TError>(this Result<Result<TValue, TError>, TError> resultResult) Parameters Type Name Description Result < Result <TValue, TError>, TError> resultResult Returns Type Description Result <TValue, TError> Type Parameters Name Description TValue TError | Improve this Doc View Source Success<TValue, TError>(TValue) Creates a successful result. Declaration public static Result<TValue, TError> Success<TValue, TError>(TValue value) Parameters Type Name Description TValue value Returns Type Description Result <TValue, TError> Type Parameters Name Description TValue TError | Improve this Doc View Source Try<TValue>(Func<TValue>) Suspends a function to be executed by Catch<TException>() . Declaration public static Result.Catcher<TValue> Try<TValue>(Func<TValue> func) Parameters Type Name Description Func <TValue> func Returns Type Description Result.Catcher <TValue> Type Parameters Name Description TValue | Improve this Doc View Source Values<TValue, TError>(IEnumerable<Result<TValue, TError>>) Collects all the values of successful results from the sequence. Declaration public static IEnumerable<TValue> Values<TValue, TError>(this IEnumerable<Result<TValue, TError>> source) Parameters Type Name Description IEnumerable < Result <TValue, TError>> source Returns Type Description IEnumerable <TValue> Type Parameters Name Description TValue TError"
  },
  "api/Recore.AsyncAction-5.html": {
    "href": "api/Recore.AsyncAction-5.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5> Encapsulates an asynchronous method that has five parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5"
  },
  "api/Recore.AsyncAction-15.html": {
    "href": "api/Recore.AsyncAction-15.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Encapsulates an asynchronous method that has 15 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 T13 arg13 T14 arg14 T15 arg15 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15"
  },
  "api/Recore.AsyncFunc-14.html": {
    "href": "api/Recore.AsyncFunc-14.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Encapsulates an asynchronous method that has 13 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 T13 arg13 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 TResult"
  },
  "api/Recore.AsyncAction-6.html": {
    "href": "api/Recore.AsyncAction-6.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6> Encapsulates an asynchronous method that has six parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6"
  },
  "api/Recore.AsyncAction-1.html": {
    "href": "api/Recore.AsyncAction-1.html",
    "title": "Delegate AsyncAction<T> | RecoreFX",
    "keywords": "Delegate AsyncAction<T> Encapsulates an asynchronous method that has one parameter and does not return a value. Equivalent to Func<T, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T>(T obj); Parameters Type Name Description T obj Returns Type Description Task Type Parameters Name Description T"
  },
  "api/Recore.Text.html": {
    "href": "api/Recore.Text.html",
    "title": "Namespace Recore.Text | RecoreFX",
    "keywords": "Namespace Recore.Text Classes StringUtil Contains helper methods for working with strings. Wildcard Represents a text pattern with * and ? wildcard characters."
  },
  "api/Recore.AsyncAction-7.html": {
    "href": "api/Recore.AsyncAction-7.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7> Encapsulates an asynchronous method that has seven parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7"
  },
  "api/Recore.AsyncAction-14.html": {
    "href": "api/Recore.AsyncAction-14.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Encapsulates an asynchronous method that has 14 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 T13 arg13 T14 arg14 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14"
  },
  "api/Recore.UriExtensions.html": {
    "href": "api/Recore.UriExtensions.html",
    "title": "Class UriExtensions | RecoreFX",
    "keywords": "Class UriExtensions Extension methods for the Uri type. Inheritance Object UriExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class UriExtensions Methods | Improve this Doc View Source AsAbsoluteUri(Uri) Returns an instance of AbsoluteUri with the same value as uri if it is absolute, or null if it is relative. Declaration public static AbsoluteUri AsAbsoluteUri(this Uri uri) Parameters Type Name Description Uri uri Returns Type Description AbsoluteUri Remarks Because an instance of Uri may be neither AbsoluteUri nor RelativeUri , patterns like (AbsoluteUri)uri or uri as AbsoluteUri cannot be used reliably. AsAbsoluteUri(Uri) works as uri as AbsoluteUri would if Uri were an abstract base class. It complements IsAbsoluteUri in this regard."
  },
  "api/Recore.AsyncFunc-17.html": {
    "href": "api/Recore.AsyncFunc-17.html",
    "title": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> | RecoreFX",
    "keywords": "Delegate AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> Encapsulates an asynchronous method that has 16 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task<TResult> AsyncFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 T13 arg13 T14 arg14 T15 arg15 T16 arg16 Returns Type Description Task <TResult> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16 TResult"
  },
  "api/Recore.AsyncAction-16.html": {
    "href": "api/Recore.AsyncAction-16.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Encapsulates an asynchronous method that has 16 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 T13 arg13 T14 arg14 T15 arg15 T16 arg16 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15 T16"
  },
  "api/Recore.AbsoluteUri.html": {
    "href": "api/Recore.AbsoluteUri.html",
    "title": "Class AbsoluteUri | RecoreFX",
    "keywords": "Class AbsoluteUri Represents an absolute URI. Inheritance Object Uri AbsoluteUri Implements ISerializable Inherited Members Uri.SchemeDelimiter Uri.UriSchemeFile Uri.UriSchemeFtp Uri.UriSchemeGopher Uri.UriSchemeHttp Uri.UriSchemeHttps Uri.UriSchemeMailto Uri.UriSchemeNetPipe Uri.UriSchemeNetTcp Uri.UriSchemeNews Uri.UriSchemeNntp Uri.Canonicalize() Uri.CheckHostName(String) Uri.CheckSchemeName(String) Uri.CheckSecurity() Uri.Compare(Uri, Uri, UriComponents, UriFormat, StringComparison) Uri.Equals(Object) Uri.Escape() Uri.EscapeDataString(String) Uri.EscapeString(String) Uri.EscapeUriString(String) Uri.FromHex(Char) Uri.GetComponents(UriComponents, UriFormat) Uri.GetHashCode() Uri.GetLeftPart(UriPartial) Uri.GetObjectData(SerializationInfo, StreamingContext) Uri.HexEscape(Char) Uri.HexUnescape(String, Int32) Uri.IsBadFileSystemCharacter(Char) Uri.IsBaseOf(Uri) Uri.IsExcludedCharacter(Char) Uri.IsHexDigit(Char) Uri.IsHexEncoding(String, Int32) Uri.IsReservedCharacter(Char) Uri.IsWellFormedOriginalString() Uri.IsWellFormedUriString(String, UriKind) Uri.MakeRelative(Uri) Uri.MakeRelativeUri(Uri) Uri.Parse() Uri.ISerializable.GetObjectData(SerializationInfo, StreamingContext) Uri.ToString() Uri.TryCreate(String, UriKind, Uri) Uri.TryCreate(Uri, String, Uri) Uri.TryCreate(Uri, Uri, Uri) Uri.Unescape(String) Uri.UnescapeDataString(String) Uri.AbsolutePath Uri.AbsoluteUri Uri.Authority Uri.DnsSafeHost Uri.Fragment Uri.Host Uri.HostNameType Uri.IdnHost Uri.IsAbsoluteUri Uri.IsDefaultPort Uri.IsFile Uri.IsLoopback Uri.IsUnc Uri.LocalPath Uri.OriginalString Uri.PathAndQuery Uri.Port Uri.Query Uri.Scheme Uri.Segments Uri.UserEscaped Uri.UserInfo Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public class AbsoluteUri : Uri, ISerializable Constructors | Improve this Doc View Source AbsoluteUri(String) Initializes a new instance of AbsoluteUri with the given URI. Declaration public AbsoluteUri(string uriString) Parameters Type Name Description String uriString | Improve this Doc View Source AbsoluteUri(Uri, RelativeUri) Initializes a new instance of AbsoluteUri with the given base URI and relative URI. Declaration public AbsoluteUri(Uri baseUri, RelativeUri relativeUri) Parameters Type Name Description Uri baseUri RelativeUri relativeUri | Improve this Doc View Source AbsoluteUri(Uri, String) Initializes a new instance of AbsoluteUri with the given base URI and relative URI. Declaration public AbsoluteUri(Uri baseUri, string relativeUri) Parameters Type Name Description Uri baseUri String relativeUri | Improve this Doc View Source AbsoluteUri(Uri, Uri) Initializes a new instance of AbsoluteUri with the given base URI and relative URI. Declaration public AbsoluteUri(Uri baseUri, Uri relativeUri) Parameters Type Name Description Uri baseUri Uri relativeUri Methods | Improve this Doc View Source Combine(RelativeUri) Appends a path to an absolute URI. Declaration public AbsoluteUri Combine(RelativeUri relativeUri) Parameters Type Name Description RelativeUri relativeUri Returns Type Description AbsoluteUri Remarks This is a strongly typed alternative to the constructor AbsoluteUri(Uri, Uri) . Also, the constructor will keep the relative part of the base URI only if it is terminated with a slash. This operator ensures that the relative part of the base URI is always preserved. | Improve this Doc View Source Combine(String) Appends a path to an absolute URI. Declaration public AbsoluteUri Combine(string relativeUri) Parameters Type Name Description String relativeUri Returns Type Description AbsoluteUri Remarks This is a strongly typed alternative to the constructor AbsoluteUri(Uri, String) . Also, the constructor will keep the relative part of the base URI only if it is terminated with a slash. This operator ensures that the relative part of the base URI is always preserved. Implements System.Runtime.Serialization.ISerializable Extension Methods UriExtensions.AsAbsoluteUri(Uri)"
  },
  "index.html": {
    "href": "index.html",
    "title": "RecoreFX | RecoreFX",
    "keywords": "RecoreFX RecoreFX fills the most common needs for C# code after the .NET standard library. Installation Install from NuGet : dotnet add package RecoreFX Why Recore? There are other packages offering more LINQ-style methods, better URI handling, or implementations of Optional . These packages admittedly have richer feature sets than Recore has, and may be right for your project if you want that depth of functionality. RecoreFX is designed to feel like a natural extension of CoreFX. It's meant to be a one-stop shop, filling in the most common use cases without a steep learning curve."
  },
  "api/Recore.Optional-1.html": {
    "href": "api/Recore.Optional-1.html",
    "title": "Struct Optional<T> | RecoreFX",
    "keywords": "Struct Optional<T> Provides type-safe access to a nullable value. Implements IEquatable < Optional <T>> IEnumerable <T> IEnumerable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public struct Optional<T> : IEquatable<Optional<T>>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc View Source Optional(T) Creates an Optional<T> with a value. Declaration public Optional(T value) Parameters Type Name Description T value Remarks If null is passed for value , then the Optional<T> is considered empty. Properties | Improve this Doc View Source Empty Creates an Optional<T> without a value. Declaration public static Optional<T> Empty { get; } Property Value Type Description Optional <T> Remarks While an empty Optional<T> can also be created by calling the default constructor or passing null to the constructor, Empty is more expressive, making the absence of a value more obvious. | Improve this Doc View Source HasValue Indicates whether the Optional<T> was created with a value. Declaration public bool HasValue { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(Optional<T>) Determines whether this instance and another Optional<T> have the same value. Declaration public bool Equals(Optional<T> other) Parameters Type Name Description Optional <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether this instance and another object, which must also be an Optional<T> , have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetEnumerator() Returns an object that either yields the underlying value once or yields nothing if there is no value. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source GetHashCode() Returns the hash code for the underlying type or zero if there is no value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source IfEmpty(Action) Takes an action only if the Optional<T> is empty. Declaration public void IfEmpty(Action onEmpty) Parameters Type Name Description Action onEmpty | Improve this Doc View Source IfValue(Action<T>) Takes an action only if the Optional<T> has a value. Declaration public void IfValue(Action<T> onValue) Parameters Type Name Description Action <T> onValue | Improve this Doc View Source OnValue<U>(Func<T, U>) Maps a function over the Optional<T> 's value, or propagates Empty . Declaration public Optional<U> OnValue<U>(Func<T, U> f) Parameters Type Name Description Func <T, U> f Returns Type Description Optional <U> Type Parameters Name Description U | Improve this Doc View Source Switch(Action<T>, Action) Chooses an action to take depending on whether the Optional<T> has a value. Declaration public void Switch(Action<T> onValue, Action onEmpty) Parameters Type Name Description Action <T> onValue Called when the Optional<T> has a value. Action onEmpty Called when the Optional<T> does not have a value. | Improve this Doc View Source Switch<U>(Func<T, U>, Func<U>) Chooses a function to call depending on whether the Optional<T> has a value. Declaration public U Switch<U>(Func<T, U> onValue, Func<U> onEmpty) Parameters Type Name Description Func <T, U> onValue Called when the Optional<T> has a value. Func <U> onEmpty Called when the Optional<T> does not have a value. Returns Type Description U Result of the function that was called. Type Parameters Name Description U | Improve this Doc View Source Then<U>(Func<T, Optional<U>>) Chains another Optional<T> -producing operation onto the result of another. Declaration public Optional<U> Then<U>(Func<T, Optional<U>> f) Parameters Type Name Description Func <T, Optional <U>> f Returns Type Description Optional <U> Type Parameters Name Description U Remarks This is a monad bind operation. Conceptually, it is the same as passing f to OnValue and then \"flattening\" the Optionlt;Optional< T >> into an Optional< T > . (Note that Optionlt;Optional< T >> is not a valid Optional<T> because of the type constraint where T : class .) | Improve this Doc View Source ToString() Returns the value's string representation, or a localized \"none\" message. Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() | Improve this Doc View Source ValueOr(T) Extracts the value with a fallback if the Optional<T> is empty. Declaration public T ValueOr(T fallback) Parameters Type Name Description T fallback Returns Type Description T Operators | Improve this Doc View Source Equality(Optional<T>, Optional<T>) Determines whether two instances of Optional<T> have the same value. Declaration public static bool operator ==(Optional<T> lhs, Optional<T> rhs) Parameters Type Name Description Optional <T> lhs Optional <T> rhs Returns Type Description Boolean | Improve this Doc View Source Explicit(Optional<T> to T) Casts this instance to its underlying value or the default value for the underlying type. Declaration public static explicit operator T(Optional<T> optional) Parameters Type Name Description Optional <T> optional Returns Type Description T | Improve this Doc View Source Implicit(T to Optional<T>) Converts an instance of a type to an optional value. Declaration public static implicit operator Optional<T>(T value) Parameters Type Name Description T value Returns Type Description Optional <T> | Improve this Doc View Source Inequality(Optional<T>, Optional<T>) Determines whether two instances of Optional<T> have different values. Declaration public static bool operator !=(Optional<T> lhs, Optional<T> rhs) Parameters Type Name Description Optional <T> lhs Optional <T> rhs Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an object that either yields the underlying value once or yields nothing if there is no value. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.IEquatable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Renumerable.Argmax<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Renumerable.Argmin<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Renumerable.Enumerate<TSource>(IEnumerable<TSource>) Renumerable.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>) Renumerable.Product<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>) Renumerable.ToLinkedList<TSource>(IEnumerable<TSource>) Renumerable.Zip<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>)"
  },
  "api/Recore.AsyncAction-12.html": {
    "href": "api/Recore.AsyncAction-12.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Encapsulates an asynchronous method that has 12 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 T11 arg11 T12 arg12 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12"
  },
  "api/Recore.Result-2.html": {
    "href": "api/Recore.Result-2.html",
    "title": "Class Result<TValue, TError> | RecoreFX",
    "keywords": "Class Result<TValue, TError> Represents the result of an operation that can be successful or failed. Inheritance Object Result<TValue, TError> Implements IEquatable < Result <TValue, TError>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public sealed class Result<TValue, TError> : IEquatable<Result<TValue, TError>> Type Parameters Name Description TValue TError Constructors | Improve this Doc View Source Result(TValue) Constructs an instance of the type from a value of TValue . Declaration public Result(TValue value) Parameters Type Name Description TValue value | Improve this Doc View Source Result(TError) Constructs an instance of the type from a value of TError . Declaration public Result(TError error) Parameters Type Name Description TError error Properties | Improve this Doc View Source IsSuccessful Indicates whether the result is successful. Declaration public bool IsSuccessful { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(Result<TValue, TError>) Compares two instances of Result<TValue, TError> for equality. Declaration public bool Equals(Result<TValue, TError> other) Parameters Type Name Description Result <TValue, TError> other Returns Type Description Boolean Remarks Equality is defined as both objects' underlying values or errors being equal. | Improve this Doc View Source Equals(Object) Compares this Result<TValue, TError> to another object for equality. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) Remarks Two Result<TValue, TError> s are equal only if they have the same type parameters in the same order. For example, an Result<int, string> and an Result<string, int> will always be nonequal. | Improve this Doc View Source GetError() Converts Result<TValue, TError> to Optional<TError> Declaration public Optional<TError> GetError() Returns Type Description Optional <TError> | Improve this Doc View Source GetHashCode() Returns the hash code of the underlying value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source GetValue() Converts Result<TValue, TError> to Optional<TValue> Declaration public Optional<TValue> GetValue() Returns Type Description Optional <TValue> | Improve this Doc View Source IfError(Action<TError>) Takes an action only if the the result is failed. Declaration public void IfError(Action<TError> onError) Parameters Type Name Description Action <TError> onError | Improve this Doc View Source IfValue(Action<TValue>) Takes an action only if the result is successful. Declaration public void IfValue(Action<TValue> onValue) Parameters Type Name Description Action <TValue> onValue | Improve this Doc View Source OnError<TResult>(Func<TError, TResult>) Maps a function over the Result<TValue, TError> only if the result is failed. Declaration public Result<TValue, TResult> OnError<TResult>(Func<TError, TResult> onError) Parameters Type Name Description Func <TError, TResult> onError Returns Type Description Result <TValue, TResult> Type Parameters Name Description TResult | Improve this Doc View Source OnValue<TResult>(Func<TValue, TResult>) Maps a function over the Result<TValue, TError> only if the result is successful. Declaration public Result<TResult, TError> OnValue<TResult>(Func<TValue, TResult> onValue) Parameters Type Name Description Func <TValue, TResult> onValue Returns Type Description Result <TResult, TError> Type Parameters Name Description TResult | Improve this Doc View Source Switch(Action<TValue>, Action<TError>) Takes one of two actions depending on whether the result is successful. Declaration public void Switch(Action<TValue> onValue, Action<TError> onError) Parameters Type Name Description Action <TValue> onValue Action <TError> onError | Improve this Doc View Source Switch<T>(Func<TValue, T>, Func<TError, T>) Calls one of two functions depending on whether the result is successful. Declaration public T Switch<T>(Func<TValue, T> onValue, Func<TError, T> onError) Parameters Type Name Description Func <TValue, T> onValue Func <TError, T> onError Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Then<TResult>(Func<TValue, Result<TResult, TError>>) Chains another Result<TValue, TError> -producing operation from another. Declaration public Result<TResult, TError> Then<TResult>(Func<TValue, Result<TResult, TError>> f) Parameters Type Name Description Func <TValue, Result <TResult, TError>> f Returns Type Description Result <TResult, TError> Type Parameters Name Description TResult Remarks This is a monad bind operation. Conceptually, it is the same as passing f to OnValue and then \"flattening\" the result. | Improve this Doc View Source ToString() Returns the string representation of the underlying value or error. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Result<TValue, TError>, Result<TValue, TError>) Determines whether two instances of Result<TValue, TError> have the same value. Declaration public static bool operator ==(Result<TValue, TError> lhs, Result<TValue, TError> rhs) Parameters Type Name Description Result <TValue, TError> lhs Result <TValue, TError> rhs Returns Type Description Boolean | Improve this Doc View Source Implicit(TValue to Result<TValue, TError>) Converts an instance of a type to an Result<TValue, TError> . Declaration public static implicit operator Result<TValue, TError>(TValue value) Parameters Type Name Description TValue value Returns Type Description Result <TValue, TError> | Improve this Doc View Source Implicit(TError to Result<TValue, TError>) Converts an instance of a type to an Result<TValue, TError> . Declaration public static implicit operator Result<TValue, TError>(TError error) Parameters Type Name Description TError error Returns Type Description Result <TValue, TError> | Improve this Doc View Source Inequality(Result<TValue, TError>, Result<TValue, TError>) Determines whether two instances of Result<TValue, TError> have the same value. Declaration public static bool operator !=(Result<TValue, TError> lhs, Result<TValue, TError> rhs) Parameters Type Name Description Result <TValue, TError> lhs Result <TValue, TError> rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Recore.AsyncAction-10.html": {
    "href": "api/Recore.AsyncAction-10.html",
    "title": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> | RecoreFX",
    "keywords": "Delegate AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Encapsulates an asynchronous method that has 10 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> . Namespace : Recore Assembly : Recore.dll Syntax public delegate Task AsyncAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10); Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 T9 arg9 T10 arg10 Returns Type Description Task Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10"
  },
  "api/Recore.Threading.Tasks.html": {
    "href": "api/Recore.Threading.Tasks.html",
    "title": "Namespace Recore.Threading.Tasks | RecoreFX",
    "keywords": "Namespace Recore.Threading.Tasks Classes TaskExtensions Provides additional methods for working with tasks."
  },
  "api/Recore.Either-2.html": {
    "href": "api/Recore.Either-2.html",
    "title": "Class Either<TLeft, TRight> | RecoreFX",
    "keywords": "Class Either<TLeft, TRight> Represents a value that can be one of two types. Inheritance Object Either<TLeft, TRight> Implements IEquatable < Either <TLeft, TRight>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public sealed class Either<TLeft, TRight> : IEquatable<Either<TLeft, TRight>> Type Parameters Name Description TLeft TRight Constructors | Improve this Doc View Source Either(TLeft) Constructs an instance of the type from a value of TLeft . Declaration public Either(TLeft left) Parameters Type Name Description TLeft left | Improve this Doc View Source Either(TRight) Constructs an instance of the type from a value of TRight . Declaration public Either(TRight right) Parameters Type Name Description TRight right Properties | Improve this Doc View Source IsLeft Indicates whether the value is of type TLeft . Declaration public bool IsLeft { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRight Indicates whether the value is of type TRight . Declaration public bool IsRight { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(Either<TLeft, TRight>) Compares two instances of Either<TLeft, TRight> for equality. Declaration public bool Equals(Either<TLeft, TRight> other) Parameters Type Name Description Either <TLeft, TRight> other Returns Type Description Boolean Remarks Equality is defined as both objects' underlying values being equal and their underlying values occupying the same position (both left or both right). For example, Either<Color, Day>(Color.Red) != Either<Color, Day>(Day.Monday) even if Color.Red == Day.Monday . | Improve this Doc View Source Equals(Object) Compares this Either<TLeft, TRight> to another object for equality. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) Remarks Two Either<TLeft, TRight> s are equal only if they have the same type parameters in the same order. For example, an Either<int, string> and an Either<string, int> will always be nonequal. | Improve this Doc View Source GetHashCode() Returns the hash code of the underlying value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source GetLeft() Converts Either<TLeft, TRight> to Optional<TLeft> . Declaration public Optional<TLeft> GetLeft() Returns Type Description Optional <TLeft> | Improve this Doc View Source GetRight() Converts Either<TLeft, TRight> to Optional<TRight> . Declaration public Optional<TRight> GetRight() Returns Type Description Optional <TRight> | Improve this Doc View Source IfLeft(Action<TLeft>) Takes an action only if the value is an instance of TLeft . Declaration public void IfLeft(Action<TLeft> onLeft) Parameters Type Name Description Action <TLeft> onLeft | Improve this Doc View Source IfRight(Action<TRight>) Takes an action only if the value is an instance of TRight . Declaration public void IfRight(Action<TRight> onRight) Parameters Type Name Description Action <TRight> onRight | Improve this Doc View Source OnLeft<TResult>(Func<TLeft, TResult>) Maps a function over the Either<TLeft, TRight> only if the value is an instance of TLeft . Declaration public Either<TResult, TRight> OnLeft<TResult>(Func<TLeft, TResult> onLeft) Parameters Type Name Description Func <TLeft, TResult> onLeft Returns Type Description Either <TResult, TRight> Type Parameters Name Description TResult | Improve this Doc View Source OnRight<TResult>(Func<TRight, TResult>) Maps a function over the Either<TLeft, TRight> only if the value is an instance of TRight . Declaration public Either<TLeft, TResult> OnRight<TResult>(Func<TRight, TResult> onRight) Parameters Type Name Description Func <TRight, TResult> onRight Returns Type Description Either <TLeft, TResult> Type Parameters Name Description TResult | Improve this Doc View Source Swap() Converts this Either<TLeft, TRight> to an Either<TLeft, TRight> Declaration public Either<TRight, TLeft> Swap() Returns Type Description Either <TRight, TLeft> | Improve this Doc View Source Switch(Action<TLeft>, Action<TRight>) Takes one of two actions depending on the underlying value. Declaration public void Switch(Action<TLeft> onLeft, Action<TRight> onRight) Parameters Type Name Description Action <TLeft> onLeft Action <TRight> onRight | Improve this Doc View Source Switch<T>(Func<TLeft, T>, Func<TRight, T>) Calls one of two functions depending on the underlying value. Declaration public T Switch<T>(Func<TLeft, T> onLeft, Func<TRight, T> onRight) Parameters Type Name Description Func <TLeft, T> onLeft Func <TRight, T> onRight Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToString() Returns the string representation of the underlying value. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Either<TLeft, TRight>, Either<TLeft, TRight>) Determines whether two instances of Either<TLeft, TRight> have the same value. Declaration public static bool operator ==(Either<TLeft, TRight> lhs, Either<TLeft, TRight> rhs) Parameters Type Name Description Either <TLeft, TRight> lhs Either <TLeft, TRight> rhs Returns Type Description Boolean | Improve this Doc View Source Implicit(TLeft to Either<TLeft, TRight>) Converts an instance of a type to an Either<TLeft, TRight> . Declaration public static implicit operator Either<TLeft, TRight>(TLeft left) Parameters Type Name Description TLeft left Returns Type Description Either <TLeft, TRight> | Improve this Doc View Source Implicit(TRight to Either<TLeft, TRight>) Converts an instance of a type to an Either<TLeft, TRight> . Declaration public static implicit operator Either<TLeft, TRight>(TRight right) Parameters Type Name Description TRight right Returns Type Description Either <TLeft, TRight> | Improve this Doc View Source Inequality(Either<TLeft, TRight>, Either<TLeft, TRight>) Determines whether two instances of Either<TLeft, TRight> have the same value. Declaration public static bool operator !=(Either<TLeft, TRight> lhs, Either<TLeft, TRight> rhs) Parameters Type Name Description Either <TLeft, TRight> lhs Either <TLeft, TRight> rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Recore.html": {
    "href": "api/Recore.html",
    "title": "Namespace Recore | RecoreFX",
    "keywords": "Namespace Recore Classes AbsoluteUri Represents an absolute URI. Defer Invokes an action when disposed. Either Provides additional methods for Either<TLeft, TRight> . Either<TLeft, TRight> Represents a value that can be one of two types. Func Contains methods for working with functions. Hasher Computes hash codes for types. Of<T> Abstract base class for defining types that alias an existing type. Optional Provides additional methods for Optional<T> . RelativeUri Represents a relative URI. Result Provides additional methods for Result<TValue, TError> . Result.Catcher<TValue> Wraps a function to be executed and converted to Result<TValue, TError> . Result<TValue, TError> Represents the result of an operation that can be successful or failed. StringExtensions Provides additional methods for working with strings. Token Represents a non-null, non-empty string value where whitespace is not allowed. UriExtensions Extension methods for the Uri type. Structs Optional<T> Provides type-safe access to a nullable value. Unit A type with only one value. Delegates AsyncAction Encapsulates an asynchronous method that has no parameters and does not return a value. Equivalent to Func<Task> . AsyncAction<T> Encapsulates an asynchronous method that has one parameter and does not return a value. Equivalent to Func<T, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Encapsulates an asynchronous method that has 10 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Encapsulates an asynchronous method that has 11 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Encapsulates an asynchronous method that has 12 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Encapsulates an asynchronous method that has 13 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Encapsulates an asynchronous method that has 14 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Encapsulates an asynchronous method that has 15 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Encapsulates an asynchronous method that has 16 parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task> . AsyncAction<T1, T2> Encapsulates an asynchronous method that has two parameters and does not return a value. Equivalent to Func<T1, T2, Task> . AsyncAction<T1, T2, T3> Encapsulates an asynchronous method that has three parameters and does not return a value. Equivalent to Func<T1, T2, T3, Task> . AsyncAction<T1, T2, T3, T4> Encapsulates an asynchronous method that has four parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, Task> . AsyncAction<T1, T2, T3, T4, T5> Encapsulates an asynchronous method that has five parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, Task> . AsyncAction<T1, T2, T3, T4, T5, T6> Encapsulates an asynchronous method that has six parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7> Encapsulates an asynchronous method that has seven parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8> Encapsulates an asynchronous method that has eight parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> . AsyncAction<T1, T2, T3, T4, T5, T6, T7, T8, T9> Encapsulates an asynchronous method that has nine parameters and does not return a value. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> . AsyncFunc<TResult> Encapsulates an asynchronous method that has no parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Encapsulates an asynchronous method that has nine parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Encapsulates an asynchronous method that has 10 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Encapsulates an asynchronous method that has 11 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Encapsulates an asynchronous method that has 12 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Encapsulates an asynchronous method that has 13 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Encapsulates an asynchronous method that has 14 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Encapsulates an asynchronous method that has 15 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> Encapsulates an asynchronous method that has 16 parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>> . AsyncFunc<T, TResult> Encapsulates an asynchronous method that has one parameter and returns a value of the type specified by the TResult parameter. Equivalent to Func<Task<TResult>> . AsyncFunc<T1, T2, TResult> Encapsulates an asynchronous method that has two parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, Task<TResult>> . AsyncFunc<T1, T2, T3, TResult> Encapsulates an asynchronous method that has three parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, TResult> Encapsulates an asynchronous method that has four parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, TResult> Encapsulates an asynchronous method that has five parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, TResult> Encapsulates an asynchronous method that has six parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, TResult> Encapsulates an asynchronous method that has seven parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> . AsyncFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Encapsulates an asynchronous method that has eight parameters and returns a value of the type specified by the TResult parameter. Equivalent to Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> ."
  },
  "api/Recore.Either.html": {
    "href": "api/Recore.Either.html",
    "title": "Class Either | RecoreFX",
    "keywords": "Class Either Provides additional methods for Either<TLeft, TRight> . Inheritance Object Either Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Either Methods | Improve this Doc View Source Lefts<TLeft, TRight>(IEnumerable<Either<TLeft, TRight>>) Collects all the left-side values from the sequence. Declaration public static IEnumerable<TLeft> Lefts<TLeft, TRight>(this IEnumerable<Either<TLeft, TRight>> source) Parameters Type Name Description IEnumerable < Either <TLeft, TRight>> source Returns Type Description IEnumerable <TLeft> Type Parameters Name Description TLeft TRight | Improve this Doc View Source Rights<TLeft, TRight>(IEnumerable<Either<TLeft, TRight>>) Collects all the right-side values from the sequence. Declaration public static IEnumerable<TRight> Rights<TLeft, TRight>(this IEnumerable<Either<TLeft, TRight>> source) Parameters Type Name Description IEnumerable < Either <TLeft, TRight>> source Returns Type Description IEnumerable <TRight> Type Parameters Name Description TLeft TRight"
  },
  "api/Recore.Functional.Composer.html": {
    "href": "api/Recore.Functional.Composer.html",
    "title": "Class Composer | RecoreFX",
    "keywords": "Class Composer Provides additional methods for Composer<T> . Inheritance Object Composer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Functional Assembly : Recore.dll Syntax public static class Composer Methods | Improve this Doc View Source Of<T>(T) Creates a Composer<T> from a value. Declaration public static Composer<T> Of<T>(T value) Parameters Type Name Description T value Returns Type Description Composer <T> Type Parameters Name Description T Remarks This method works the the same as the constructor, but it is useful for type inference."
  },
  "api/Recore.Functional.Composer-1.html": {
    "href": "api/Recore.Functional.Composer-1.html",
    "title": "Class Composer<T> | RecoreFX",
    "keywords": "Class Composer<T> Creates a function pipeline, calling each function or action on the value with postfix syntax. Inheritance Object Composer<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Functional Assembly : Recore.dll Syntax public sealed class Composer<T> Type Parameters Name Description T Remarks Functions are called on the value eagerly. Examples // Without Composer var result = Baz(Bar(Foo(value))); // With Composer var result = Composer.Of(value) .Then(Foo) .Then(Bar) .Then(Baz) .Result; Constructors | Improve this Doc View Source Composer(T) Initializes the Composer<T> from a value. Declaration public Composer(T value) Parameters Type Name Description T value Properties | Improve this Doc View Source Result Gets the result of the Composer<T> . Declaration public T Result { get; } Property Value Type Description T Methods | Improve this Doc View Source Then(Action<T>) Invokes an action on the Composer<T> 's current value and passes the value through the Composer<T> . Declaration public Composer<T> Then(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description Composer <T> | Improve this Doc View Source Then<U>(Func<T, U>) Invokes a function on the Composer<T> 's current value and passes the result through the Composer<T> . Declaration public Composer<U> Then<U>(Func<T, U> func) Parameters Type Name Description Func <T, U> func Returns Type Description Composer <U> Type Parameters Name Description U"
  },
  "api/Recore.Functional.html": {
    "href": "api/Recore.Functional.html",
    "title": "Namespace Recore.Functional | RecoreFX",
    "keywords": "Namespace Recore.Functional Classes Composer Provides additional methods for Composer<T> . Composer<T> Creates a function pipeline, calling each function or action on the value with postfix syntax. Composer<TValue, TResult> Composes many functions or actions into a single function. Lift Adapts functions to operate on functors. Operator Defines functions corresponding to C# operators."
  }
}