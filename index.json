{
  "api/Recore.Collections.Generic.LinkedListExtensions.html": {
    "href": "api/Recore.Collections.Generic.LinkedListExtensions.html",
    "title": "Class LinkedListExtensions | RecoreFX",
    "keywords": "Class LinkedListExtensions Provides additional methods for working with LinkedList . Inheritance Object LinkedListExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class LinkedListExtensions Methods | Improve this Doc View Source Add<T>(LinkedList<T>, T) Adds a new node with containing the specified value to the end of the LinkedList<T> . Declaration public static void Add<T>(this LinkedList<T> linkedList, T item) Parameters Type Name Description LinkedList <T> linkedList T item Type Parameters Name Description T Remarks This method is the same as AddLast . It is needed to be able to use collection initializer syntax with LinkedList<T> . | Improve this Doc View Source Append<T>(LinkedList<T>, T) Adds a new node with containing the specified value to the end of the LinkedList<T> and returns the LinkedList<T> . Declaration public static LinkedList<T> Append<T>(this LinkedList<T> linkedList, T item) Parameters Type Name Description LinkedList <T> linkedList T item Returns Type Description LinkedList <T> Type Parameters Name Description T"
  },
  "api/Recore.Result.Catcher-1.html": {
    "href": "api/Recore.Result.Catcher-1.html",
    "title": "Class Result.Catcher<TValue> | RecoreFX",
    "keywords": "Class Result.Catcher<TValue> Wraps a function to be executed and converted to Result . Inheritance Object Result.Catcher<TValue> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public sealed class Catcher<TValue> Type Parameters Name Description TValue Methods | Improve this Doc View Source Catch<TException>() Executes the stored function and catches exceptions of the given type. Declaration public Result<TValue, TException> Catch<TException>() where TException : Exception Returns Type Description Result <TValue, TException> Type Parameters Name Description TException | Improve this Doc View Source Catch<TException>(Func<TException, Boolean>) Executes the stored function and catches exceptions of the given type matching the given predicate. Declaration public Result<TValue, TException> Catch<TException>(Func<TException, bool> predicate = null) where TException : Exception Parameters Type Name Description Func <TException, Boolean > predicate Returns Type Description Result <TValue, TException> Type Parameters Name Description TException"
  },
  "api/Recore.Optional-1.html": {
    "href": "api/Recore.Optional-1.html",
    "title": "Struct Optional<T> | RecoreFX",
    "keywords": "Struct Optional<T> Provides type-safe access to a nullable value. Implements IEquatable < Optional <T>> IEnumerable <T> IEnumerable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public struct Optional<T> : IEquatable<Optional<T>>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc View Source Optional(T) Creates an Optional with a value. Declaration public Optional(T value) Parameters Type Name Description T value Remarks If null is passed for value , then the Optional is considered empty. Properties | Improve this Doc View Source Empty Creates an Optional without a value. Declaration public static Optional<T> Empty { get; } Property Value Type Description Optional <T> Remarks While an empty Optional can also be created by calling the default constructor or passing null to the constructor, Empty is more expressive, making the absence of a value more obvious. | Improve this Doc View Source HasValue Indicates whether the Optional was created with a value. Declaration public bool HasValue { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(Optional<T>) Determines whether this instance and another Optional<T> have the same value. Declaration public bool Equals(Optional<T> other) Parameters Type Name Description Optional <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether this instance and another object, which must also be an Optional<T> , have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetEnumerator() Returns an object that either yields the underlying value once or yields nothing if there is no value. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source GetHashCode() Returns the hash code for the underlying type or zero if there is no value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source IfEmpty(Action) Takes an action only if the Optional is empty. Declaration public void IfEmpty(Action onEmpty) Parameters Type Name Description Action onEmpty | Improve this Doc View Source IfValue(Action<T>) Takes an action only if the Optional has a value. Declaration public void IfValue(Action<T> onValue) Parameters Type Name Description Action <T> onValue | Improve this Doc View Source OnValue<U>(Func<T, U>) Maps a function over the Optional 's value, or propagates Empty . Declaration public Optional<U> OnValue<U>(Func<T, U> f) Parameters Type Name Description Func <T, U> f Returns Type Description Optional <U> Type Parameters Name Description U | Improve this Doc View Source Switch(Action<T>, Action) Chooses an action to take depending on whether the Optional has a value. Declaration public void Switch(Action<T> onValue, Action onEmpty) Parameters Type Name Description Action <T> onValue Called when the Optional has a value. Action onEmpty Called when the Optional does not have a value. | Improve this Doc View Source Switch<U>(Func<T, U>, Func<U>) Chooses a function to call depending on whether the Optional has a value. Declaration public U Switch<U>(Func<T, U> onValue, Func<U> onEmpty) Parameters Type Name Description Func <T, U> onValue Called when the Optional has a value. Func <U> onEmpty Called when the Optional does not have a value. Returns Type Description U Result of the function that was called. Type Parameters Name Description U | Improve this Doc View Source Then<U>(Func<T, Optional<U>>) Chains another Optional -producing operation onto the result of another. Declaration public Optional<U> Then<U>(Func<T, Optional<U>> f) Parameters Type Name Description Func <T, Optional <U>> f Returns Type Description Optional <U> Type Parameters Name Description U Remarks This is a monad bind operation. Conceptually, it is the same as passing f to OnValue and then \"flattening\" the Optionlt;Optional< T >> into an Optional< T > . (Note that Optionlt;Optional< T >> is not a valid Optional because of the type constraint where T : class .) | Improve this Doc View Source ToString() Returns the value's string representation, or a localized \"none\" message. Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() | Improve this Doc View Source ValueOr(T) Extracts the value with a fallback if the Optional is empty. Declaration public T ValueOr(T fallback) Parameters Type Name Description T fallback Returns Type Description T Operators | Improve this Doc View Source Equality(Optional<T>, Optional<T>) Determines whether two instances of Optional<T> have the same value. Declaration public static bool operator ==(Optional<T> lhs, Optional<T> rhs) Parameters Type Name Description Optional <T> lhs Optional <T> rhs Returns Type Description Boolean | Improve this Doc View Source Explicit(Optional<T> to T) Casts this instance to its underlying value or the default value for the underlying type. Declaration public static explicit operator T(Optional<T> optional) Parameters Type Name Description Optional <T> optional Returns Type Description T | Improve this Doc View Source Implicit(T to Optional<T>) Converts an instance of a type to an optional value. Declaration public static implicit operator Optional<T>(T value) Parameters Type Name Description T value Returns Type Description Optional <T> | Improve this Doc View Source Inequality(Optional<T>, Optional<T>) Determines whether two instances of Optional<T> have different values. Declaration public static bool operator !=(Optional<T> lhs, Optional<T> rhs) Parameters Type Name Description Optional <T> lhs Optional <T> rhs Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an object that either yields the underlying value once or yields nothing if there is no value. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.IEquatable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Renumerable.Argmax<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Renumerable.Argmin<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Renumerable.Enumerate<TSource>(IEnumerable<TSource>) Renumerable.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>) Renumerable.Product<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>) Renumerable.ToLinkedList<TSource>(IEnumerable<TSource>) Renumerable.Zip<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>)"
  },
  "api/Recore.Result.html": {
    "href": "api/Recore.Result.html",
    "title": "Class Result | RecoreFX",
    "keywords": "Class Result Provides additional methods for Result . Inheritance Object Result Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Result Methods | Improve this Doc View Source Errors<TValue, TError>(IEnumerable<Result<TValue, TError>>) Collects all the errors from failed results from the sequence. Declaration public static IEnumerable<TError> Errors<TValue, TError>(this IEnumerable<Result<TValue, TError>> source) Parameters Type Name Description IEnumerable < Result <TValue, TError>> source Returns Type Description IEnumerable <TError> Type Parameters Name Description TValue TError | Improve this Doc View Source Failure<TValue, TError>(TError) Creates a failed result. Declaration public static Result<TValue, TError> Failure<TValue, TError>(TError error) Parameters Type Name Description TError error Returns Type Description Result <TValue, TError> Type Parameters Name Description TValue TError | Improve this Doc View Source Flatten<TValue, TError>(Result<Result<TValue, TError>, TError>) Converts a Result<Result<TValue, TError>, TError> to a Result<TValue, TError> . Declaration public static Result<TValue, TError> Flatten<TValue, TError>(this Result<Result<TValue, TError>, TError> resultResult) Parameters Type Name Description Result < Result <TValue, TError>, TError> resultResult Returns Type Description Result <TValue, TError> Type Parameters Name Description TValue TError | Improve this Doc View Source Success<TValue, TError>(TValue) Creates a successful result. Declaration public static Result<TValue, TError> Success<TValue, TError>(TValue value) Parameters Type Name Description TValue value Returns Type Description Result <TValue, TError> Type Parameters Name Description TValue TError | Improve this Doc View Source Try<TValue>(Func<TValue>) Suspends a function to be executed by Catcher<TValue>.Catch . Declaration public static Result.Catcher<TValue> Try<TValue>(Func<TValue> func) Parameters Type Name Description Func <TValue> func Returns Type Description Result.Catcher <TValue> Type Parameters Name Description TValue | Improve this Doc View Source Values<TValue, TError>(IEnumerable<Result<TValue, TError>>) Collects all the values of successful results from the sequence. Declaration public static IEnumerable<TValue> Values<TValue, TError>(this IEnumerable<Result<TValue, TError>> source) Parameters Type Name Description IEnumerable < Result <TValue, TError>> source Returns Type Description IEnumerable <TValue> Type Parameters Name Description TValue TError"
  },
  "api/Recore.StringExtensions.html": {
    "href": "api/Recore.StringExtensions.html",
    "title": "Class StringExtensions | RecoreFX",
    "keywords": "Class StringExtensions Provides additional methods for working with strings. Inheritance Object StringExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class StringExtensions Methods | Improve this Doc View Source Tokenize(String) Splits a string into a sequence of tokens on its whitespace characters. Declaration public static Token[] Tokenize(this string str) Parameters Type Name Description String str Returns Type Description Token [] Remarks While a particular string may consist of tokens delimited by some other character or string, this method does not provide an option for this by design. This is consistent with the Token type itself, which does not check for any characters besides whitespace."
  },
  "api/Recore.html": {
    "href": "api/Recore.html",
    "title": "Namespace Recore | RecoreFX",
    "keywords": "Namespace Recore Classes AbsoluteUri Represents an absolute URI. Either Provides additional methods for Either . Either<TLeft, TRight> Represents a value that can be one of two types. Func Contains methods for working with functions. Hasher Computes hash codes for types. Of<T> Abstract base class for defining types that alias an existing type. Optional Provides additional methods for Optional<T> . RelativeUri Represents a relative URI. Result Provides additional methods for Result . Result.Catcher<TValue> Wraps a function to be executed and converted to Result . Result<TValue, TError> Represents the result of an operation that can be successful or failed. StringExtensions Provides additional methods for working with strings. Token Represents a non-null, non-empty string value where whitespace is not allowed. Structs Optional<T> Provides type-safe access to a nullable value. Unit A type with only one value."
  },
  "api/Recore.Linq.html": {
    "href": "api/Recore.Linq.html",
    "title": "Namespace Recore.Linq | RecoreFX",
    "keywords": "Namespace Recore.Linq Classes Renumerable Provides additional methods for working with objects that implement IEnumerable<T> ."
  },
  "api/Recore.Unit.html": {
    "href": "api/Recore.Unit.html",
    "title": "Struct Unit | RecoreFX",
    "keywords": "Struct Unit A type with only one value. Implements IEquatable < Unit > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public struct Unit : IEquatable<Unit> Remarks Whereas void is a type with no values, Unit is a type with one value. It is useful when designing generic types or methods so that a non-generic version does not have to be provided. It is also useful for fluent interfaces (such as LINQ) so that a chain of method calls does not have to be broken by a void -returning call. Methods | Improve this Doc View Source Close(Action) Converts a return type of void to a return type of Unit . Declaration public static Func<Unit> Close(Action action) Parameters Type Name Description Action action Returns Type Description Func < Unit > | Improve this Doc View Source Equals(Unit) Two unit instances are always equal. Declaration public bool Equals(Unit other) Parameters Type Name Description Unit other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether another object is the unit value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code of the unit value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string representation of the unit value. Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Unit, Unit) Two unit instances are always equal. Declaration public static bool operator ==(Unit lhs, Unit rhs) Parameters Type Name Description Unit lhs Unit rhs Returns Type Description Boolean | Improve this Doc View Source Inequality(Unit, Unit) Two unit instances are always equal. Declaration public static bool operator !=(Unit lhs, Unit rhs) Parameters Type Name Description Unit lhs Unit rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Recore.Security.Cryptography.SecureCompare.html": {
    "href": "api/Recore.Security.Cryptography.SecureCompare.html",
    "title": "Class SecureCompare | RecoreFX",
    "keywords": "Class SecureCompare Provides methods for securely comparing objects. Inheritance Object SecureCompare Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Security.Cryptography Assembly : Recore.dll Syntax public static class SecureCompare Methods | Improve this Doc View Source TimeInvariantEquals(Byte[], Byte[]) Checks two byte arrays for equality without early termination. Declaration public static bool TimeInvariantEquals(byte[] lhs, byte[] rhs) Parameters Type Name Description Byte [] lhs Byte [] rhs Returns Type Description Boolean Remarks This method is used to guard against timing attacks . When checking untrusted input against a secret, using a regular element-by-element equality method such as String.Equals is insecure. For example, suppose you are checking whether an incoming request's signature matches what you expect. In this case, you hash the request payload with your own private key and compare that to the actual signature. If the comparison stops at the first unmatched element in the sequence, an attacker can time the comparison with a high-resolution timer and infer how many elements they guessed correctly. This method assumes that the length of the sequences are equal, such as two strings processed by a hashing algorithm. If the length of the sequence is considered a secret, this method should not be used as it will leak that information in a timing attack."
  },
  "api/Recore.Threading.Tasks.html": {
    "href": "api/Recore.Threading.Tasks.html",
    "title": "Namespace Recore.Threading.Tasks | RecoreFX",
    "keywords": "Namespace Recore.Threading.Tasks Classes TaskExtensions Provides additional methods for working with tasks."
  },
  "index.html": {
    "href": "index.html",
    "title": "RecoreFX | RecoreFX",
    "keywords": "RecoreFX Note This is DocFX-flavored Markdown! RecoreFX is the minimal supplement to the .NET standard library. Why Recore? There are many other great libraries out there for .NET, and Recore duplicates some of their functionality. Recore seeks to fill in the most commonly needed missing features from CoreFX. Recore is meant to feel like a natural extension of CoreFX and is built on the same principles."
  },
  "api/Recore.Collections.Generic.ICollectionExtensions.html": {
    "href": "api/Recore.Collections.Generic.ICollectionExtensions.html",
    "title": "Class ICollectionExtensions | RecoreFX",
    "keywords": "Class ICollectionExtensions Provides additional methods for working with ICollection . Inheritance Object ICollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class ICollectionExtensions Methods | Improve this Doc View Source Append<T>(ICollection<T>, T) Adds an item to the collection and passes the collection through. Declaration public static ICollection<T> Append<T>(this ICollection<T> collection, T item) Parameters Type Name Description ICollection <T> collection T item Returns Type Description ICollection <T> Type Parameters Name Description T"
  },
  "api/Recore.Of-1.html": {
    "href": "api/Recore.Of-1.html",
    "title": "Class Of<T> | RecoreFX",
    "keywords": "Class Of<T> Abstract base class for defining types that alias an existing type. Inheritance Object Of<T> Implements IEquatable < Of <T>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public abstract class Of<T> : IEquatable<Of<T>> Type Parameters Name Description T Examples Use Of to create a strongly-typed \"alias\" of another type. class Address : Of<string> {} var address = new Address { Value = \"1 Microsoft Way\" }; Console.WriteLine(address); // prints \"1 Microsoft Way\" Properties | Improve this Doc View Source Value The underlying instance of the wrapped type. Declaration public T Value { get; set; } Property Value Type Description T Methods | Improve this Doc View Source Equals(Of<T>) Determines whether two instances of the type are equal. Declaration public bool Equals(Of<T> other) Parameters Type Name Description Of <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether this instance is equal to another object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for the underlying object. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns the string representation for the underlying object. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Of<T>, Of<T>) Determines whether two instances of the type are equal. Declaration public static bool operator ==(Of<T> lhs, Of<T> rhs) Parameters Type Name Description Of <T> lhs Of <T> rhs Returns Type Description Boolean | Improve this Doc View Source Inequality(Of<T>, Of<T>) Determines whether two instances of the type are not equal. Declaration public static bool operator !=(Of<T> lhs, Of<T> rhs) Parameters Type Name Description Of <T> lhs Of <T> rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Recore.AbsoluteUri.html": {
    "href": "api/Recore.AbsoluteUri.html",
    "title": "Class AbsoluteUri | RecoreFX",
    "keywords": "Class AbsoluteUri Represents an absolute URI. Inheritance Object Uri AbsoluteUri Implements ISerializable Inherited Members Uri.SchemeDelimiter Uri.UriSchemeFile Uri.UriSchemeFtp Uri.UriSchemeGopher Uri.UriSchemeHttp Uri.UriSchemeHttps Uri.UriSchemeMailto Uri.UriSchemeNetPipe Uri.UriSchemeNetTcp Uri.UriSchemeNews Uri.UriSchemeNntp Uri.Canonicalize() Uri.CheckHostName(String) Uri.CheckSchemeName(String) Uri.CheckSecurity() Uri.Compare(Uri, Uri, UriComponents, UriFormat, StringComparison) Uri.Equals(Object) Uri.Escape() Uri.EscapeDataString(String) Uri.EscapeString(String) Uri.EscapeUriString(String) Uri.FromHex(Char) Uri.GetComponents(UriComponents, UriFormat) Uri.GetHashCode() Uri.GetLeftPart(UriPartial) Uri.GetObjectData(SerializationInfo, StreamingContext) Uri.HexEscape(Char) Uri.HexUnescape(String, Int32) Uri.IsBadFileSystemCharacter(Char) Uri.IsBaseOf(Uri) Uri.IsExcludedCharacter(Char) Uri.IsHexDigit(Char) Uri.IsHexEncoding(String, Int32) Uri.IsReservedCharacter(Char) Uri.IsWellFormedOriginalString() Uri.IsWellFormedUriString(String, UriKind) Uri.MakeRelative(Uri) Uri.MakeRelativeUri(Uri) Uri.Parse() Uri.ISerializable.GetObjectData(SerializationInfo, StreamingContext) Uri.ToString() Uri.TryCreate(String, UriKind, Uri) Uri.TryCreate(Uri, String, Uri) Uri.TryCreate(Uri, Uri, Uri) Uri.Unescape(String) Uri.UnescapeDataString(String) Uri.AbsolutePath Uri.AbsoluteUri Uri.Authority Uri.DnsSafeHost Uri.Fragment Uri.Host Uri.HostNameType Uri.IdnHost Uri.IsAbsoluteUri Uri.IsDefaultPort Uri.IsFile Uri.IsLoopback Uri.IsUnc Uri.LocalPath Uri.OriginalString Uri.PathAndQuery Uri.Port Uri.Query Uri.Scheme Uri.Segments Uri.UserEscaped Uri.UserInfo Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public class AbsoluteUri : Uri, ISerializable Constructors | Improve this Doc View Source AbsoluteUri(String) Initializes a new instance of AbsoluteUri with the given URI. Declaration public AbsoluteUri(string uriString) Parameters Type Name Description String uriString | Improve this Doc View Source AbsoluteUri(Uri, RelativeUri) Initializes a new instance of AbsoluteUri with the given base URI and relative URI. Declaration public AbsoluteUri(Uri baseUri, RelativeUri relativeUri) Parameters Type Name Description Uri baseUri RelativeUri relativeUri | Improve this Doc View Source AbsoluteUri(Uri, String) Initializes a new instance of AbsoluteUri with the given base URI and relative URI. Declaration public AbsoluteUri(Uri baseUri, string relativeUri) Parameters Type Name Description Uri baseUri String relativeUri | Improve this Doc View Source AbsoluteUri(Uri, Uri) Initializes a new instance of AbsoluteUri with the given base URI and relative URI. Declaration public AbsoluteUri(Uri baseUri, Uri relativeUri) Parameters Type Name Description Uri baseUri Uri relativeUri Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Recore.Linq.Renumerable.html": {
    "href": "api/Recore.Linq.Renumerable.html",
    "title": "Class Renumerable | RecoreFX",
    "keywords": "Class Renumerable Provides additional methods for working with objects that implement IEnumerable<T> . Inheritance Object Renumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Linq Assembly : Recore.dll Syntax public static class Renumerable Methods | Improve this Doc View Source Argmax<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Returns the maximizing argument for a function from a sequence of values. Declaration public static TSource Argmax<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters Type Name Description IEnumerable <TSource> source Func <TSource, TResult> selector Returns Type Description TSource Type Parameters Name Description TSource TResult | Improve this Doc View Source Argmin<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) Returns the minimizing argument for a function from a sequence of values. Declaration public static TSource Argmin<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters Type Name Description IEnumerable <TSource> source Func <TSource, TResult> selector Returns Type Description TSource Type Parameters Name Description TSource TResult | Improve this Doc View Source Enumerate<TSource>(IEnumerable<TSource>) Returns each element from a sequence along with its number from the beginning of the sequence, starting from zero. Declaration public static IEnumerable<(int index, TSource item)> Enumerate<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable <TSource> source Returns Type Description IEnumerable < ValueTuple < Int32 , TSource>> Type Parameters Name Description TSource | Improve this Doc View Source Flatten<TSource>(IEnumerable<IEnumerable<TSource>>) Converts a sequence of sequences into a single sequence. Declaration public static IEnumerable<TSource> Flatten<TSource>(this IEnumerable<IEnumerable<TSource>> source) Parameters Type Name Description IEnumerable < IEnumerable <TSource>> source Returns Type Description IEnumerable <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEach<TSource>(IEnumerable<TSource>, Action<TSource>) Performs an action on each element in a sequence. Declaration public static void ForEach<TSource>(this IEnumerable<TSource> source, Action<TSource> action) Parameters Type Name Description IEnumerable <TSource> source Action <TSource> action Type Parameters Name Description TSource Remarks This method is evaluated eagerly. | Improve this Doc View Source NonNull<TSource>(IEnumerable<TSource>) Collects all non-null values from the sequence. Declaration public static IEnumerable<TSource> NonNull<TSource>(this IEnumerable<TSource> source) where TSource : class Parameters Type Name Description IEnumerable <TSource> source Returns Type Description IEnumerable <TSource> Type Parameters Name Description TSource | Improve this Doc View Source NonNull<TSource>(IEnumerable<Nullable<TSource>>) Collects all non-null values from the sequence. Declaration public static IEnumerable<TSource> NonNull<TSource>(this IEnumerable<TSource? > source) where TSource : struct Parameters Type Name Description IEnumerable < Nullable <TSource>> source Returns Type Description IEnumerable <TSource> Type Parameters Name Description TSource | Improve this Doc View Source Product<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>) Returns each element from a sequence along with its number from the beginning of the sequence, starting from zero. Declaration public static IEnumerable<(TFirst first, TSecond second)> Product<TFirst, TSecond>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second) Parameters Type Name Description IEnumerable <TFirst> first IEnumerable <TSecond> second Returns Type Description IEnumerable < ValueTuple <TFirst, TSecond>> Type Parameters Name Description TFirst TSecond | Improve this Doc View Source ToLinkedList<TSource>(IEnumerable<TSource>) Creates a LinkedList<T> from an IEnumerable<T> . Declaration public static LinkedList<TSource> ToLinkedList<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description IEnumerable <TSource> source Returns Type Description LinkedList <TSource> Type Parameters Name Description TSource Remarks Linked lists don't need to be resized when adding elements, which can give this method better performance than ToList or ToArray . A common case is when you just want to force eager evaluation of a series of operations on an IEnumerable<T> or when you want to cache elements when performing multiple enumerations. For these cases, you don't need random access to elements, which makes LinkedList<T> a suitable data structure for storing the elements. | Improve this Doc View Source Zip<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>) Merges two sequences to a single sequence of tuples. Declaration public static IEnumerable<(TFirst first, TSecond second)> Zip<TFirst, TSecond>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second) Parameters Type Name Description IEnumerable <TFirst> first IEnumerable <TSecond> second Returns Type Description IEnumerable < ValueTuple <TFirst, TSecond>> Type Parameters Name Description TFirst TSecond Remarks If the sequences are of different lengths,"
  },
  "api/Recore.Either.html": {
    "href": "api/Recore.Either.html",
    "title": "Class Either | RecoreFX",
    "keywords": "Class Either Provides additional methods for Either . Inheritance Object Either Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Either Methods | Improve this Doc View Source Lefts<TLeft, TRight>(IEnumerable<Either<TLeft, TRight>>) Collects all the left-side values from the sequence. Declaration public static IEnumerable<TLeft> Lefts<TLeft, TRight>(this IEnumerable<Either<TLeft, TRight>> source) Parameters Type Name Description IEnumerable < Either <TLeft, TRight>> source Returns Type Description IEnumerable <TLeft> Type Parameters Name Description TLeft TRight | Improve this Doc View Source Rights<TLeft, TRight>(IEnumerable<Either<TLeft, TRight>>) Collects all the right-side values from the sequence. Declaration public static IEnumerable<TRight> Rights<TLeft, TRight>(this IEnumerable<Either<TLeft, TRight>> source) Parameters Type Name Description IEnumerable < Either <TLeft, TRight>> source Returns Type Description IEnumerable <TRight> Type Parameters Name Description TLeft TRight"
  },
  "api/Recore.Threading.Tasks.TaskExtensions.html": {
    "href": "api/Recore.Threading.Tasks.TaskExtensions.html",
    "title": "Class TaskExtensions | RecoreFX",
    "keywords": "Class TaskExtensions Provides additional methods for working with tasks. Inheritance Object TaskExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Threading.Tasks Assembly : Recore.dll Syntax public static class TaskExtensions Methods | Improve this Doc View Source Synchronize(Task) Blocks the current thread until the task completes. Declaration public static void Synchronize(this Task task) Parameters Type Name Description Task task Remarks If task is terminated by an exception, that exception will be rethrown in the current context. Unlike Task.Wait , that exception will be of its original type, not AggregateException . It will also preserve its original stack trace. This exception-throwing behavior is the same as if you had used await . Note that it is still possible to deadlock with this method. See https://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html . | Improve this Doc View Source Synchronize<T>(Task<T>) Blocks the current thread until the task completes. Declaration public static T Synchronize<T>(this Task<T> task) Parameters Type Name Description Task <T> task Returns Type Description T Type Parameters Name Description T Remarks If task is terminated by an exception, that exception will be rethrown in the current context. Unlike Task<T>.Result , that exception will be of its original type, not AggregateException . It will also preserve its original stack trace. This exception-throwing behavior is the same as if you had used await . Note that it is still possible to deadlock with this method. See https://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html ."
  },
  "api/Recore.Either-2.html": {
    "href": "api/Recore.Either-2.html",
    "title": "Class Either<TLeft, TRight> | RecoreFX",
    "keywords": "Class Either<TLeft, TRight> Represents a value that can be one of two types. Inheritance Object Either<TLeft, TRight> Implements IEquatable < Either <TLeft, TRight>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public sealed class Either<TLeft, TRight> : IEquatable<Either<TLeft, TRight>> Type Parameters Name Description TLeft TRight Constructors | Improve this Doc View Source Either(TLeft) Constructs an instance of the type from a value of TLeft . Declaration public Either(TLeft left) Parameters Type Name Description TLeft left | Improve this Doc View Source Either(TRight) Constructs an instance of the type from a value of TRight . Declaration public Either(TRight right) Parameters Type Name Description TRight right Properties | Improve this Doc View Source IsLeft Indicates whether the value is of type TLeft . Declaration public bool IsLeft { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRight Indicates whether the value is of type TRight . Declaration public bool IsRight { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(Either<TLeft, TRight>) Compares two instances of Either<TLeft, TRight> for equality. Declaration public bool Equals(Either<TLeft, TRight> other) Parameters Type Name Description Either <TLeft, TRight> other Returns Type Description Boolean Remarks Equality is defined as both objects' underlying values being equal and their underlying values occupying the same position (both left or both right). For example, Either<Color, Day>(Color.Red) != Either<Color, Day>(Day.Monday) even if Color.Red == Day.Monday . | Improve this Doc View Source Equals(Object) Compares this Either<TLeft, TRight> to another object for equality. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) Remarks Two Either s are equal only if they have the same type parameters in the same order. For example, an Either<int, string> and an Either<string, int> will always be nonequal. | Improve this Doc View Source GetHashCode() Returns the hash code of the underlying value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source GetLeft() Converts Either<TLeft, TRight> to Optional<TLeft> Declaration public Optional<TLeft> GetLeft() Returns Type Description Optional <TLeft> | Improve this Doc View Source GetRight() Converts Either<TLeft, TRight> to Optional<TRight> Declaration public Optional<TRight> GetRight() Returns Type Description Optional <TRight> | Improve this Doc View Source IfLeft(Action<TLeft>) Takes an action only if the value is an instance of TLeft . Declaration public void IfLeft(Action<TLeft> onLeft) Parameters Type Name Description Action <TLeft> onLeft | Improve this Doc View Source IfRight(Action<TRight>) Takes an action only if the value is an instance of TRight . Declaration public void IfRight(Action<TRight> onRight) Parameters Type Name Description Action <TRight> onRight | Improve this Doc View Source OnLeft<TResult>(Func<TLeft, TResult>) Maps a function over the Either only if the value is an instance of TLeft . Declaration public Either<TResult, TRight> OnLeft<TResult>(Func<TLeft, TResult> onLeft) Parameters Type Name Description Func <TLeft, TResult> onLeft Returns Type Description Either <TResult, TRight> Type Parameters Name Description TResult | Improve this Doc View Source OnRight<TResult>(Func<TRight, TResult>) Maps a function over the Either only if the value is an instance of TRight . Declaration public Either<TLeft, TResult> OnRight<TResult>(Func<TRight, TResult> onRight) Parameters Type Name Description Func <TRight, TResult> onRight Returns Type Description Either <TLeft, TResult> Type Parameters Name Description TResult | Improve this Doc View Source Swap() Converts this Either<TLeft, TRight> to an Either<TRight, TLeft> . Declaration public Either<TRight, TLeft> Swap() Returns Type Description Either <TRight, TLeft> | Improve this Doc View Source Switch(Action<TLeft>, Action<TRight>) Takes one of two actions depending on the underlying value. Declaration public void Switch(Action<TLeft> onLeft, Action<TRight> onRight) Parameters Type Name Description Action <TLeft> onLeft Action <TRight> onRight | Improve this Doc View Source Switch<T>(Func<TLeft, T>, Func<TRight, T>) Calls one of two functions depending on the underlying value. Declaration public T Switch<T>(Func<TLeft, T> onLeft, Func<TRight, T> onRight) Parameters Type Name Description Func <TLeft, T> onLeft Func <TRight, T> onRight Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToString() Returns the string representation of the underlying value. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Either<TLeft, TRight>, Either<TLeft, TRight>) Determines whether two instances of Either<TLeft, TRight> have the same value. Declaration public static bool operator ==(Either<TLeft, TRight> lhs, Either<TLeft, TRight> rhs) Parameters Type Name Description Either <TLeft, TRight> lhs Either <TLeft, TRight> rhs Returns Type Description Boolean | Improve this Doc View Source Implicit(TLeft to Either<TLeft, TRight>) Converts an instance of a type to an Either<TLeft, TRight> . Declaration public static implicit operator Either<TLeft, TRight>(TLeft left) Parameters Type Name Description TLeft left Returns Type Description Either <TLeft, TRight> | Improve this Doc View Source Implicit(TRight to Either<TLeft, TRight>) Converts an instance of a type to an Either<TLeft, TRight> . Declaration public static implicit operator Either<TLeft, TRight>(TRight right) Parameters Type Name Description TRight right Returns Type Description Either <TLeft, TRight> | Improve this Doc View Source Inequality(Either<TLeft, TRight>, Either<TLeft, TRight>) Determines whether two instances of Either<TLeft, TRight> have the same value. Declaration public static bool operator !=(Either<TLeft, TRight> lhs, Either<TLeft, TRight> rhs) Parameters Type Name Description Either <TLeft, TRight> lhs Either <TLeft, TRight> rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Recore.Hasher.html": {
    "href": "api/Recore.Hasher.html",
    "title": "Class Hasher | RecoreFX",
    "keywords": "Class Hasher Computes hash codes for types. Inheritance Object Hasher Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Hasher Methods | Improve this Doc View Source GetHashCode(Int32, Int32, Int32, Object[]) Combines the hash codes of one or more objects into a single hash code. Declaration public static int GetHashCode(int seed1 = 17, int seed2 = 23, int nullHash = 0, params object[] fields) Parameters Type Name Description Int32 seed1 Int32 seed2 Int32 nullHash Object [] fields Returns Type Description Int32 Remarks This is useful for computing the hash code for a type from the hash codes of all its members. It is superseded in .NET Core 3.0 by the System.HashCode type."
  },
  "api/Recore.Collections.Generic.IDictionaryExtensions.html": {
    "href": "api/Recore.Collections.Generic.IDictionaryExtensions.html",
    "title": "Class IDictionaryExtensions | RecoreFX",
    "keywords": "Class IDictionaryExtensions Provides additional methods for working with IDictionary . Inheritance Object IDictionaryExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class IDictionaryExtensions Methods | Improve this Doc View Source Append<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Adds an entry to the dictionary and passes the dictionary through. Declaration public static IDictionary<TKey, TValue> Append<TKey, TValue>(this IDictionary<TKey, TValue> dict, TKey key, TValue value) Parameters Type Name Description IDictionary <TKey, TValue> dict TKey key TValue value Returns Type Description IDictionary <TKey, TValue> Type Parameters Name Description TKey TValue | Improve this Doc View Source ValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) Gets the value that is associated with the specific key or the default value for the type TValue . Declaration public static TValue ValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dict, TKey key) Parameters Type Name Description IReadOnlyDictionary <TKey, TValue> dict TKey key Returns Type Description TValue Type Parameters Name Description TKey TValue Remarks This is duplicated from IReadOnlyDictionaryExtensions because IDictionary does not extend IReadOnlyDictionary ."
  },
  "api/Recore.Collections.Generic.ListExtensions.html": {
    "href": "api/Recore.Collections.Generic.ListExtensions.html",
    "title": "Class ListExtensions | RecoreFX",
    "keywords": "Class ListExtensions Provides additional methods for working with List . Inheritance Object ListExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class ListExtensions Methods | Improve this Doc View Source AppendRange<T>(List<T>, IEnumerable<T>) Adds the elements of the specified collection to the end of the list and passes the list through. Declaration public static List<T> AppendRange<T>(this List<T> list, IEnumerable<T> collection) Parameters Type Name Description List <T> list IEnumerable <T> collection Returns Type Description List <T> Type Parameters Name Description T"
  },
  "api/Recore.Func.html": {
    "href": "api/Recore.Func.html",
    "title": "Class Func | RecoreFX",
    "keywords": "Class Func Contains methods for working with functions. Inheritance Object Func Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Func Methods | Improve this Doc View Source Invoke<T>(Func<T>) Call a function and return its result. Declaration public static T Invoke<T>(Func<T> f) Parameters Type Name Description Func <T> f Returns Type Description T Type Parameters Name Description T Remarks This method is useful for making immediately-invoked function expressions in C#."
  },
  "api/Recore.Result-2.html": {
    "href": "api/Recore.Result-2.html",
    "title": "Class Result<TValue, TError> | RecoreFX",
    "keywords": "Class Result<TValue, TError> Represents the result of an operation that can be successful or failed. Inheritance Object Result<TValue, TError> Implements IEquatable < Result <TValue, TError>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public sealed class Result<TValue, TError> : IEquatable<Result<TValue, TError>> Type Parameters Name Description TValue TError Constructors | Improve this Doc View Source Result(TValue) Constructs an instance of the type from a value of TValue . Declaration public Result(TValue value) Parameters Type Name Description TValue value | Improve this Doc View Source Result(TError) Constructs an instance of the type from a value of TError . Declaration public Result(TError error) Parameters Type Name Description TError error Properties | Improve this Doc View Source IsSuccessful Indicates whether the result is successful. Declaration public bool IsSuccessful { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(Result<TValue, TError>) Compares two instances of Result<TValue, TError> for equality. Declaration public bool Equals(Result<TValue, TError> other) Parameters Type Name Description Result <TValue, TError> other Returns Type Description Boolean Remarks Equality is defined as both objects' underlying values or errors being equal. | Improve this Doc View Source Equals(Object) Compares this Result<TValue, TError> to another object for equality. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) Remarks Two Result s are equal only if they have the same type parameters in the same order. For example, an Result<int, string> and an Result<string, int> will always be nonequal. | Improve this Doc View Source GetError() Converts Result<TValue, TError> to Optional<TError> Declaration public Optional<TError> GetError() Returns Type Description Optional <TError> | Improve this Doc View Source GetHashCode() Returns the hash code of the underlying value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source GetValue() Converts Result<TValue, TError> to Optional<TValue> Declaration public Optional<TValue> GetValue() Returns Type Description Optional <TValue> | Improve this Doc View Source IfError(Action<TError>) Takes an action only if the the result is failed. Declaration public void IfError(Action<TError> onError) Parameters Type Name Description Action <TError> onError | Improve this Doc View Source IfValue(Action<TValue>) Takes an action only if the result is successful. Declaration public void IfValue(Action<TValue> onValue) Parameters Type Name Description Action <TValue> onValue | Improve this Doc View Source OnError<TResult>(Func<TError, TResult>) Maps a function over the Result only if the result is failed. Declaration public Result<TValue, TResult> OnError<TResult>(Func<TError, TResult> onError) Parameters Type Name Description Func <TError, TResult> onError Returns Type Description Result <TValue, TResult> Type Parameters Name Description TResult | Improve this Doc View Source OnValue<TResult>(Func<TValue, TResult>) Maps a function over the Result only if the result is successful. Declaration public Result<TResult, TError> OnValue<TResult>(Func<TValue, TResult> onValue) Parameters Type Name Description Func <TValue, TResult> onValue Returns Type Description Result <TResult, TError> Type Parameters Name Description TResult | Improve this Doc View Source Switch(Action<TValue>, Action<TError>) Takes one of two actions depending on whether the result is successful. Declaration public void Switch(Action<TValue> onValue, Action<TError> onError) Parameters Type Name Description Action <TValue> onValue Action <TError> onError | Improve this Doc View Source Switch<T>(Func<TValue, T>, Func<TError, T>) Calls one of two functions depending on whether the result is successful. Declaration public T Switch<T>(Func<TValue, T> onValue, Func<TError, T> onError) Parameters Type Name Description Func <TValue, T> onValue Func <TError, T> onError Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Then<TResult>(Func<TValue, Result<TResult, TError>>) Chains another Result -producing operation from another. Declaration public Result<TResult, TError> Then<TResult>(Func<TValue, Result<TResult, TError>> f) Parameters Type Name Description Func <TValue, Result <TResult, TError>> f Returns Type Description Result <TResult, TError> Type Parameters Name Description TResult Remarks This is a monad bind operation. Conceptually, it is the same as passing f to OnValue and then \"flattening\" the result. | Improve this Doc View Source ToString() Returns the string representation of the underlying value or error. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Result<TValue, TError>, Result<TValue, TError>) Determines whether two instances of Result<TValue, TError> have the same value. Declaration public static bool operator ==(Result<TValue, TError> lhs, Result<TValue, TError> rhs) Parameters Type Name Description Result <TValue, TError> lhs Result <TValue, TError> rhs Returns Type Description Boolean | Improve this Doc View Source Implicit(TValue to Result<TValue, TError>) Converts an instance of a type to an Result<TValue, TError> . Declaration public static implicit operator Result<TValue, TError>(TValue value) Parameters Type Name Description TValue value Returns Type Description Result <TValue, TError> | Improve this Doc View Source Implicit(TError to Result<TValue, TError>) Converts an instance of a type to an Result<TValue, TError> . Declaration public static implicit operator Result<TValue, TError>(TError error) Parameters Type Name Description TError error Returns Type Description Result <TValue, TError> | Improve this Doc View Source Inequality(Result<TValue, TError>, Result<TValue, TError>) Determines whether two instances of Result<TValue, TError> have the same value. Declaration public static bool operator !=(Result<TValue, TError> lhs, Result<TValue, TError> rhs) Parameters Type Name Description Result <TValue, TError> lhs Result <TValue, TError> rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Recore.Optional.html": {
    "href": "api/Recore.Optional.html",
    "title": "Class Optional | RecoreFX",
    "keywords": "Class Optional Provides additional methods for Optional<T> . Inheritance Object Optional Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore Assembly : Recore.dll Syntax public static class Optional Methods | Improve this Doc View Source Flatten<T>(Optional<Optional<T>>) Converts an Optional<Optional<T>> to an Optional<T> . Declaration public static Optional<T> Flatten<T>(this Optional<Optional<T>> optionalOptional) Parameters Type Name Description Optional < Optional <T>> optionalOptional Returns Type Description Optional <T> Type Parameters Name Description T | Improve this Doc View Source If<T>(Boolean, T) Sets an optional value if a condition is true. Declaration public static Optional<T> If<T>(bool condition, T value) Parameters Type Name Description Boolean condition T value Returns Type Description Optional <T> Type Parameters Name Description T Remarks This method is useful for converting the TryParse pattern to an Optional result. | Improve this Doc View Source NonEmpty<T>(IEnumerable<Optional<T>>) Collects the non-empty values from the sequence. Declaration public static IEnumerable<T> NonEmpty<T>(this IEnumerable<Optional<T>> source) Parameters Type Name Description IEnumerable < Optional <T>> source Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source Of<T>(T) Makes a value optional. Declaration public static Optional<T> Of<T>(T value) Parameters Type Name Description T value Returns Type Description Optional <T> Type Parameters Name Description T Remarks This is useful for type inference in some cases where the implicit conversion can't be used, such as creating an Optional<T> and immediately invoking a method. It can also be passed as a delegate whereas the constructor can't be."
  },
  "api/Recore.Collections.Generic.html": {
    "href": "api/Recore.Collections.Generic.html",
    "title": "Namespace Recore.Collections.Generic | RecoreFX",
    "keywords": "Namespace Recore.Collections.Generic Classes ICollectionExtensions Provides additional methods for working with ICollection . IDictionaryExtensions Provides additional methods for working with IDictionary . IReadOnlyDictionaryExtensions Provides additional methods for working with IReadOnlyDictionary . LinkedListExtensions Provides additional methods for working with LinkedList . ListExtensions Provides additional methods for working with List ."
  },
  "api/Recore.RelativeUri.html": {
    "href": "api/Recore.RelativeUri.html",
    "title": "Class RelativeUri | RecoreFX",
    "keywords": "Class RelativeUri Represents a relative URI. Inheritance Object Uri RelativeUri Implements ISerializable Inherited Members Uri.SchemeDelimiter Uri.UriSchemeFile Uri.UriSchemeFtp Uri.UriSchemeGopher Uri.UriSchemeHttp Uri.UriSchemeHttps Uri.UriSchemeMailto Uri.UriSchemeNetPipe Uri.UriSchemeNetTcp Uri.UriSchemeNews Uri.UriSchemeNntp Uri.Canonicalize() Uri.CheckHostName(String) Uri.CheckSchemeName(String) Uri.CheckSecurity() Uri.Compare(Uri, Uri, UriComponents, UriFormat, StringComparison) Uri.Equals(Object) Uri.Escape() Uri.EscapeDataString(String) Uri.EscapeString(String) Uri.EscapeUriString(String) Uri.FromHex(Char) Uri.GetComponents(UriComponents, UriFormat) Uri.GetHashCode() Uri.GetLeftPart(UriPartial) Uri.GetObjectData(SerializationInfo, StreamingContext) Uri.HexEscape(Char) Uri.HexUnescape(String, Int32) Uri.IsBadFileSystemCharacter(Char) Uri.IsBaseOf(Uri) Uri.IsExcludedCharacter(Char) Uri.IsHexDigit(Char) Uri.IsHexEncoding(String, Int32) Uri.IsReservedCharacter(Char) Uri.IsWellFormedOriginalString() Uri.IsWellFormedUriString(String, UriKind) Uri.MakeRelative(Uri) Uri.MakeRelativeUri(Uri) Uri.Parse() Uri.ISerializable.GetObjectData(SerializationInfo, StreamingContext) Uri.ToString() Uri.TryCreate(String, UriKind, Uri) Uri.TryCreate(Uri, String, Uri) Uri.TryCreate(Uri, Uri, Uri) Uri.Unescape(String) Uri.UnescapeDataString(String) Uri.AbsolutePath Uri.AbsoluteUri Uri.Authority Uri.DnsSafeHost Uri.Fragment Uri.Host Uri.HostNameType Uri.IdnHost Uri.IsAbsoluteUri Uri.IsDefaultPort Uri.IsFile Uri.IsLoopback Uri.IsUnc Uri.LocalPath Uri.OriginalString Uri.PathAndQuery Uri.Port Uri.Query Uri.Scheme Uri.Segments Uri.UserEscaped Uri.UserInfo Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public class RelativeUri : Uri, ISerializable Constructors | Improve this Doc View Source RelativeUri(String) Initializes a new instance of RelativeUri with the given URI. Declaration public RelativeUri(string uriString) Parameters Type Name Description String uriString Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Recore.Text.Wildcard.html": {
    "href": "api/Recore.Text.Wildcard.html",
    "title": "Class Wildcard | RecoreFX",
    "keywords": "Class Wildcard Represents a text pattern with * and ? wildcard characters. Inheritance Object Wildcard Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Text Assembly : Recore.dll Syntax public sealed class Wildcard Remarks In evaluating matches for the pattern, * will match zero or more characters while ? will match a single character. Constructors | Improve this Doc View Source Wildcard(String) Initializes a new instance of the Wildcard type with the specified pattern. Declaration public Wildcard(string pattern) Parameters Type Name Description String pattern Properties | Improve this Doc View Source Pattern Gets the pattern that was passed to the Wildcard constructor. Declaration public string Pattern { get; } Property Value Type Description String Methods | Improve this Doc View Source IsMatch(String) Determines whether a string matches the wildcard pattern. Declaration public bool IsMatch(string text) Parameters Type Name Description String text Returns Type Description Boolean"
  },
  "api/Recore.Collections.Generic.IReadOnlyDictionaryExtensions.html": {
    "href": "api/Recore.Collections.Generic.IReadOnlyDictionaryExtensions.html",
    "title": "Class IReadOnlyDictionaryExtensions | RecoreFX",
    "keywords": "Class IReadOnlyDictionaryExtensions Provides additional methods for working with IReadOnlyDictionary . Inheritance Object IReadOnlyDictionaryExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Recore.Collections.Generic Assembly : Recore.dll Syntax public static class IReadOnlyDictionaryExtensions Methods | Improve this Doc View Source ValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) Gets the value that is associated with the specific key or the default value for the type TValue . Declaration public static TValue ValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dict, TKey key) Parameters Type Name Description IReadOnlyDictionary <TKey, TValue> dict TKey key Returns Type Description TValue Type Parameters Name Description TKey TValue"
  },
  "api/Recore.Security.Cryptography.html": {
    "href": "api/Recore.Security.Cryptography.html",
    "title": "Namespace Recore.Security.Cryptography | RecoreFX",
    "keywords": "Namespace Recore.Security.Cryptography Classes SecureCompare Provides methods for securely comparing objects."
  },
  "api/Recore.Text.html": {
    "href": "api/Recore.Text.html",
    "title": "Namespace Recore.Text | RecoreFX",
    "keywords": "Namespace Recore.Text Classes Wildcard Represents a text pattern with * and ? wildcard characters."
  },
  "api/Recore.Token.html": {
    "href": "api/Recore.Token.html",
    "title": "Class Token | RecoreFX",
    "keywords": "Class Token Represents a non-null, non-empty string value where whitespace is not allowed. Inheritance Object Token Implements IEquatable < Token > IComparable < Token > IEquatable < String > IComparable < String > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Recore Assembly : Recore.dll Syntax public sealed class Token : IEquatable<Token>, IComparable<Token>, IEquatable<string>, IComparable<string> Remarks This type is meant to feel like a subclass of String , which is sealed. Constructors | Improve this Doc View Source Token(String) Constructs an instance of Token from a string value. Declaration public Token(string value) Parameters Type Name Description String value Methods | Improve this Doc View Source CompareTo(Token) Compares this instance with a specified Token object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object. Declaration public int CompareTo(Token other) Parameters Type Name Description Token other Returns Type Description Int32 | Improve this Doc View Source CompareTo(String) Compares this instance with a specified String object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object. Declaration public int CompareTo(string other) Parameters Type Name Description String other Returns Type Description Int32 | Improve this Doc View Source Equals(Token) Determines whether this instance and another Token have the same value. Declaration public bool Equals(Token other) Parameters Type Name Description Token other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether this instance and another object, which must be a Token or a String , have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source Equals(String) Determines whether this instance and a String have the same value. Declaration public bool Equals(string other) Parameters Type Name Description String other Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Returns the hash code of the underlying value. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns the underlying string value. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Token, Token) Determines whether two instances of Token have the same value. Declaration public static bool operator ==(Token lhs, Token rhs) Parameters Type Name Description Token lhs Token rhs Returns Type Description Boolean | Improve this Doc View Source Implicit(Token to String) Converts this instance to its underlying value. Declaration public static implicit operator string (Token t) Parameters Type Name Description Token t Returns Type Description String | Improve this Doc View Source Inequality(Token, Token) Determines whether two instances of Token have different values. Declaration public static bool operator !=(Token lhs, Token rhs) Parameters Type Name Description Token lhs Token rhs Returns Type Description Boolean Implements System.IEquatable<T> System.IComparable<T> System.IEquatable<T> System.IComparable<T>"
  }
}